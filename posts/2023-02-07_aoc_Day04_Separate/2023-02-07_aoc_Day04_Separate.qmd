---
title: "Advent of Code Day 4: Separate"
date: 2023-02-07
---
```{r}
#| echo: false
#| results: "hide"
renv::use(lockfile = "renv.lock")
```
Contiguous sections to be cleaned by the elves are parsed from the input file to identify overlapping assignments.

## Introduction

This post explains my solution to the [Advent of Code](http://adventofcode.com/) problem from Day 4. The contiguous sections for each set of elf cleaning crews is listed as one line separated by a comma.  Each contiguous section for each crew is listed as first section to be cleaned and last section to be cleaned separated by a hyphen.
```{r}
#| warning: false
#| output: false
library(tidyverse)

filepath <- here::here("./posts/data/aoc/day04_input.txt")

data <- read_delim(filepath, delim = "\n", col_names = c("assignments"))
```
So, in the first line, crew 1 is assigned to clean section 31 (i.e. first and last section to be cleaned).  Crew 2 is assigned to clean from section 32 to section 40.  We can parse these input lines using the ```separate``` function from the ```tidyr``` package.

```{r}
split_data <- data |>
  separate(assignments, c("clean_1", "clean_2"), sep = ",") |>
  separate(clean_1, c("clean_1_start", "clean_1_end"), sep = "-") |>
  separate(clean_2, c("clean_2_start", "clean_2_end"), sep = "-") |>
  mutate_if(is.character, as.integer)

split_data |> slice(1:5)
```
## Solution to Part One

The first question is to find for how many assignments are the assigned sections for one cleaning crew completely contained within the assigned sections for the other cleaning crew.  For example, if cleaning crew 1 is assigned sections 2-8 and cleaning crew 2 is assigned sections 3-5 then the assignment for crew 2 is contained within the assignment for crew 1.

```{r}
overlap_data <- split_data |>
  rowwise() |>
  mutate(overlap = (clean_1_start <= clean_2_start) & (clean_1_end >= clean_2_end) |     #clean 2 contained within clean 1 or
                   (clean_1_start >= clean_2_start) & (clean_1_end <= clean_2_end)) |>   #clean 1 contained within clean 2
  ungroup()

overlap_data |> slice(1:5)
```


You can then add up all of rows where ```overlap``` is TRUE to find the answer to Part One.
```{r}
overlap_data |>
  summarize(total_overlaps = sum(overlap))
```
## Solution to Part Two

The second question is for how many of the assignments do the sections for crew 1 and crew 2 overlap at all.  The easier way to answer this question is to find the assignments with no overlap.  You just need to check if the ending section for crew 1 is less than the starting section for crew 2 or the ending section for crew 2 is less than the starting section for crew 1.

```{r}
partial_overlap_data <- split_data |>
  rowwise() |>
  mutate(no_overlap = (clean_1_end < clean_2_start) | (clean_2_end < clean_1_start)) |>
  ungroup()

partial_overlap_data |> slice(1:5)
```
You can then add up all the rows where ```no_overlap``` is TRUE and subtract from the total number of rows (assignments).
```{r}
partial_overlap_data |>
  summarize(total_partial_overlap = nrow(partial_overlap_data) - sum(no_overlap))
```

## Summary
The problem for Day 4 was pretty straightforward in implementing the logical tests once the input data was tidied.  The ```separate``` function made it easy to parse the input data into a tibble and then perform row-wise calculations.

:::{.callout-tip collapse="true"}
## Expand for Session Info
```{r}
#| warning: false
#| echo: false
library(sessioninfo)
# save the session info as an object
pkg_sesh <- session_info(pkgs = "attached")

# get the quarto version
quarto_version <- system("quarto --version", intern = TRUE)

# inject the quarto info
pkg_sesh$platform$quarto <- paste(
  system("quarto --version", intern = TRUE), 
  "@", 
  quarto::quarto_path()
  )

# print it out
pkg_sesh
```
:::

