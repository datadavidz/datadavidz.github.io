{
  "hash": "f4d651a1cbfa76149f35b8e3983341cc",
  "result": {
    "markdown": "---\ntitle: \"GLM model for Concrete Strenght\"\ndate: \"2022-09-03\"\n---\n\n\nA generalized linear model (GLM) was built to predict compressive strength of high-performance concrete formulations.\n\nAn elastic net regularization has been employed to develop the generalized linear model using the ```glmnet``` engine within the ```tidymodels``` framework.  These results will be compared with a conventional materials modeling approach in the next post.\n\n##Load libraries\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(readxl)\nlibrary(tidyverse)\n\n#Tidymodels\nlibrary(tidymodels)\nlibrary(vip)\n```\n:::\n\n\n\n\n## 3-Stage Machine Learning Approach\nWe will utilize the 3-stage machine learning approach promoted by Matt Dancho at [Business Science](https://www.business-science.io).  He posted an excellent tutorial \"Product Price Prediction: A Tidy Hyperparameter Tuning and Cross Validation Tutorial\".  I haven't found a better example of applying the tidymodels framework to develop a predictive model.\n\nThe 3-stage hyperparameter tuning process:  \n1. **Find Parameters:** Use hyperparameter tuning on a \"training dataset\" that sections your training data into cross validation folds.  The output of stage 1 is the parameter set.  \n2. **Compare and Select the Best Model:** Evaluate the performance on a hidden \"test dataset\".  The output at Stage 2 is what we determined as the best model.  \n3. **Train Final Model:** Once we have selected the best model, we train the full dataset.  This model goes into production.  \n\n### Stage 1: Find Parameters\nHere we want to make different machine learning models and try them out by performing the following steps:\n- Initial Splitting: Separate into random training and test datasets\n- Preprocessing: Make a pipeline to transform raw data into a dataset ready for machine learning\n- Cross Validation Specification: Sample the training data into splits\n- Model Specification: Select model algorithms and identify key tuning parameters\n- Grid Specification: Set up a grid using wise parameter choices\n- Hyperparameter Tuning: Implement the tuning process\n\nInitial splitting of the dataset into Training and Test Dataset  Here we use the rsample package to create an 80/20 split.  The concrete dataset contains 1030 formulations of which 825 are randomly assigned to training and 205 are randomly assigned to testing.\n\n::: {.cell}\n\n```{.r .cell-code}\nset.seed(123)\nconcrete_split <- initial_split(concrete_tbl, prop = 0.80)\nconcrete_train <- training(concrete_split)\nconcrete_test <- testing(concrete_split)\n```\n:::\n\n\nPreprocessing is accomplished by using the recipe package.  The recipe provides the steps required to transform our raw data into a dataset suitable for machine learning.  The Concrete dataset actually doesn't require much reformatting.  The major issue was the lengthy column names which was addressed immediately after the dataset was imported.  The dataset contained all numerical values and no missing data.  Initially we will just center and scale the predictors before sending to the glmnet model.\n\n::: {.cell}\n\n```{.r .cell-code}\nconcrete_rec <- recipe(compressive_strength ~ ., data = concrete_train) %>%\n  step_center(all_predictors()) %>%\n  step_scale(all_predictors())\n\nconcrete_rec\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nRecipe\n\nInputs:\n\n      role #variables\n   outcome          1\n predictor          8\n\nOperations:\n\nCentering for all_predictors()\nScaling for all_predictors()\n```\n:::\n:::\n\n\nCross validation folds are created in order to assess the performance of the model parameters.  Here we use 5-fold cross validation to create splits from our training dataset and also using the preprocessing pipeline specified above.\n\n::: {.cell}\n\n```{.r .cell-code}\nset.seed(234)\nconcrete_folds <- vfold_cv(concrete_train, v = 5)\n\nconcrete_folds\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n#  5-fold cross-validation \n# A tibble: 5 × 2\n  splits            id   \n  <list>            <chr>\n1 <split [659/165]> Fold1\n2 <split [659/165]> Fold2\n3 <split [659/165]> Fold3\n4 <split [659/165]> Fold4\n5 <split [660/164]> Fold5\n```\n:::\n:::\n\n\nModel specifications are created using the parsnip package.  Here we specify a linear regression model using the glmnet engine.  glmnet uses an Elastic Net which combines LASSO and Ridge Regression techniques.  This is a linear algorithm which may have difficulty with the skewed numeric data which is present in the Concrete dataset.  Notice that the penalty and mixture parameters have been specified to be tuned.\n\n::: {.cell}\n\n```{.r .cell-code}\nglmnet_spec <- linear_reg(\n  penalty = tune(),\n  mixture = tune()\n) %>%\n  set_engine(\"glmnet\") %>%\n  set_mode(\"regression\")\n\nglmnet_spec\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nLinear Regression Model Specification (regression)\n\nMain Arguments:\n  penalty = tune()\n  mixture = tune()\n\nComputational engine: glmnet \n```\n:::\n:::\n\n\nGrid specifications sets up a variety of parameter values used with our model to find which combination yields the lowest prediction error (or best accuracy).  Here we specify the parameter ranges and grid function using the dials package.\n\nSpecify the grid function (max entropy, hypercube etc.).  Here we make a grid of 20 values using the grid_max_entropy() function in the dials package.  Since there are just 2 tuning parameters in this case, we can visualize the grid selections.  Note the penalty parameter is on the log base 10 scale by default.  The dials package helps us make smarter choices for the critical tuning parameters.\n\n::: {.cell}\n\n```{.r .cell-code}\nset.seed(345)\nglmnet_grid <- grid_max_entropy(penalty(), mixture(), size = 20)\n\nglmnet_grid %>%\n  ggplot(aes(penalty, mixture)) +\n  geom_point(color = \"steelblue\", size = 3) +\n  scale_x_log10() +\n  theme_light() +\n  labs(title = \"Max Entropy Grid\", x = \"Penalty (log scale)\", y = \"Mixture\")\n```\n\n::: {.cell-output-display}\n![](2022-09-03_ConcreteGLM_files/figure-html/unnamed-chunk-12-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nconcrete_wf <- workflow() %>%\n  add_recipe(concrete_rec) %>%\n  add_model(glmnet_spec)\n```\n:::\n\n\nHyperparameter tuning is now performed using the tune_grid() function from the tune package.  Here we specific the formula, model, resamples, grid and metrics.  The metrics come from the yardstick package. For regression problems, we can specify multiple metrics such as mae, mape, rmse and rsq into a metric_set().\n\n\n::: {.cell hash='2022-09-03_ConcreteGLM_cache/html/unnamed-chunk-16_96ea513f88b9e7eba2151b2ec05f6a15'}\n\n```{.r .cell-code}\ndoParallel::registerDoParallel()\n\nglmnet_res <- tune_grid(\n  concrete_wf,\n  resamples = concrete_folds,\n  grid = glmnet_grid,\n  metrics = metric_set(rmse, rsq, mae),\n  control = control_grid(save_pred = TRUE)\n)\n```\n:::\n\n\nIdentify the best hyperparameter values using the show_best() function.\n\n::: {.cell}\n\n```{.r .cell-code}\nglmnet_res %>% show_best(\"mae\", n = 5)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 5 × 8\n   penalty mixture .metric .estimator  mean     n std_err .config              \n     <dbl>   <dbl> <chr>   <chr>      <dbl> <int>   <dbl> <chr>                \n1 1.09e- 9   0.155 mae     standard    8.10     5   0.216 Preprocessor1_Model06\n2 5.89e- 4   0.208 mae     standard    8.10     5   0.216 Preprocessor1_Model07\n3 4.05e-10   0.392 mae     standard    8.10     5   0.216 Preprocessor1_Model10\n4 1.16e- 6   0.340 mae     standard    8.10     5   0.216 Preprocessor1_Model08\n5 1.41e- 8   0.520 mae     standard    8.10     5   0.216 Preprocessor1_Model12\n```\n:::\n:::\n\n\nVisualize the tuning results  \n\n::: {.cell}\n::: {.cell-output-display}\n![](2022-09-03_ConcreteGLM_files/figure-html/unnamed-chunk-20-1.png){width=672}\n:::\n:::\n\n### Stage 2: Compare and Select the Best Model\n\nSelect the best parameters based on the lowest mean absolute error.\n\n::: {.cell}\n\n```{.r .cell-code}\nparams_glmnet_best <- glmnet_res %>% select_best(\"mae\")\nparams_glmnet_best\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 1 × 3\n        penalty mixture .config              \n          <dbl>   <dbl> <chr>                \n1 0.00000000109   0.155 Preprocessor1_Model06\n```\n:::\n:::\n\n\nFinalize the model with the best parameters.\n\n::: {.cell}\n\n```{.r .cell-code}\nfinal_glmnet <- finalize_workflow(concrete_wf, params_glmnet_best)\n\nfinal_glmnet\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n══ Workflow ════════════════════════════════════════════════════════════════════\nPreprocessor: Recipe\nModel: linear_reg()\n\n── Preprocessor ────────────────────────────────────────────────────────────────\n2 Recipe Steps\n\n• step_center()\n• step_scale()\n\n── Model ───────────────────────────────────────────────────────────────────────\nLinear Regression Model Specification (regression)\n\nMain Arguments:\n  penalty = 1.09262294094878e-09\n  mixture = 0.155459027038887\n\nComputational engine: glmnet \n```\n:::\n:::\n\n\nWhich Features are most important?\n\n::: {.cell}\n\n```{.r .cell-code}\nfinal_glmnet %>%\n  fit(data = concrete_train) %>%\n  pull_workflow_fit() %>%\n  vip(aesthetics = list(fill = \"steelblue\")) +\n  labs(title = \"GLMNET Model Importance - Compressive Strength (MPa) Prediction\")\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: `pull_workflow_fit()` was deprecated in workflows 0.2.3.\nPlease use `extract_fit_parsnip()` instead.\n```\n:::\n\n::: {.cell-output-display}\n![](2022-09-03_ConcreteGLM_files/figure-html/unnamed-chunk-26-1.png){width=672}\n:::\n:::\n\n### Stage 3: Train Final Model\n\nFit model on train and evaluate on test.\n\n::: {.cell}\n\n```{.r .cell-code}\nfinal_res <- last_fit(final_glmnet, concrete_split, metrics = metric_set(rmse, rsq, mae))\n```\n:::\n\n\nAssess final model performance metrics.\n\n::: {.cell}\n\n```{.r .cell-code}\ncollect_metrics(final_res)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 3 × 4\n  .metric .estimator .estimate .config             \n  <chr>   <chr>          <dbl> <chr>               \n1 rmse    standard      11.4   Preprocessor1_Model1\n2 rsq     standard       0.615 Preprocessor1_Model1\n3 mae     standard       9.09  Preprocessor1_Model1\n```\n:::\n:::\n\n\nVisualize actual vs. predicted compressive strength for final model.  \n\n::: {.cell}\n::: {.cell-output-display}\n![](2022-09-03_ConcreteGLM_files/figure-html/unnamed-chunk-32-1.png){width=672}\n:::\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}