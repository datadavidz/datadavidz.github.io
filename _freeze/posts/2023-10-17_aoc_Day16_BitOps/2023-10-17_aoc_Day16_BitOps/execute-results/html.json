{
  "hash": "f2daf091fd39345247fa6ca258db6641",
  "result": {
    "markdown": "---\ntitle: \"Advent of Code Day 16: BitOps and Hashtables\"\ndate: 2023-10-17\n---\n\n::: {.cell}\n\n:::\n\n\nFinding the sequence of valves to open to maximize the pressure relief\n\n## Introduction\n\nThis post explains my solution to the [Advent of Code](http://adventofcode.com/) problem from Day 16.  At the location of the distress beacon from Day 15, a device exists to scan the cave (and with elephants).  The scan reveals a series of pipes and pressure relief valves.  Also, each pipe has a specific flow rate and network of tunnels provides access to all of the valves.  The goal is to determine the sequence of valves to open to maximize the pressure release in a given amount of time.  It takes 1 min to move through a single tunnel to a new valve location and another minute to open the valve.\n\n## Loading the input file\n\nThe input file contains one text line for each valve with its flow rate and which valves are connected by taking different tunnels from this valve.  The file is read using the ```read_lines``` from the ```readr``` package.  Here we just load the example data because the analysis using this code for Part Two takes about 2 hours to run. \n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(readr)\nlibrary(stringr)\nlibrary(purrr)\nlibrary(bitops)\n\n#filepath <- here::here(\"./posts/data/aoc/day16_input.txt\")\nfilepath <- here::here(\"./posts/data/aoc/day16_test.txt\")\n\nvalves <- read_lines(filepath, skip_empty_rows = TRUE)\nvalves <- str_trim(valves)\nhead(valves)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"Valve AA has flow rate=0; tunnels lead to valves DD, II, BB\" \n[2] \"Valve BB has flow rate=13; tunnels lead to valves CC, AA\"    \n[3] \"Valve CC has flow rate=2; tunnels lead to valves DD, BB\"     \n[4] \"Valve DD has flow rate=20; tunnels lead to valves CC, AA, EE\"\n[5] \"Valve EE has flow rate=3; tunnels lead to valves FF, DD\"     \n[6] \"Valve FF has flow rate=0; tunnels lead to valves EE, GG\"     \n```\n:::\n:::\n\n\nA ```parse_valves``` function is defined to parse the required values from each input file line into a list.\n\n::: {.cell}\n\n```{.r .cell-code}\nparse_valves <- function(valve) {\n  temp <- str_split(valve, \";\")\n  label <- str_split(temp[[1]][1], \" \")[[1]][2]\n  flow <- str_split(temp[[1]][1], \" \")[[1]][5]\n  flow <- as.numeric(str_split(flow, \"=\")[[1]][2])\n  tunnels <- str_split(temp[[1]][2], \"valve[s]?\")\n  tunnels <- str_split(str_trim(tunnels[[1]][2]),\", \")\n  return(c(label = label, flow = flow, tunnels = tunnels))\n}\n```\n:::\n\n\nThe ```map``` function from ```purrr``` is used to apply the ```parse_valves``` function to each of the input file lines.  The result is a nested list structure.\n\n::: {.cell}\n\n```{.r .cell-code}\nparsed <- map(valves, parse_valves)\nhead(parsed, 3)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[[1]]\n[[1]]$label\n[1] \"AA\"\n\n[[1]]$flow\n[1] 0\n\n[[1]]$tunnels\n[1] \"DD\" \"II\" \"BB\"\n\n\n[[2]]\n[[2]]$label\n[1] \"BB\"\n\n[[2]]$flow\n[1] 13\n\n[[2]]$tunnels\n[1] \"CC\" \"AA\"\n\n\n[[3]]\n[[3]]$label\n[1] \"CC\"\n\n[[3]]$flow\n[1] 2\n\n[[3]]$tunnels\n[1] \"DD\" \"BB\"\n```\n:::\n:::\n\n\n## Part One: One person\n\nIn part one, you need to relieve as much pressure as possible in 30 min.  You start at valve AA and all of the valves are closed.  It takes 1 min to open a valve and 1 min to take a tunnel to another valve.  Two helper functions are created to check the flow for a specific valve and check the valves accessible through connecting tunnels from the current valve.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncheck_flow <- function(parsed_list, valve_label) {\n  parsed_list[map_lgl(parsed_list, ~.x$label == valve_label)][[1]]$flow\n}\n\ncheck_tunnels <- function(parsed_list, valve_label) {\n  parsed_list[map_lgl(parsed_list, ~.x$label == valve_label)][[1]]$tunnels\n}\n```\n:::\n\n\nMany of the valves have zero flow and, therefore, there is no benefit to opening that valve.  We calculate the distances between valves with non-zero flow only and store in list called ```dists```.  Each list element contains a character vector with the starting valve, ending valve and distance in min.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndists <- list()\nnonempty <- list()\nvisited <- list()\n\nfor (i in 1:length(parsed)) {\n  if ((parsed[[i]]$label != \"AA\") & (parsed[[i]]$flow == 0)) {\n    next\n  }\n  if ((parsed[[i]]$label != \"AA\")){\n    nonempty <- c(nonempty, parsed[[i]]$label)\n  }\n  \n  dists <- c(dists, list(c(parsed[[i]]$label, 0)))\n  visited <- parsed[[i]]$label\n  \n  queue <- list(list(parsed[[i]]$label, 0))\n  \n  while (length(queue) > 0) {\n    position <- queue[[1]][[1]]\n    distance <- queue[[1]][[2]]\n    queue <- queue[-1]\n    tunnels <- check_tunnels(parsed, position)\n    for (neighbor in tunnels) {\n      if (neighbor %in% visited) {\n        next\n      }\n      visited <- c(visited, neighbor)\n      flow <- check_flow(parsed, neighbor)\n      if (flow > 0) {\n        dists <- c(dists, list(c(parsed[[i]]$label, neighbor, distance + 1)))\n      }\n      queue <- c(queue, list(list(neighbor, distance + 1)))\n    }\n  }\n}\n\ndists <- dists[map_lgl(dists, function(x) length(x) == 3)]\nhead(dists)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[[1]]\n[1] \"AA\" \"DD\" \"1\" \n\n[[2]]\n[1] \"AA\" \"BB\" \"1\" \n\n[[3]]\n[1] \"AA\" \"CC\" \"2\" \n\n[[4]]\n[1] \"AA\" \"EE\" \"2\" \n\n[[5]]\n[1] \"AA\" \"JJ\" \"2\" \n\n[[6]]\n[1] \"AA\" \"HH\" \"5\" \n```\n:::\n:::\n\nA depth-first search is applied to find the optimal sequence for opening the valves.  A bitmask is used to track the status of the valves (with non-zero flows) with 0 for closed and 1 for open.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndfs <- function(time, valve, bitmask) {\n  \n  #check cache/hash enviroment\n  cache_index <- cache2[[paste(time, valve, bitmask)]]\n  if (!is.null(cache_index)) return(cache_index)\n  \n  maxval <- 0\n  dist_valve <- dists[map_lgl(dists, function(x) x[[1]] == valve)]\n  \n  for (i in seq_along(dist_valve)) {\n    \n    bit <- bitShiftL(1, which(nonempty == dist_valve[[i]][2])-1)\n\n    if (bitAnd(bitmask, bit)) {\n      next\n    }\n\n    remtime <- time - as.numeric(dist_valve[[i]][3]) - 1\n\n    if (remtime <= 0) {\n      next\n    }\n    \n    maxval <- max(maxval, dfs(remtime, dist_valve[[i]][2], bitOr(bitmask, bit)) + check_flow(parsed, dist_valve[[i]][2]) * remtime)\n  }\n  \n  cache2[[paste(time, valve, bitmask)]] <<- maxval\n  return(maxval)\n}\n```\n:::\n\n\nA hash environment is created to cache the pressure release for a specific time, valve and bitmask.  This hash environment significantly accelerates the calculations especially when you get to Part Two.\n\n::: {.cell}\n\n```{.r .cell-code}\n#hash table environment\ncache2 <- new.env(hash = TRUE)\n\nstart <- Sys.time()\ndfs(30, \"AA\", 0)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 1651\n```\n:::\n\n```{.r .cell-code}\nend <- Sys.time()\n\nend-start\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nTime difference of 0.1562989 secs\n```\n:::\n:::\n\n## Part Two: One person and an elephant!\n\nYou can teach an elephant how to open the valves in 4 min! Can you release more pressure in the remaining 26 min than working alone for 30 min?  Here we use the same depth-first search function but for both the person and the elephant.  The bitXor function is used to provide the opposite valve configuration for the elephant.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nb <- bitShiftL(1, length(nonempty)) - 1\nm <- 0\n\ncache2 <- new.env(hash = TRUE)\n\nstart <- Sys.time()\nfor (i in 1:(floor((b + 1) / 2))) {\n  m <- max(m, dfs(26, \"AA\", i-1) + dfs(26, \"AA\", bitXor(b, (i-1))))\n  #if (!(i %% 10)) print(paste(i, Sys.time()))\n}\nend <- Sys.time()\nend-start\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nTime difference of 0.5186789 secs\n```\n:::\n\n```{.r .cell-code}\nm\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 1707\n```\n:::\n:::\n\n## Summary\n\nI found Part Two was very challenging to execute in a reasonable time with the full input data set.  The hash environment was essential to be able to find the answer in a somewhat reasonable time of about 2 hours.  Interestingly, similar Python code executes in a matter of a couple minutes!\n\n:::{.callout-tip collapse=\"true\"}\n## Expand for Session Info\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n```\n─ Session info ───────────────────────────────────────────────────────────────\n setting  value\n version  R version 4.2.2 (2022-10-31 ucrt)\n os       Windows 10 x64 (build 19045)\n system   x86_64, mingw32\n ui       RTerm\n language (EN)\n collate  English_United States.utf8\n ctype    English_United States.utf8\n tz       America/Chicago\n date     2023-10-27\n pandoc   3.1.1 @ C:/Program Files/RStudio/resources/app/bin/quarto/bin/tools/ (via rmarkdown)\n quarto   1.3.433 @ C:\\\\PROGRA~1\\\\RStudio\\\\RESOUR~1\\\\app\\\\bin\\\\quarto\\\\bin\\\\quarto.exe\n\n─ Packages ───────────────────────────────────────────────────────────────────\n ! package     * version date (UTC) lib source\n P bitops      * 1.0-7   2021-04-24 [?] CRAN (R 4.2.0)\n P purrr       * 1.0.1   2023-01-10 [?] CRAN (R 4.2.3)\n P readr       * 2.1.4   2023-02-10 [?] CRAN (R 4.2.3)\n P sessioninfo * 1.2.2   2021-12-06 [?] CRAN (R 4.2.1)\n P stringr     * 1.5.0   2022-12-02 [?] CRAN (R 4.2.2)\n\n [1] C:/Users/David Zoller/AppData/Local/Temp/RtmpmUjaWp/renv-use-libpath-337473dc6026\n [2] C:/Users/David Zoller/Documents/datadavidz.github.io/renv/library/R-4.2/x86_64-w64-mingw32\n [3] C:/Users/David Zoller/AppData/Local/R/cache/R/renv/sandbox/R-4.2/x86_64-w64-mingw32/30182023\n\n P ── Loaded and on-disk path mismatch.\n\n──────────────────────────────────────────────────────────────────────────────\n```\n:::\n:::\n\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}