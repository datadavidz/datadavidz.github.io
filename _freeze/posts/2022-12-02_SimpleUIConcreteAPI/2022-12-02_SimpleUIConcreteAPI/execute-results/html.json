{
  "hash": "fe907f19f22ecd3363f84e5e9438b2ad",
  "result": {
    "markdown": "---\ntitle: \"A Rudimentary Shiny App for the Concrete API\"\ndate: \"2022-12-02\"\ncategories: [shiny, MLOps]\n---\n\n::: {.cell}\n\n:::\n\n\nA simple, user interface for requesting predictions from the Concrete API has been built using Shiny.\n\nA simple UI has been built which allows the user to adjust the amounts of the concrete ingredients and age.  The user can then send those selections to the Concrete API describes in a previous [post](https://datadavidz.github.io/posts/2022-10-21_ConcreteAPI/2022-10-21_ConcreteAPI.html) running on an Amazon EC2 instance.  A prediction of the compressive strength for the concrete formulation and age is then displayed in the Shiny app.  The UI also has a button to ping the API and check if it is online.  The app is currently deployed on [shinyapps.io](https://datadavidz.shinyapps.io/SimpleUIConcreteAPI/) but the likelihood it is still active when you are reading this post is quite low as it is not an application I will be actively maintaining.\n\n![Screenshot of the Shiny App to Interface with the Concrete API](SimpleUIConcreteAPI.PNG)\n\n## User Interface\n\nThe UI for the app is set up using the sidebarLayout with the 8 slider bars on the left for adjusting the concrete ingredient amounts and the age of the concrete.  The mainPanel contains the 2 action buttons.  The first button is used to ping the status of the API.  The second button is to send the sliderInputs to the API and receive back the prediction of concrete strength.  A text input is available in case the URL location of the API changes. The results print as text directly below the buttons.  The aim was to just get a working Shiny app and, hopefully, the user interface will be improved in a subsequent post.\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\nui <- fluidPage(\n \n  titlePanel(\"Predictions Using the Concrete API\"),\n  \n  sidebarLayout(\n    sidebarPanel(\n      sliderInput(\"cement\", \"Cement (kg)\", min = 100, max = 550, value = 275),\n      sliderInput(\"blast_furnace_slag\", \"Blast Furnace Slag (kg)\", min = 0, max = 375, value = 20),\n      sliderInput(\"fly_ash\", \"Fly Ash (kg)\", min = 0, max = 200, value = 0),\n      sliderInput(\"water\", \"Water (kg)\", min = 100, max = 250, value = 185),\n      sliderInput(\"superplasticizer\", \"Superplasticizer (kg)\", min = 0, max = 35, value = 5),\n      sliderInput(\"coarse_aggregate\", \"Coarse Aggregate (kg)\", min = 800, max = 1150, value = 975),\n      sliderInput(\"fine_aggregate\", \"Fine Aggregate (kg)\", min = 575, max = 1000, value = 775),\n      sliderInput(\"age\", \"Age (days)\", min = 1, max = 365, value = 28),\n    ),\n    mainPanel(\n      textInput(\"api_url\", \"API URL\", \"http://ec2-XX-YYY-ZZZ-AAA.compute-1.amazonaws.com:8000/\"),\n      actionButton(\"go\", \"Ping\"),\n      textOutput(\"status\"),\n      actionButton(\"predict\", \"Predict\"),\n      h1(textOutput(\"strength\"))\n    )\n  )\n)\n```\n:::\n\n\n## Server side\n\nThe app uses the ```httr``` package to connect to the Concrete API.  The httr ```GET``` command is used to obtain the API status.  The httr ```status_code``` function is used to parse the status code from the GET response.  The httr ```POST``` command is used to send the predictor inputs to the API and receive the output response.  The string format for the sending the predictor inputs is shown in the rapidDoc docs by looking the at the curl example.  This format is used in the body of the ```POST``` command also incorporating the values for the 8 sliderInputs.  The prediction for concrete strength is parsed from the content of the ```POST``` response.  Both the ```GET``` and ```POST``` commands are contained within an eventReactive tied to their respective action buttons.\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\nserver <- function(input, output) {\n  \n  resp <- eventReactive(input$go, {\n    GET(paste0(input$api_url, \"ping\"))\n  })\n  \n  post_resp <- eventReactive(input$predict, {\n    POST(paste0(input$api_url, \"predict\"), body = paste0('[{\"cement\":',input$cement,\n                                                         ',\"blast_furnace_slag\":', input$blast_furnace_slag,\n                                                         ',\"fly_ash\":', input$fly_ash, \n                                                         ',\"water\":', input$water,\n                                                         ',\"superplasticizer\":', input$superplasticizer,\n                                                         ',\"coarse_aggregate\":', input$coarse_aggregate,\n                                                         ',\"fine_aggregate\":', input$fine_aggregate,\n                                                         ',\"age\":', input$age,'}]'))\n  })\n  output$status <- renderText({\n    paste0(\"Status Code:\", status_code(resp()))\n  })\n  output$strength <- renderText({\n    paste0(content(post_resp(), as = \"parsed\")[[1]][[1]], \" MPa\")\n  })\n}\n```\n:::\n\n\nPredictions for different concrete formulations and ages can be accomplished by adjusting the slider inputs and then pressing the \"Predict\" action button.  Some potential improvements to the functioning of this app could include:\n\n- Clearing the current prediction when the Predict action button is pressed but before the new prediction is received from the API\n- Error checking to handle cases when the response is not received or received without a prediction\n- Adjustment of the sliders to a specific total weight of concrete\n- Recording the recent formulations and prediction results in a table for the user\n\n## Summary\n\nA simple app has been built for a user to interface with the Concrete API.  The slider bars make it relatively easy to explore the effect of different ingredients and age on the concrete strength compared to manually editing each value in an R script.  Hopefully, I will have time to further develop the app with a nicer, user interface and improved functionality in a future post.\n\n:::{.callout-tip collapse=\"true\"}\n## Expand for Session Info\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n```\n─ Session info ───────────────────────────────────────────────────────────────\n setting  value\n version  R version 4.2.0 (2022-04-22 ucrt)\n os       Windows 10 x64 (build 19045)\n system   x86_64, mingw32\n ui       RTerm\n language (EN)\n collate  English_United States.utf8\n ctype    English_United States.utf8\n tz       America/Chicago\n date     2022-12-06\n pandoc   2.19.2 @ C:/Program Files/RStudio/bin/quarto/bin/tools/ (via rmarkdown)\n quarto   1.1.189 @ C:\\\\PROGRA~1\\\\RStudio\\\\bin\\\\quarto\\\\bin\\\\quarto.exe\n\n─ Packages ───────────────────────────────────────────────────────────────────\n ! package     * version date (UTC) lib source\n P sessioninfo * 1.2.2   2021-12-06 [?] CRAN (R 4.2.1)\n\n [1] C:/Users/David Zoller/AppData/Local/Temp/RtmpsraoOb/renv-library-102069bf25f5\n [2] C:/Users/David Zoller/Documents/datadavidz.github.io/renv/library/R-4.2/x86_64-w64-mingw32\n [3] C:/Users/David Zoller/AppData/Local/Temp/RtmpsraoOb/renv-system-library\n\n P ── Loaded and on-disk path mismatch.\n\n──────────────────────────────────────────────────────────────────────────────\n```\n:::\n:::\n\n:::\n\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}