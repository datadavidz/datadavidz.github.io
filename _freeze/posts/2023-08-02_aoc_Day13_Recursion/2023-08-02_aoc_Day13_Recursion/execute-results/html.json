{
  "hash": "e5bb2a54ce39cb6cee89f3643c15f58f",
  "result": {
    "markdown": "---\ntitle: \"Advent of Code Day 13: Recursion\"\ndate: 2023-08-02\n---\n\n::: {.cell}\n\n:::\n\n\nCreating a recursive function to compare nested lists.\n\n## Introduction\n\nThis post explains my solution to the [Advent of Code](http://adventofcode.com/) problem from Day 13.  The task is to sort packets from a distress signal that have been decoded out of order.  The packets are provided in pairs and whether they are in the correct order.  The packets resemble a nested list format as shown in the examples below.\n\n```\n[1,1,3,1,1]\n[1,1,5,1,1]\n\n[[1],[2,3,4]]\n[[1],4]\n\n[9]\n[[8,7,6]]\n\n[[4,4],4,4]\n[[4,4],4,4,4]\n\n[7,7,7,7]\n[7,7,7]\n\n[]\n[3]\n\n[[[]]]\n[[]]\n\n[1,[2,[3,[4,[5,6,7]]]],8,9]\n[1,[2,[3,[4,[5,6,0]]]],8,9]\n```\n\n## Loading the input file\n\nThe data is read into strings using ```read_lines``` from the ```readr``` package which has the handy option to ignore the blank rows.  In addition, any white space before or after the packet is removed using ```str_trim```.\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(readr)\nlibrary(stringr)\n\nfilepath <- here::here(\"./posts/data/aoc/day13_input.txt\")\n\npackets <- read_lines(filepath, skip_empty_rows = TRUE)\npackets <- str_trim(packets)\n```\n:::\n\n\nIn Python, the packet string can be directly evaluated to a list however, in R, the packet string needs to be modified first.  In R, a list is declared using the ```list``` function.  For this problem, a ```packet_to_list``` function was created to substitute all left brackets with ```list(``` and all right brackets with ```)```.  The modified string was then parsed and evaluated to create a nested list for each packet.\n\n::: {.cell}\n\n```{.r .cell-code}\npacket_to_list <- function(packet1) {\n  temp <- gsub(\"\\\\[\", \"list\\\\(\", packet1)\n  temp <- gsub(\"\\\\]\", \"\\\\)\", temp)\n  return(eval(parse(text = temp)))\n}\n```\n:::\n\n\n## Part One: Ordering of the Packets\n\nThe order of each pair of packets needs to assessed as to whether it is correct or not.  Multiple rules are provided to determine whether the order is correct.  The contents of the lists in each packet are compared element by element.  If both elements are integers, the integer on the left (from first packet) should be less than the integer on the right (from second packet).  If one element is an integer and one is a list, the integer is converted to a list with the integer as the only list element.  If the left list runs out of items before the right list, the packets are in the correct order.  The first element shown to be in the correct or incorrect order determines whether the order for the entire packet is correct.  If a decision cannot be made on the elements, the next elements are compared.\n\nSince the number of nested lists within each packet is not the same, a recursive function is useful to handle these comparisons.  A function called ```packet_compare``` has been developed below to apply the ordering rules.  If the integer for the left (first) packet is less than the integer in right (second) packet, the function returns a negative value.  So, negative value means correct order and positive value means an incorrect order.  If all the integers are the same, the length of the left packet minus the length of the right packet is returned.  In this case, a negative value is also the correct order.\n\n::: {.cell}\n\n```{.r .cell-code}\npacket_compare <- function(packet1, packet2) {\n  \n  if (class(packet1) == \"numeric\") {\n    if(class(packet2) == \"numeric\") {\n      return(packet1 - packet2)\n    } else {\n      return(packet_compare(list(packet1), packet2))\n    }\n  } else {\n    if (class(packet2) == \"numeric\") {\n      return(packet_compare(packet1, list(packet2)))\n    }\n  }\n  #handle cases where packet1 is zero length\n  if (length(packet1) == 0 & length(packet2) > 0) return(-1)\n  if (length(packet1) == 0 & length(packet2) == 0) return(0)\n\n  for (i in 1:length(packet1)) {\n    if (length(packet2) >= i) {\n      v <- packet_compare(packet1[[i]], packet2[[i]])\n      if (v != 0) {\n        return(v)\n      }\n    }\n  }\n  return(length(packet1) - length(packet2))\n}\n```\n:::\n\n\nThe solution to Part One is found by comparing each pair of packets, adding the indices for the packets in the correct order and reporting the total.  In this case, we iterate by 2 and adjust the indices accordingly since the first and second packet correspond to an index of 1.\n\n::: {.cell}\n\n```{.r .cell-code}\nresult <- 0\n\nfor (i in seq(1, length(packets), 2)) {\n  test <- packet_compare(packet_to_list(packets[i]), packet_to_list(packets[i+1]))\n  if (test < 0) {\n    result <- result + (i+1)/2\n  }\n}\n\nprint(result)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 5366\n```\n:::\n:::\n\n\n## Part Two: Finding indices for [[2]] and [[6]]\n\nThe problem in Part Two is presented a bit misleadingly.  We are asked to order all of the packets in the input dataset while also adding the packets [[2]] and [[6]].  We are asked to place all of the packets in order and report the indices for [[2]] and [[6]].  The misleading part is that you really don't need to order all of the packets to determine the solution.  You simply need to first compare each packet to [[2]] and if it is lower order then the index for [[2]] and [[6]] both are incremented by 1.  If the packet is higher order than [[2]], a second comparison is made to [[6]] and if it is lower then the index for [[6]] is incremented by 1 otherwise neither index is incremented.  The same ```packet_compare``` function from Part One is used here.\n\n::: {.cell}\n\n```{.r .cell-code}\nind2 <- 1\nind6 <- 2\n\nfor(i in 1:length(packets)) {\n  test <- packet_compare(packet_to_list(packets[i]), list(list(2)))\n  if (test < 0) {\n    ind2 <- ind2 + 1\n    ind6 <- ind6 + 1\n  } else {\n    test2 <- packet_compare(packet_to_list(packets[i]), list(list(6)))\n    if (test2 < 0) {\n      ind6 <- ind6 + 1\n    }\n  }\n}\n\nind2*ind6\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 23391\n```\n:::\n:::\n\n\nThe solution to Part Two is the product of the indices for [[2]] and [[6]] after checking all of the packets.\n\n## Summary\n\nThe Day 13 problem was an excellent use case for a recursive function.  The recursive function really simplified the comparisons of the packets without determining the number of nested lists in each packet upfront.  I imagine this function also was quite a bit faster than pre-checking the number of nested lists in each packet and iterating through each one.\n\n:::{.callout-tip collapse=\"true\"}\n## Expand for Session Info\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n```\n─ Session info ───────────────────────────────────────────────────────────────\n setting  value\n version  R version 4.2.2 (2022-10-31 ucrt)\n os       Windows 10 x64 (build 19045)\n system   x86_64, mingw32\n ui       RTerm\n language (EN)\n collate  English_United States.utf8\n ctype    English_United States.utf8\n tz       America/Chicago\n date     2023-08-07\n pandoc   3.1.1 @ C:/Program Files/RStudio/resources/app/bin/quarto/bin/tools/ (via rmarkdown)\n quarto   1.3.353 @ C:\\\\PROGRA~1\\\\RStudio\\\\RESOUR~1\\\\app\\\\bin\\\\quarto\\\\bin\\\\quarto.exe\n\n─ Packages ───────────────────────────────────────────────────────────────────\n ! package     * version date (UTC) lib source\n P readr       * 2.1.4   2023-02-10 [?] CRAN (R 4.2.3)\n P sessioninfo * 1.2.2   2021-12-06 [?] CRAN (R 4.2.1)\n P stringr     * 1.5.0   2022-12-02 [?] CRAN (R 4.2.2)\n\n [1] C:/Users/David Zoller/AppData/Local/Temp/Rtmp4Qh6kX/renv-use-libpath-3ff07a925278\n [2] C:/Users/David Zoller/Documents/datadavidz.github.io/renv/library/R-4.2/x86_64-w64-mingw32\n [3] C:/Users/David Zoller/AppData/Local/R/cache/R/renv/sandbox/R-4.2/x86_64-w64-mingw32/30182023\n\n P ── Loaded and on-disk path mismatch.\n\n──────────────────────────────────────────────────────────────────────────────\n```\n:::\n:::\n\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}