{
  "hash": "23b59430ddadedd265f26a5fa8e8af1f",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Advent of Code Day 19: Depth-First Search\"\ndate: 2024-08-13\nexecute: \n  cache: true\n---\n\n::: {.cell}\n\n:::\n\n\n\nDetermine the optimal blueprint for building robots using a depth-first search algorithm\n\n## Introduction\n\nThis post explains my solution to the [Advent of Code](http://adventofcode.com/) problem from Day 19.  The goal is to collect geodes using geode cracking robots.  To build a geode cracking robot, you need to have obsidian which requires obsidian collecting robots.  In order to build the obsidian collecting robot, you will need clay which requires clay collecting robots.  Building any of the robots also requires ore which is collected using ore robots with big drills.  You have multiple blueprints with different amounts of raw materials required for building the robots.  You need to find which blueprint maximizes the number of geodes collected.\n\nBlueprint examples:\n```\nBlueprint 1:\n  Each ore robot costs 4 ore.\n  Each clay robot costs 2 ore.\n  Each obsidian robot costs 3 ore and 14 clay.\n  Each geode robot costs 2 ore and 7 obsidian.\n\nBlueprint 2:\n  Each ore robot costs 2 ore.\n  Each clay robot costs 3 ore.\n  Each obsidian robot costs 3 ore and 8 clay.\n  Each geode robot costs 3 ore and 12 obsidian.\n```\n\n## Loading the input file\n\nEach blueprint is captured in a single line in the input file with each instruction separated by a space.  The ```read_lines``` function from the ```readr``` package is used to read the input file.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(readr)\nlibrary(stringr)\nlibrary(purrr)\nlibrary(tidyverse)\n\nfilepath <- here::here(\"./posts/data/aoc/day19_input.txt\")\n#filepath <- here::here(\"./posts/data/aoc/day19_test.txt\")\n\nrobots <- read_lines(filepath, skip_empty_rows = TRUE)\n```\n:::\n\n\n\n## Data Cleaning\n\nEach blueprint (line) needs to be parsed.  The first step splits the string at the colon to separate the blueprint number from the rest of the blueprint instructions.  The next step is to split each of the instructions using the period. The third step is to extract the all number followed by a word in each instruction.  For example, \"Each obsidian robot costs 3 ore and 8 clay\" is extracted into \"3 ore\" and \"8 clay\".  The last step is to replace the resource type by a number specific to each type.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#split blueprint number from instructions\ntemp <- str_split(robots, \": \")\n#split each instruction step\nrobot_types <- map(temp, \\(x) unlist(str_split(x[2], \"\\\\. \")))\n#extract the resource type and amount\nbp <- map(robot_types, \\(y) map(y, \\(x) unlist(str_extract_all(x, \"\\\\d+ \\\\w+\"))))\nbp <- map(bp, \\(y) map(y,  \\(x) str_replace_all(x, c(ore = \"1\", clay = \"2\", obsidian = \"3\"))))\n```\n:::\n\n\n\n## Depth-First Search\n\nA depth-first search is performed to find the strategy to crack the most geodes from a blueprint.  A recursive function is created to perform the depth-first search.  Several optimizations are implemented to improve the speed of the search.  A cache is used to store the results when a prior state which has already been calculated is available.  A second optimization is to limit the number of robots of a given type by the maximum spend in a turn.  This maxspend is calculated in a separate function.  The last optimization is to limit the recorded amount to the maximum that can be used in the remaining time.  This last optimization helps with the caching since the result will be the same regardless of the amount of unusable resources available.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndfs <- function(bp, maxspend, cache, time, bots, amt) {\n  #return number of geodes if time has expired\n  if (time == 0) return(amt[4])\n  \n  #if previously seen then return value\n  key <- paste(c(time, bots, amt), collapse = \" \")\n  cache_index <- cache[[key]]\n  if (!is.null(cache_index)) return(cache_index)\n  \n  maxval <- amt[4] + bots[4] * time\n  \n  for (blue in bp) {\n    for (btype in 1:length(blue)) {\n      #optimization to not exceed maxspend for a given bot type\n      if ((btype !=  4) & (bots[btype] >= maxspend[btype])) next\n\n      wait <- 0\n      breakFlag <- FALSE\n    \n      for (i in 1:length(blue[[btype]])) {\n        temp <- as.numeric(unlist(str_split(blue[[btype]][i], \" \")))\n        ramt <- temp[1]\n        rtype <- temp[2]\n      \n        #avoid divide by zero error\n        if (bots[rtype] == 0){\n          breakFlag <- TRUE\n          break\n        }\n        wait <- max(wait, ceiling((ramt - amt[rtype]) / bots[rtype]))\n        #print(c(\"wait=\", wait, breakFlag))\n      }\n      if (!breakFlag) {\n        remtime <- time - wait - 1\n        if (remtime <= 0) next\n        \n        bots_tmp <- bots\n        amt_tmp <- amt + bots * (wait + 1)\n        \n        for (i in 1:length(blue[[btype]])) {\n          temp <- as.numeric(unlist(str_split(blue[[btype]][i], \" \")))\n          ramt <- temp[1]\n          rtype <- temp[2]\n          amt_tmp[rtype] <- amt_tmp[rtype] - ramt \n        }\n        bots_tmp[btype] <- bots_tmp[btype] + 1\n        #third optimization to limit amount to maximum which can be used in the remaining time\n        for (j in (1:3)) {\n          amt_tmp[j] <- min(amt_tmp[j], maxspend[j] * remtime)\n        }\n        #print(paste(\"remtime= \", remtime, \"bots_tmp= \", paste(bots_tmp, collapse = \" \"), \"amt_tmp=\", paste(amt_tmp, collapse = \" \")))\n        maxval <- max(maxval, dfs(bp, maxspend, cache, remtime, bots_tmp, amt_tmp))\n      }\n    }\n  }\n  cache[[key]] <<- maxval\n  return(maxval)\n}\n```\n:::\n\n\n\nThe function to find the maximum spend takes the blueprint instructions for a given blueprint and calculates the maximum resource amount which can be utilized in a single turn.  This result is then used for two search optimizations as described above.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfind_maxspend <- function(bp_lst, bp_num){\n  maxspend <- c(0, 0, 0)\n  for (blue in bp_lst[[bp_num]]) {\n    for (i in 1:length(blue)) {\n      temp <- as.numeric(unlist(str_split(blue[[i]], \" \")))\n      if (temp[2] == 1) {\n        maxspend[1] <- max(maxspend[1], temp[1])\n      } else if (temp[2] == 2) {\n        maxspend[2] <- max(maxspend[2], temp[1])\n      } else if (temp[2] == 3) {\n        maxspend[3] <- max(maxspend[3], temp[1])\n      } else {\n        maxspend <- maxspend\n      }\n    }\n  }\n  return(maxspend)\n}\n```\n:::\n\n\n\n## Part 1 Solution\n\nIn Part 1, you have 24 minutes to crack the most number of geodes from each blueprint.  There are a total of 30 blueprints in the input file.  An R environment is set up as a hash table to serve as the cache for already calculated states.  The robot is initialized with one ore robot and no available resources.  The total value for the puzzle solution is calculated as summation of the blueprint number multiplied by the number of geodes cracked.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntotal <- 0\n\nfor (i in 1:length(bp)) {\n  #print(paste(i, Sys.time()))\n  cache <- new.env(hash = TRUE)\n  total_time <- 24\n  bots <- c(1, 0, 0, 0)\n  amt <- c(0, 0, 0, 0)\n  maxspend <- find_maxspend(bp, i)\n  v <- dfs(bp[i], maxspend, cache, total_time, bots, amt)\n  total <- total + (i * v)\n}\n\ntotal\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 1199\n```\n\n\n:::\n:::\n\n\n\nThe puzzle solution was calculated to be 1199.\n\n## Part 2 Solution\n\nIn Part 2, the time available to crack the geodes has been increase to 32 minutes however only the first 3 blueprints are now available.  The puzzle solution is calculated differently as well for Part 2.  In this case, we just multiply the number of cracked geodes for each of the three blueprints together to get the total value.  Increasing the total time available significantly increases the amount of time required to solve each blueprint.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntotal <- 1\n\nfor (i in 1:3) {\n  #print(paste(i, Sys.time()))\n  cache <- new.env(hash = TRUE)\n  total_time <- 32\n  bots <- c(1, 0, 0, 0)\n  amt <- c(0, 0, 0, 0)\n  maxspend <- find_maxspend(bp, i)\n  v <- dfs(bp[i], maxspend, cache, total_time, bots, amt)\n  total <- total * v\n  print(Sys.time())\n}\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"2025-01-29 10:33:35 CST\"\n[1] \"2025-01-29 10:42:04 CST\"\n[1] \"2025-01-29 10:45:21 CST\"\n```\n\n\n:::\n\n```{.r .cell-code}\ntotal\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 3510\n```\n\n\n:::\n:::\n\n\n\nThe puzzle solution for Part 2 was calculated as 3510.\n\n## Summary\nA depth-first search algorithm was implemented to reach the optimum solution for each set of blueprint instructions.  A hash environment was effectively used as a cache to reduce the search time.  A couple of additional time optimizations were implemented based on this specific problem in order to not calculate scenarios which were clearly not going to result in the best solution.\n\n:::{.callout-tip collapse=\"true\"}\n## Expand for Session Info\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n```\n─ Session info ───────────────────────────────────────────────────────────────\n setting  value\n version  R version 4.4.2 (2024-10-31 ucrt)\n os       Windows 10 x64 (build 19045)\n system   x86_64, mingw32\n ui       RTerm\n language (EN)\n collate  English_United States.utf8\n ctype    English_United States.utf8\n tz       America/Chicago\n date     2025-01-29\n pandoc   3.2 @ C:/Program Files/RStudio/resources/app/bin/quarto/bin/tools/ (via rmarkdown)\n quarto   1.5.57 @ C:\\\\PROGRA~1\\\\RStudio\\\\RESOUR~1\\\\app\\\\bin\\\\quarto\\\\bin\\\\quarto.exe\n\n─ Packages ───────────────────────────────────────────────────────────────────\n package     * version date (UTC) lib source\n dplyr       * 1.1.4   2023-11-17 [1] CRAN (R 4.4.2)\n forcats     * 1.0.0   2023-01-29 [1] CRAN (R 4.4.2)\n ggplot2     * 3.5.1   2024-04-23 [1] CRAN (R 4.4.2)\n lubridate   * 1.9.4   2024-12-08 [1] CRAN (R 4.4.2)\n purrr       * 1.0.2   2023-08-10 [1] CRAN (R 4.4.2)\n readr       * 2.1.5   2024-01-10 [1] CRAN (R 4.4.2)\n sessioninfo * 1.2.2   2021-12-06 [1] CRAN (R 4.4.2)\n stringr     * 1.5.1   2023-11-14 [1] CRAN (R 4.4.2)\n tibble      * 3.2.1   2023-03-20 [1] CRAN (R 4.4.2)\n tidyr       * 1.3.1   2024-01-24 [1] CRAN (R 4.4.2)\n tidyverse   * 2.0.0   2023-02-22 [1] CRAN (R 4.4.2)\n\n [1] C:/Users/David Zoller/AppData/Local/R/win-library/4.4\n [2] C:/Program Files/R/R-4.4.2/library\n\n──────────────────────────────────────────────────────────────────────────────\n```\n\n\n:::\n:::\n\n\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}