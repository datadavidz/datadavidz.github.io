{
  "hash": "a02936eefa6d44aae33f18220e284f73",
  "result": {
    "markdown": "---\ntitle: \"Advent of Code Day 11: Monkey Business\"\ndate: 2023-07-25\n---\n\n::: {.cell}\n\n:::\n\n\nMonkeys have taken my items and we need to determine how much monkey business is going on.\n\n## Introduction\n\nThis post explains my solution to the [Advent of Code](http://adventofcode.com/) problem from Day 11.  Apparently, monkeys have taken my items and are passing them around between the monkeys.  The items are labeled with a value for how worried I am about each items.  This \"worry level\" changes as a monkey inspects the item by an Operation.  The monkey then uses a Test to decide what to do with the item based on the new worry level.  If the result of the Test is true, the monkey throws it one monkey and, if the Test result is false, the monkey throws it to a different monkey.  A round of \"monkey business\" requires cycling through each monkey and each item.  We need to find the status of the items after a specific number of rounds.\n\n## Loading the input file\n\nThe input file is in a custom format and certainly not a tidy format.  I used the ```read_lines``` function from the ```readr``` package to read the lines into an array of strings and taking advantage of the option to not read in the blank lines.  The ```str_trim``` function from the ```stringr``` package is used to trim the leading and trailing whitespace from the character strings.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(readr)\nlibrary(stringr)\n\n\nfilepath <- here::here(\"./posts/data/aoc/day11_input.txt\")\n\ncommands <- read_lines(filepath, skip_empty_rows = TRUE)\ncommands <- str_trim(commands)\ncommands\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] \"Monkey 0:\"                                     \n [2] \"Starting items: 77, 69, 76, 77, 50, 58\"        \n [3] \"Operation: new = old * 11\"                     \n [4] \"Test: divisible by 5\"                          \n [5] \"If true: throw to monkey 1\"                    \n [6] \"If false: throw to monkey 5\"                   \n [7] \"Monkey 1:\"                                     \n [8] \"Starting items: 75, 70, 82, 83, 96, 64, 62\"    \n [9] \"Operation: new = old + 8\"                      \n[10] \"Test: divisible by 17\"                         \n[11] \"If true: throw to monkey 5\"                    \n[12] \"If false: throw to monkey 6\"                   \n[13] \"Monkey 2:\"                                     \n[14] \"Starting items: 53\"                            \n[15] \"Operation: new = old * 3\"                      \n[16] \"Test: divisible by 2\"                          \n[17] \"If true: throw to monkey 0\"                    \n[18] \"If false: throw to monkey 7\"                   \n[19] \"Monkey 3:\"                                     \n[20] \"Starting items: 85, 64, 93, 64, 99\"            \n[21] \"Operation: new = old + 4\"                      \n[22] \"Test: divisible by 7\"                          \n[23] \"If true: throw to monkey 7\"                    \n[24] \"If false: throw to monkey 2\"                   \n[25] \"Monkey 4:\"                                     \n[26] \"Starting items: 61, 92, 71\"                    \n[27] \"Operation: new = old * old\"                    \n[28] \"Test: divisible by 3\"                          \n[29] \"If true: throw to monkey 2\"                    \n[30] \"If false: throw to monkey 3\"                   \n[31] \"Monkey 5:\"                                     \n[32] \"Starting items: 79, 73, 50, 90\"                \n[33] \"Operation: new = old + 2\"                      \n[34] \"Test: divisible by 11\"                         \n[35] \"If true: throw to monkey 4\"                    \n[36] \"If false: throw to monkey 6\"                   \n[37] \"Monkey 6:\"                                     \n[38] \"Starting items: 50, 89\"                        \n[39] \"Operation: new = old + 3\"                      \n[40] \"Test: divisible by 13\"                         \n[41] \"If true: throw to monkey 4\"                    \n[42] \"If false: throw to monkey 3\"                   \n[43] \"Monkey 7:\"                                     \n[44] \"Starting items: 83, 56, 64, 58, 93, 91, 56, 65\"\n[45] \"Operation: new = old + 5\"                      \n[46] \"Test: divisible by 19\"                         \n[47] \"If true: throw to monkey 1\"                    \n[48] \"If false: throw to monkey 0\"                   \n```\n:::\n:::\n\nI decided to parse the information needed to determine the monkey business into a list called ```monkey_ops``` which contains a sub-list for each monkey.  The needed information was the monkey's name, items, operation, test and monkey to throw to if test is true and if test is false.  The operation is divided into the operator (e.g. \"+\", \"\\*\") and operator value.  One of the operations is captured as \"old \\* old\" which was substituted with the \"\\^\" operator and an operator value of 2.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncurrent_monkey <- 0\nmonkey_ops <- list()\n\n#temp <- unlist(str_split(commands[4], \":\"))\n\nfor (i in 1:length(commands)) {\n\n  temp <- unlist(str_split(commands[i], \":\"))\n  \n  if (str_detect(temp[1],\"^Monkey\")) {\n    current_monkey <- as.numeric(unlist(str_split(temp[1], \" \"))[2]) + 1\n    monkey_ops[[current_monkey]] <- list(name = current_monkey-1, inspections = 0)\n  }\n  \n  if (str_detect(temp[1], \"^Starting\")) {\n    current_items <- as.numeric(unlist(str_split(temp[2], \", \")))\n    monkey_ops[[current_monkey]] <- c(monkey_ops[[current_monkey]], items = list(current_items))\n  }\n  \n  if (str_detect(temp[1], \"^Operation\")) {\n    \n    if (unlist(str_split(temp[2], \" \"))[6] == \"old\") {\n      current_opaction <- \"^\"\n      current_opvalue <- 2\n    } else {\n      current_opaction <- unlist(str_split(temp[2], \" \"))[5]\n      current_opvalue <- as.numeric(unlist(str_split(temp[2], \" \"))[6])\n    }\n    \n    monkey_ops[[current_monkey]] <- c(monkey_ops[[current_monkey]], opaction = current_opaction, opvalue = current_opvalue)\n  }\n  \n  if (str_detect(temp[1],\"^Test\")) {\n    current_test <- as.numeric(unlist(str_split(temp[2], \" \"))[4])\n    monkey_ops[[current_monkey]] <- c(monkey_ops[[current_monkey]], test = current_test)\n  }\n  \n  if (str_detect(temp[1], \"^If true\")) {\n    current_iftrue <- as.numeric(unlist(str_split(temp[2], \" \"))[5])\n    monkey_ops[[current_monkey]] <- c(monkey_ops[[current_monkey]], iftrue = current_iftrue)\n  }\n  \n  if (str_detect(temp[1], \"^If false\")) {\n    current_iffalse <- as.numeric(unlist(str_split(temp[2], \" \"))[5])\n    monkey_ops[[current_monkey]] <- c(monkey_ops[[current_monkey]], iffalse = current_iffalse)\n  }\n}\n\nmonkey_ops[[1]]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n$name\n[1] 0\n\n$inspections\n[1] 0\n\n$items\n[1] 77 69 76 77 50 58\n\n$opaction\n[1] \"*\"\n\n$opvalue\n[1] 11\n\n$test\n[1] 5\n\n$iftrue\n[1] 1\n\n$iffalse\n[1] 5\n```\n:::\n:::\n\n\n## Part One: 20 Rounds with Bounded Worry Level\n\nIn the first part, monkey business is tracked for 20 rounds.  After each inspection, the worry level is divided by 3 and rounded down to the nearest integer.  This division by three and only going 20 rounds keeps the worry level from becoming extremely large numbers.  First, we create a function to calculate the worry level.\n\n::: {.cell}\n\n```{.r .cell-code}\ncalc_worry <- function(worry_init, operation, value) {\n  if (operation == \"^\") worry <- worry_init^value\n  else if (operation == \"+\") worry <- worry_init + value\n  else if (operation == \"*\") worry <- worry_init * value\n\n  return(floor(worry / 3))\n}\n```\n:::\n\n\nNext, we create a function to perform an entire round of monkey business.  The number of item inspections for each monkey is also needed to answer the Part One question.  The Test asks if the worry level is divisible by a certain number which is accomplished by using the modulo operator.  If the worry level modulo Test number is 0, the test is true otherwise it is false.\n\n::: {.cell}\n\n```{.r .cell-code}\nperform_round <- function(monkey_ops) {\n  for (i in 1:length(monkey_ops)) {\n  \n    if (length(monkey_ops[[i]]$items) > 0) {\n  \n      for (j in 1:length(monkey_ops[[i]]$items)) {\n        \n        worry_level <- calc_worry(monkey_ops[[i]]$items[1], monkey_ops[[i]]$opaction, monkey_ops[[i]]$opvalue)\n        monkey_ops[[i]]$inspections <- monkey_ops[[i]]$inspections + 1\n\n        if ((worry_level %% monkey_ops[[i]]$test) == 0) {\n          monkey_ops[[monkey_ops[[i]]$iftrue+1]]$items <- c(monkey_ops[[monkey_ops[[i]]$iftrue+1]]$items, worry_level)\n        } else {\n          monkey_ops[[monkey_ops[[i]]$iffalse+1]]$items <- c(monkey_ops[[monkey_ops[[i]]$iffalse+1]]$items, worry_level)\n        }\n        \n        monkey_ops[[i]]$items <- monkey_ops[[i]]$items[-1]\n      }\n    }\n  }\n  return(monkey_ops)\n}\n```\n:::\n\n\nNow, we perform the 20 rounds.\n\n::: {.cell}\n\n```{.r .cell-code}\nmonkey_round <- monkey_ops\n\nfor (k in 1:20) {\n  monkey_round <- perform_round(monkey_round)\n}\n```\n:::\n\n\nAnother function is created to calculate the monkey business which is defined as the number of inspections by the monkeys with the top 2 highest number of inspections and multiplying those 2 numbers together.\n\n::: {.cell}\n\n```{.r .cell-code}\ncalc_monkey_business <- function(monkey_final) {\n  first <- 0\n  second <- 0\n  \n  for (i in 1:length(monkey_final)) {\n    if (monkey_final[[i]]$inspections > first) {\n      second <- first\n      first <- monkey_final[[i]]$inspections\n    } else if (monkey_final[[i]]$inspections > second) {\n      second <- monkey_final[[i]]$inspections\n    } else {\n    #do nothing  \n    }\n  }\n  return(first * second)\n}\n```\n:::\n\n\nSolution to Part One\n\n::: {.cell}\n\n```{.r .cell-code}\ncalc_monkey_business(monkey_round)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 57838\n```\n:::\n:::\n\n\n## Part Two: 10,000 Rounds and Unbounded Worry Level\n\nThe changes in Part Two are that the worry level is no longer divided by 3 after each inspection.  In addition, we know want to calculate the monkey business after 10,000 rounds and not just 20 rounds.  Considering that some of the operations involve squaring the worry level after each inspection, it becomes clear that the worry level values will quickly exceed the numbers which can be reasonably handled using normal computer options.  The problem statement rather vaguely tells us we need to find another way to keep the worry levels from exponentially growing over the 10,000 rounds.  We create a new function to calculate worry level without the divisor.\n\n::: {.cell}\n\n```{.r .cell-code}\ncalc_worry2 <- function(worry_init, operation, value) {\n  if (operation == \"^\") worry <- worry_init^value\n  else if (operation == \"+\") worry <- worry_init + value\n  else if (operation == \"*\") worry <- worry_init * value\n\n  return(worry)\n}\n```\n:::\n\n\nSo how to do this?  The key is to realize that the feature that needs to be maintained is whether the worry level can be divided by any of the test operation values.  This can be achieved by taking the least common multiple of those values.  In this case, the values: 5, 17, 2, 7, 3, 11, 13, 19 are all prime numbers.  The least common multiple in this case is obtained by multiplying all 8 values together.\n\n::: {.cell}\n\n```{.r .cell-code}\nsupermodulo <- 1\n\nfor (k in 1:length(monkey_ops)) {\n  supermodulo <- supermodulo * monkey_ops[[k]]$test  \n}\n\nsupermodulo\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 9699690\n```\n:::\n:::\n\nA minor change to the ```perform_round``` function is used to apply the \"supermodulo\" (i.e. least common multiple) to the worry level to keep it from becoming exponentially large.\n\n::: {.cell}\n\n```{.r .cell-code}\nperform_round2 <- function(monkey_ops, supermodulo) {\n  for (i in 1:length(monkey_ops)) {\n  \n    if (length(monkey_ops[[i]]$items) > 0) {\n  \n      for (j in 1:length(monkey_ops[[i]]$items)) {\n        \n        worry_level <- calc_worry2(monkey_ops[[i]]$items[1], monkey_ops[[i]]$opaction, monkey_ops[[i]]$opvalue)\n        worry_level <- worry_level %% supermodulo\n        monkey_ops[[i]]$inspections <- monkey_ops[[i]]$inspections + 1\n        \n        if ((worry_level %% monkey_ops[[i]]$test) == 0) {\n          monkey_ops[[monkey_ops[[i]]$iftrue+1]]$items <- c(monkey_ops[[monkey_ops[[i]]$iftrue+1]]$items, worry_level)\n        } else {\n          monkey_ops[[monkey_ops[[i]]$iffalse+1]]$items <- c(monkey_ops[[monkey_ops[[i]]$iffalse+1]]$items, worry_level)\n        }\n        \n        monkey_ops[[i]]$items <- monkey_ops[[i]]$items[-1]\n      }\n    }\n  }\n  return(monkey_ops)\n}\n```\n:::\n\n\nNow, we perform the monkey business for 10,000 rounds.\n\n::: {.cell}\n\n```{.r .cell-code}\nmonkey_round <- monkey_ops\n\nfor (k in 1:10000) {\n  monkey_round <- perform_round2(monkey_round, supermodulo)\n}\n```\n:::\n\n\nThen, we calculate the monkey business using the same function as in Part One.\n\n::: {.cell}\n\n```{.r .cell-code}\ncalc_monkey_business(monkey_round)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 15050382231\n```\n:::\n:::\n\n## Summary\nThe difficult part of the Day 11 problem is to figure out how to keep the worry level from exponentially growing over the 10,000 rounds of Part Two which cannot be handled by normal computation.  Once the trick of using the least common multiple (\"supermodulo\") to contain the worry levels without affecting the logic of the monkey inspections is identified, the solution can be found in a straightforward manner.  Using the list to store the monkey information worked well although I was curious about making a monkey class instead.  Perhaps, we will save this for a future post.\n\n:::{.callout-tip collapse=\"true\"}\n## Expand for Session Info\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n```\n─ Session info ───────────────────────────────────────────────────────────────\n setting  value\n version  R version 4.2.2 (2022-10-31 ucrt)\n os       Windows 10 x64 (build 19045)\n system   x86_64, mingw32\n ui       RTerm\n language (EN)\n collate  English_United States.utf8\n ctype    English_United States.utf8\n tz       America/Chicago\n date     2023-07-25\n pandoc   3.1.1 @ C:/Program Files/RStudio/resources/app/bin/quarto/bin/tools/ (via rmarkdown)\n quarto   1.3.353 @ C:\\\\PROGRA~1\\\\RStudio\\\\RESOUR~1\\\\app\\\\bin\\\\quarto\\\\bin\\\\quarto.exe\n\n─ Packages ───────────────────────────────────────────────────────────────────\n ! package     * version date (UTC) lib source\n P readr       * 2.1.4   2023-02-10 [?] CRAN (R 4.2.3)\n P sessioninfo * 1.2.2   2021-12-06 [?] CRAN (R 4.2.1)\n P stringr     * 1.5.0   2022-12-02 [?] CRAN (R 4.2.2)\n\n [1] C:/Users/David Zoller/AppData/Local/Temp/Rtmp6NO10I/renv-use-libpath-2ba45f5253be\n [2] C:/Users/David Zoller/Documents/datadavidz.github.io/renv/library/R-4.2/x86_64-w64-mingw32\n [3] C:/Users/David Zoller/AppData/Local/R/cache/R/renv/sandbox/R-4.2/x86_64-w64-mingw32/30182023\n\n P ── Loaded and on-disk path mismatch.\n\n──────────────────────────────────────────────────────────────────────────────\n```\n:::\n:::\n\n:::\n\n\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}