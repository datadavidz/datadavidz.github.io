{
  "hash": "1455a54688c4f0c557f00aea2479386b",
  "result": {
    "markdown": "---\ntitle: \"Python Setup in RStudio using reticulate\"\ndate: \"22-09-02\"\ncategories: [reticulate]\n---\n\n::: {.cell}\n\n:::\n\n\nMy experience setting up Python using the ```reticulate``` package and the RStudio IDE.\n\nThis post is a summary of my initial exploration to set up Python to operate within RStudio.  I was mostly interested in being able to apply machine learning algorithms from Sci-kit Learn but through the RStudio IDE.  The possibility of switching between R and Python languages within an analysis was also intriguing to me.  I was somewhat surprised that there doesn't seem to be a consensus on how to set up Python with RStudio.  I found many different recommendations as far as how to install Python and how to configure RStudio.  I believe this lack of consensus is due to the feature being rather new and also there are many possible configurations depending on your usage and preferences.\n\nI started with a fresh installation of Python and I chose to use the Miniconda installer for Windows 64-bit.  No problems here except the default installation directory contained my Windows user name which contained a space.  The installer gave a warning and I instead chose to install in folder in root directory called miniconda.  I then updated to the latest version of RStudio (2022.02.2) and installation of the ```reticulate``` package. The ```reticulate``` package is essential for using Python in the RStudio environment.\n\n### Load libraries\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nlibrary(reticulate)\n```\n:::\n\nFrom here, I tried the setup recommended by Tiffany Timbers on her [Github](https://github.com/ttimbers/intro-to-reticulate) and further discussed in an R Ladies Baltimore [video](https://youtu.be/U3ByGh8RmSc).  This setup involved setting a system environment variable in the .Rprofile to specify which Python installation to use: ```Sys.setenv(RETICULATE_PYTHON = \"path_to_miniconda's_python\")```.  While this approach does in fact work, this system setting locks in the Python installation to use and you need to modify the .Rprofile in order to use a different conda python environment.  The setup also mentioned to make configuration changes to Git Bash and RStudio terminal settings that I found were not necessary.  The setup instructions were created in December 2020 so, perhaps, subsequent RStudio versions have made these terminal configurations obsolete.\n\nNext, I found the ```reticulate``` installation recommended by Matt Dancho on the [Business Science](https://www.business-science.io/learn-r/2020/04/20/setup-python-in-r-with-rmarkdown.html) website.  This setup recommended setting up a conda environment using the following command: ```conda create -n py3.8 python=3.8 scikit-learn pandas numpy matplotlib```.  This command creates a new environment \"py3.8\", installs Python 3.8 and installs the latest versions of ```scikit-learn```, ```pandas```, ```numpy``` and ```matplotlib```.\n\n### List the conda environments in RMarkdown\n\n::: {.cell}\n\n```{.r .cell-code}\nconda_list()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n      name                                   python\n1     base                 C:\\\\miniconda/python.exe\n2 my-rdkit C:\\\\miniconda\\\\envs\\\\my-rdkit/python.exe\n3    py3.8    C:\\\\miniconda\\\\envs\\\\py3.8/python.exe\n```\n:::\n:::\n\nYou can then set your conda environment using ```reticulate::use_condaenv```.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nuse_condaenv(\"py3.8\", required = TRUE)\n```\n:::\n\n\nThe conda environment used by reticulate can then be checked.\n\n\n::: {.cell}\n\n```{.r .cell-code}\npy_config()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\npython:         C:/miniconda/envs/py3.8/python.exe\nlibpython:      C:/miniconda/envs/py3.8/python38.dll\npythonhome:     C:/miniconda/envs/py3.8\nversion:        3.8.13 | packaged by conda-forge | (default, Mar 25 2022, 05:59:45) [MSC v.1929 64 bit (AMD64)]\nArchitecture:   64bit\nnumpy:          C:/miniconda/envs/py3.8/Lib/site-packages/numpy\nnumpy_version:  1.22.4\n\nNOTE: Python version was forced by RETICULATE_PYTHON\n```\n:::\n:::\n\n### Test 1: Is Python Working?\n\n::: {.cell}\n\n```{.python .cell-code}\n1 + 1\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n2\n```\n:::\n:::\n\nNote that here we are using a Python code block in Rmarkdown.\n\n### Test 2: Numpy and Pandas\n\n::: {.cell}\n\n```{.python .cell-code}\nimport numpy as np\nimport pandas as pd\n```\n:::\n\n\nUse numpy to create a sequence of numbers in an array\n\n::: {.cell}\n\n```{.python .cell-code}\nnp.arange(1,10)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\narray([1, 2, 3, 4, 5, 6, 7, 8, 9])\n```\n:::\n:::\n\nUse pandas to create a dataframe\n\n::: {.cell}\n\n```{.python .cell-code}\n# Make a sequence in a data frame using dict format\ndf = pd.DataFrame(data = {\"sequence\":np.arange(1,20,.01)})\n\n# Use assign (mutate) equivalent to calculate the np.sin() of the series\ndf = df.assign(value=np.sin(df[\"sequence\"]))\n\ndf\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n      sequence     value\n0         1.00  0.841471\n1         1.01  0.846832\n2         1.02  0.852108\n3         1.03  0.857299\n4         1.04  0.862404\n...        ...       ...\n1895     19.95  0.891409\n1896     19.96  0.895896\n1897     19.97  0.900294\n1898     19.98  0.904602\n1899     19.99  0.908819\n\n[1900 rows x 2 columns]\n```\n:::\n:::\n\n### Test #3: Generate a plot using Matplotlib\n\n::: {.cell}\n\n```{.python .cell-code}\nimport matplotlib as plt\n\ndf.plot(x=\"sequence\", y = \"value\", title = \"Matplotlib\")\n```\n\n::: {.cell-output-display}\n![](2022-09-02_ReticulateSetup_files/figure-html/unnamed-chunk-9-1.png){width=672}\n:::\n:::\n\n### Test #4: Build a model using Sci-kit Learn\n\n::: {.cell}\n\n```{.python .cell-code}\nfrom sklearn.ensemble import RandomForestClassifier\n\nclf = RandomForestClassifier(random_state=0)\n\nX = [[ 1,  2,  3],  # 2 samples, 3 features\n     [11, 12, 13]]\n\ny = [0, 1]  # classes of each sample\n\nclf.fit(X, y)\n```\n\n::: {.cell-output-display}\n```{=html}\n<style>#sk-container-id-1 {color: black;background-color: white;}#sk-container-id-1 pre{padding: 0;}#sk-container-id-1 div.sk-toggleable {background-color: white;}#sk-container-id-1 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-1 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-1 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-1 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-1 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-1 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-1 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-1 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-1 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-1 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-1 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-1 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-1 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-1 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-1 div.sk-item {position: relative;z-index: 1;}#sk-container-id-1 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-1 div.sk-item::before, #sk-container-id-1 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-1 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-1 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-1 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-1 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-1 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-1 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-1 div.sk-label-container {text-align: center;}#sk-container-id-1 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-1 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-1\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>RandomForestClassifier(random_state=0)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-1\" type=\"checkbox\" checked><label for=\"sk-estimator-id-1\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">RandomForestClassifier</label><div class=\"sk-toggleable__content\"><pre>RandomForestClassifier(random_state=0)</pre></div></div></div></div></div>\n```\n:::\n:::\n\n::: {.cell}\n\n```{.python .cell-code}\nclf.predict(X)  # predict classes of the training data\n```\n\n::: {.cell-output .cell-output-stdout}\n```\narray([0, 1])\n```\n:::\n:::\n\n### Tip from Business Science post - 4 Conda Terminal Commands\nAt some point you will need to create, modify, add more packages to your Conda Environment(s). Here are 4 useful commands:\n\n1. Run ```conda env list``` to list the available conda environments\n2. Run ```conda activate <env_name>``` to activate a conda environment\n3. Run ```conda update --all``` to update all python packages in a conda environment.\n4. Run ```conda install <package_name>``` to install a new package\n\n### Summary\nI found the approach recommended in the post by Matt Dancho was more straightforward and I haven't found any downside yet.  I like the flexibilty to change the conda environment for each analysis (Rmarkdown file) rather than adjusting the .Rprofile setting and rebooting R each time for the change to take effect.  I will continue to update this post as I learn more tips and tricks for mixing R and Python code in Rmarkdown using the RStudio IDE.\n\n:::{.callout-tip collapse=\"true\"}\n## Expand for Session Info\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n```\n─ Session info ───────────────────────────────────────────────────────────────\n setting  value\n version  R version 4.2.0 (2022-04-22 ucrt)\n os       Windows 10 x64 (build 19043)\n system   x86_64, mingw32\n ui       RTerm\n language (EN)\n collate  English_United States.utf8\n ctype    English_United States.utf8\n tz       America/Chicago\n date     2022-09-02\n pandoc   2.18 @ C:/Program Files/RStudio/bin/quarto/bin/tools/ (via rmarkdown)\n quarto   1.0.36 @ C:\\\\PROGRA~1\\\\RStudio\\\\bin\\\\quarto\\\\bin\\\\quarto.cmd\n\n─ Packages ───────────────────────────────────────────────────────────────────\n ! package     * version date (UTC) lib source\n P dplyr       * 1.0.10  2022-09-01 [?] CRAN (R 4.2.0)\n P forcats     * 0.5.2   2022-08-19 [?] CRAN (R 4.2.1)\n P ggplot2     * 3.3.6   2022-05-03 [?] CRAN (R 4.2.1)\n P purrr       * 0.3.4   2020-04-17 [?] CRAN (R 4.2.1)\n P readr       * 2.1.2   2022-01-30 [?] CRAN (R 4.2.1)\n P reticulate  * 1.26    2022-08-31 [?] CRAN (R 4.2.1)\n P sessioninfo * 1.2.2   2021-12-06 [?] CRAN (R 4.2.1)\n P stringr     * 1.4.1   2022-08-20 [?] CRAN (R 4.2.1)\n P tibble      * 3.1.8   2022-07-22 [?] CRAN (R 4.2.1)\n P tidyr       * 1.2.0   2022-02-01 [?] CRAN (R 4.2.1)\n P tidyverse   * 1.3.2   2022-07-18 [?] CRAN (R 4.2.1)\n\n [1] C:/Users/David Zoller/AppData/Local/Temp/RtmpcFuVvR/renv-library-c0c22006a3c\n [2] C:/Users/David Zoller/Documents/datadavidz.github.io/renv/library/R-4.2/x86_64-w64-mingw32\n [3] C:/Program Files/R/R-4.2.0/library\n\n P ── Loaded and on-disk path mismatch.\n\n─ Python configuration ───────────────────────────────────────────────────────\n python:         C:/miniconda/envs/py3.8/python.exe\n libpython:      C:/miniconda/envs/py3.8/python38.dll\n pythonhome:     C:/miniconda/envs/py3.8\n version:        3.8.13 | packaged by conda-forge | (default, Mar 25 2022, 05:59:45) [MSC v.1929 64 bit (AMD64)]\n Architecture:   64bit\n numpy:          C:/miniconda/envs/py3.8/Lib/site-packages/numpy\n numpy_version:  1.22.4\n \n NOTE: Python version was forced by RETICULATE_PYTHON\n\n──────────────────────────────────────────────────────────────────────────────\n```\n:::\n:::\n\n:::",
    "supporting": [
      "2022-09-02_ReticulateSetup_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}