{
  "hash": "42d3b27acd6f5463c81fe134a29fa782",
  "result": {
    "markdown": "---\ntitle: \"Advent of Code Day 1: Working with Lists\"\ndate: 2023-01-05\n---\n\n::: {.cell}\n\n:::\n\nAn input file is transformed into a structured list to enable calculations on the dataset.\n\n## Introduction\n\nThis post explains my solution to the [Advent of Code](http://adventofcode.com/) problem from Day 1.  The scenario is that the elves are asked to record the calories for each consumable item they've brought with them.  The list for each elf is separated by a blank line.  So, the list looks something like this:\n\n```\n1000\n2000\n3000\n\n4000\n\n5000\n6000\n\n7000\n8000\n9000\n\n10000\n```\n\nThe first objective is to determine the most calories carried by a single elf.  The second objective is to determine the total calories available from the top 3 elves carrying the most calories.  There are a number of approaches to answer these questions, for example, by iterating through the data and storing just the highest (or 3 highest) totals in the process.  Thinking about real world problems, I was interested in storing the totals for each elf so you could do additional analyses such as which elves are carrying the most calories, what is the distribution of calories amongst the elves and so on.  To retain the structure of the original data set but make it more amenable for further analysis, my thought was to read the data into a list where each list item contained a sub-list of the calories for each elf.\n\n## Loading and analyzing input file\n\nThe input file has the structure as described in the introduction.  The ```read_delim``` function from the ```readr``` package is used to load the file into a tibble (dataframe).\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n\nfilepath <- here::here(\"./posts/data/aoc/day01_input.txt\")\n\ndata <- read_delim(filepath, delim = \"\\n\", col_names = c(\"calories\"), skip_empty_rows = FALSE)\n```\n:::\n\nNext, I determine the number of elves in the list by counting the number of NAs.  I need to add 1 since the items for the last elf does not end with an NA.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnum_elves <- data %>%\n  filter(is.na(calories)) %>%\n  count(calories) %>%\n  pull(n) %>%\n  `+`(1)\n\nnum_elves\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 251\n```\n:::\n:::\n\nThe data is now read into the list where each list item contains the vector of calories for that elf.  I preallocate the list and then loop through the dataframe structure.  When an NA is encountered, the list of calories for the current elf (`elf_bag`) is added to `cal_lst` at the position specified by `elf_id`, `elf_id` is iterated by 1 and `elf_bag` is reset to an empty vector.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nelf_id <- 1 #counter for the current elf\nelf_bag <- vector() #vector for the calories for each consumable item\n\n#Preallocate the list\ncal_lst <- vector(mode = \"list\", length = 251)\n\nfor (i in 1:length(data[[1]])) {\n  if (is.na(data[[i,1]])) {\n    cal_lst[elf_id] <- list(elf_bag)\n    names(cal_lst)[elf_id] <- paste0(\"elf_\", elf_id)\n    elf_id <- elf_id + 1\n    elf_bag <- vector()\n  } else {\n    elf_bag <- c(elf_bag, data[[i, 1]])\n  }\n}\n# Add the final list of items since no NA at the end\ncal_lst[elf_id] <- list(elf_bag)\nnames(cal_lst)[elf_id] <- paste0(\"elf_\", elf_id)\n\n#Show the first three list items\ncal_lst[1:3]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n$elf_1\n[1] 11223  6323 10725 10761  3587\n\n$elf_2\n [1] 1274 1041 5566 1759 1372 1619 2228 1283 1981 1885 5894 1321 6081 4407 2992\n\n$elf_3\n [1] 7184 2310 7975 2752 7942 7616 3622 1320 1231 6191\n```\n:::\n:::\n\n## Finding the objectives\n\nNow, it is easy to find the most calories carried by an elf using `sapply` and then sort.  Since we named the list elements, we can see that elf_186 is caring the most calories.\n\n::: {.cell}\n\n```{.r .cell-code}\n#total calories for each elf\ncal_by_elf <- sapply(cal_lst, sum)\nsort(cal_by_elf, decreasing = TRUE)[1]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nelf_186 \n  72511 \n```\n:::\n:::\n\nSimilarly, the total amount for the top 3 elves carrying the most calories is determined.\n\n::: {.cell}\n\n```{.r .cell-code}\nsum(sort(cal_by_elf, decreasing = TRUE)[1:3])\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 212117\n```\n:::\n:::\n\n\nThe distribution of calories carried by the elves can be visualized in a histogram.\n\n::: {.cell}\n\n```{.r .cell-code}\nenframe(cal_by_elf) %>%\n  ggplot(aes(x=value)) +\n  geom_histogram(bins = 35, fill = \"steelblue\") +\n  labs(title = \"Calories of consumable items carried by Santa's elves\",\n       x = \"calories carried\")\n```\n\n::: {.cell-output-display}\n![](2023-01-05_aoc_Day01_Lists_files/figure-html/unnamed-chunk-7-1.png){width=672}\n:::\n:::\n\n## Summary\n\nA dataset from the Advent of Code Day 1 problem has been loaded into a structured list.  This format made performing the calculations required to meet the objectives quite straightforward.  Further analysis such as building to histogram is possible since the calculations are preserved for all of the elves.\n\n:::{.callout-tip collapse=\"true\"}\n## Expand for Session Info\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n```\n─ Session info ───────────────────────────────────────────────────────────────\n setting  value\n version  R version 4.2.0 (2022-04-22 ucrt)\n os       Windows 10 x64 (build 19045)\n system   x86_64, mingw32\n ui       RTerm\n language (EN)\n collate  English_United States.utf8\n ctype    English_United States.utf8\n tz       America/Chicago\n date     2023-01-05\n pandoc   2.19.2 @ C:/Program Files/RStudio/resources/app/bin/quarto/bin/tools/ (via rmarkdown)\n quarto   1.2.269 @ C:\\\\PROGRA~1\\\\RStudio\\\\RESOUR~1\\\\app\\\\bin\\\\quarto\\\\bin\\\\quarto.exe\n\n─ Packages ───────────────────────────────────────────────────────────────────\n ! package     * version date (UTC) lib source\n P dplyr       * 1.0.10  2022-09-01 [?] CRAN (R 4.2.2)\n P forcats     * 0.5.2   2022-08-19 [?] CRAN (R 4.2.2)\n P ggplot2     * 3.3.6   2022-05-03 [?] CRAN (R 4.2.1)\n   purrr       * 0.3.5   2022-10-06 [2] CRAN (R 4.2.1)\n   readr       * 2.1.3   2022-10-01 [2] CRAN (R 4.2.1)\n P sessioninfo * 1.2.2   2021-12-06 [?] CRAN (R 4.2.1)\n P stringr     * 1.4.1   2022-08-20 [?] CRAN (R 4.2.1)\n P tibble      * 3.1.8   2022-07-22 [?] CRAN (R 4.2.1)\n   tidyr       * 1.2.1   2022-09-08 [2] CRAN (R 4.2.1)\n P tidyverse   * 1.3.2   2022-07-18 [?] CRAN (R 4.2.1)\n\n [1] C:/Users/David Zoller/AppData/Local/Temp/RtmpeWEZEz/renv-library-2d8446fa353c\n [2] C:/Users/David Zoller/Documents/datadavidz.github.io/renv/library/R-4.2/x86_64-w64-mingw32\n [3] C:/Users/David Zoller/AppData/Local/Temp/RtmpeWEZEz/renv-system-library\n\n P ── Loaded and on-disk path mismatch.\n\n──────────────────────────────────────────────────────────────────────────────\n```\n:::\n:::\n\n:::\n\n\n\n",
    "supporting": [
      "2023-01-05_aoc_Day01_Lists_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}