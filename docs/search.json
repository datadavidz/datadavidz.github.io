[
  {
    "objectID": "archive.html",
    "href": "archive.html",
    "title": "Archive",
    "section": "",
    "text": "Dec 2, 2022\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nOct 21, 2022\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nOct 14, 2022\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nOct 13, 2022\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nOct 7, 2022\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nOct 1, 2022\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSep 24, 2022\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSep 17, 2022\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSep 10, 2022\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSep 3, 2022\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSep 2, 2022\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nAug 26, 2022\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nAug 19, 2022\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nAug 18, 2022\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nAug 15, 2022\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "blog.html",
    "href": "blog.html",
    "title": "blog",
    "section": "",
    "text": "Advent of Code Day 7: Tracking file paths\n\n\n\n\n\n\n\n\n\n\n\n\nMay 5, 2023\n\n\ndatadavidz\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nAdvent of Code Day 6: Decoding Signals\n\n\n\n\n\n\n\n\n\n\n\n\nApr 25, 2023\n\n\ndatadavidz\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nAdvent of Code Day 5: Stacking Crates\n\n\n\n\n\n\n\n\n\n\n\n\nApr 14, 2023\n\n\ndatadavidz\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nAdvent of Code Day 4: Separate\n\n\n\n\n\n\n\n\n\n\n\n\nFeb 7, 2023\n\n\ndatadavidz\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nAdvent of Code Day 3: Manipulating Strings\n\n\n\n\n\n\n\n\n\n\n\n\nJan 23, 2023\n\n\ndatadavidz\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nAdvent of Code Day 2: Using Lookup Tables\n\n\n\n\n\n\n\n\n\n\n\n\nJan 11, 2023\n\n\ndatadavidz\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nAdvent of Code Day 1: Working with Lists\n\n\n\n\n\n\n\n\n\n\n\n\nJan 5, 2023\n\n\ndatadavidz\n\n\n\n\n\n\n  \n\n\n\n\nA Rudimentary Shiny App for the Concrete API\n\n\n\n\n\n\n\nshiny\n\n\nMLOps\n\n\n\n\n\n\n\n\n\n\n\nDec 2, 2022\n\n\ndatadavidz\n\n\n\n\n\n\n  \n\n\n\n\nCreate a Dockerized API Running on an AWS EC2 instance\n\n\n\n\n\n\n\ntidymodels\n\n\nMLOps\n\n\n\n\n\n\n\n\n\n\n\nOct 21, 2022\n\n\ndatadavidz\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nPin a Vetiver Model to an AWS S3 Container\n\n\n\n\n\n\n\ntidymodels\n\n\nMLOps\n\n\n\n\n\n\n\n\n\n\n\nOct 14, 2022\n\n\ndatadavidz\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nGaussian Process Model for the Concrete Dataset\n\n\n\n\n\n\n\nsci-kit\n\n\nreticulate\n\n\n\n\n\n\n\n\n\n\n\nOct 13, 2022\n\n\ndatadavidz\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSummary of Concrete Models\n\n\n\n\n\n\n\ntidymodels\n\n\n\n\n\n\n\n\n\n\n\nOct 7, 2022\n\n\ndatadavidz\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nRandom Forest Model for Concrete Dataset\n\n\n\n\n\n\n\ntidymodels\n\n\n\n\n\n\n\n\n\n\n\nOct 1, 2022\n\n\ndatadavidz\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nPrediction of Concrete Strength using XGBoost\n\n\n\n\n\n\n\ntidymodels\n\n\n\n\n\n\n\n\n\n\n\nSep 24, 2022\n\n\ndatadavidz\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNeural Network for Concrete Dataset\n\n\n\n\n\n\n\ntidymodels\n\n\n\n\n\n\n\n\n\n\n\nSep 17, 2022\n\n\ndatadavidz\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nConventional Material Models for Concrete Dataset\n\n\n\n\n\n\n\n\n\n\n\n\nSep 10, 2022\n\n\ndatadavidz\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nGLM model for Concrete Strength\n\n\n\n\n\n\n\ntidymodels\n\n\n\n\n\n\n\n\n\n\n\nSep 3, 2022\n\n\ndatadavidz\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nPython Setup in RStudio using reticulate\n\n\n\n\n\n\n\nreticulate\n\n\n\n\n\n\n\n\n\n\n\nSep 2, 2022\n\n\ndatadavidz\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nExploratory Analysis of the Concrete Dataset\n\n\n\n\n\n\n\n\n\n\n\n\nAug 26, 2022\n\n\ndatadavidz\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nIntroduction to the Concrete Dataset\n\n\n\n\n\n\n\n\n\n\n\n\nAug 19, 2022\n\n\ndatadavidz\n\n\n\n\n\n\n  \n\n\n\n\nTidy Tuesday: CEO Departures\n\n\n\n\n\n\n\nDataViz\n\n\n\n\n\n\n\n\n\n\n\nApr 27, 2021\n\n\ndatadavidz\n\n\n\n\n\n\n  \n\n\n\n\nTidy Tuesday: U.S. Post Offices\n\n\n\n\n\n\n\nDataViz\n\n\n\n\n\n\n\n\n\n\n\nApr 13, 2021\n\n\ndatadavidz\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "About",
    "section": "",
    "text": "My blog to share my data science projects for fun. I am an R enthusiast and enjoy exploring all kinds of topics in the tidyverse. Thanks for stopping by and be sure to check out the posts!"
  },
  {
    "objectID": "posts/2022-08-19_ConcreteIntro/2022-08-19_ConcreteIntro.html",
    "href": "posts/2022-08-19_ConcreteIntro/2022-08-19_ConcreteIntro.html",
    "title": "Introduction to the Concrete Dataset",
    "section": "",
    "text": "I have a particular interest in the ability of machine learning algorithms to predict formulations and I am always searching for these types of datasets.\nOne such dataset is the Concrete Compressive Strength Dataset found on the UCI Machine Learning Repository. Many thanks to the original owner, Prof. I-Cheng Yeh for making this dataset available to the public!\nConventional concrete contains cement, fine and coarse aggregates and water. High performance concrete incorporates additional ingredients such as fly ash, blast furnace slag and chemical additives like superplasticizer. The compressive strength of concrete has been empirically found to have an inverse relationship to the water-to-cement ratio also known as the Abrams’ rule. High performance concrete is a more complex material and experimental data does not always support this general rule. This dataset contains over 1000 high performance concrete formulations containing the ingredients described above along with the compressive strength of each formulation. In addition, the age of the concrete before testing is also recorded.\n\nBasic Analysis of the Concrete Dataset\nThe concrete dataset was downloaded from the UCI repository as an Excel file and imported into R using the readxl package without further modification. Once the dataset was loaded into R, the column names were cleaned up into a format more amenable to data analysis. The complete dataset contains 1030 rows of concrete formulations of which the first 5 are shown below.\n\nlibrary(readxl)\nlibrary(tidyverse)\nlibrary(knitr)\n\n\nfilename <- \"Concrete_Data.xls\"\n\nfolder <- \"\"\nnumberCols <- 9 #total number of columns in spreadsheet\n\ncolTypes <- rep(\"numeric\", numberCols)\nconcrete_tbl <- read_excel(path = paste0(folder, filename), col_types = colTypes)\n\nconcrete_tbl <- concrete_tbl %>%\n  rename(cement = starts_with(\"Cement\")) %>%\n  rename(blast_furnace_slag = starts_with(\"Blast\")) %>%\n  rename(fly_ash = starts_with(\"Fly Ash\")) %>%\n  rename(water = starts_with(\"Water\")) %>%\n  rename(superplasticizer = starts_with(\"Super\")) %>%\n  rename(coarse_aggregate = starts_with(\"Coarse\")) %>%\n  rename(fine_aggregate = starts_with(\"Fine\")) %>%\n  rename(age = starts_with(\"Age\")) %>%\n  rename(compressive_strength = starts_with(\"Concrete\"))\n\n\nknitr::kable(head(concrete_tbl, 5), caption = \"First 5 Rows of Concrete Dataset\")\n\n\nFirst 5 Rows of Concrete Dataset\n\n\n\n\n\n\n\n\n\n\n\n\n\ncement\nblast_furnace_slag\nfly_ash\nwater\nsuperplasticizer\ncoarse_aggregate\nfine_aggregate\nage\ncompressive_strength\n\n\n\n\n540.0\n0.0\n0\n162\n2.5\n1040.0\n676.0\n28\n79.98611\n\n\n540.0\n0.0\n0\n162\n2.5\n1055.0\n676.0\n28\n61.88737\n\n\n332.5\n142.5\n0\n228\n0.0\n932.0\n594.0\n270\n40.26954\n\n\n332.5\n142.5\n0\n228\n0.0\n932.0\n594.0\n365\n41.05278\n\n\n198.6\n132.4\n0\n192\n0.0\n978.4\n825.5\n360\n44.29608"
  },
  {
    "objectID": "posts/2022-08-26_ConcreteEDA/2022-08-26_ConcreteEDA.html",
    "href": "posts/2022-08-26_ConcreteEDA/2022-08-26_ConcreteEDA.html",
    "title": "Exploratory Analysis of the Concrete Dataset",
    "section": "",
    "text": "Several exploratory data analysis (EDA) packages are used to evaluate the concrete dataset.\nIn the previous post, the concrete dataset was introduced. In this post, we further explore topics such as data completeness, distributions and correlations both with the target variable (compressive strength) and between predictor variables (ingredients). I use Several R packages which I have found to make this analysis quite simple and efficient: skimr, GGally and correlationFunnel."
  },
  {
    "objectID": "posts/2022-08-26_ConcreteEDA/2022-08-26_ConcreteEDA.html#load-libraries",
    "href": "posts/2022-08-26_ConcreteEDA/2022-08-26_ConcreteEDA.html#load-libraries",
    "title": "Exploratory Analysis of the Concrete Dataset",
    "section": "Load libraries",
    "text": "Load libraries\n\nlibrary(readxl)\nlibrary(tidyverse)\n\n#EDA\nlibrary(skimr)\nlibrary(GGally)\nlibrary(correlationfunnel)\n\nA good first analysis once the dataset is loaded is to use the skimr package to provide an overview of the data columns.\n\nskimr::skim(concrete_tbl)\n\n\nData summary\n\n\nName\nconcrete_tbl\n\n\nNumber of rows\n1030\n\n\nNumber of columns\n9\n\n\n_______________________\n\n\n\nColumn type frequency:\n\n\n\nnumeric\n9\n\n\n________________________\n\n\n\nGroup variables\nNone\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\ncement\n0\n1\n281.17\n104.51\n102.00\n192.38\n272.90\n350.00\n540.0\n▆▇▇▃▂\n\n\nblast_furnace_slag\n0\n1\n73.90\n86.28\n0.00\n0.00\n22.00\n142.95\n359.4\n▇▂▃▁▁\n\n\nfly_ash\n0\n1\n54.19\n64.00\n0.00\n0.00\n0.00\n118.27\n200.1\n▇▁▂▂▁\n\n\nwater\n0\n1\n181.57\n21.36\n121.75\n164.90\n185.00\n192.00\n247.0\n▁▅▇▂▁\n\n\nsuperplasticizer\n0\n1\n6.20\n5.97\n0.00\n0.00\n6.35\n10.16\n32.2\n▇▆▁▁▁\n\n\ncoarse_aggregate\n0\n1\n972.92\n77.75\n801.00\n932.00\n968.00\n1029.40\n1145.0\n▃▅▇▅▂\n\n\nfine_aggregate\n0\n1\n773.58\n80.18\n594.00\n730.95\n779.51\n824.00\n992.6\n▂▃▇▃▁\n\n\nage\n0\n1\n45.66\n63.17\n1.00\n7.00\n28.00\n56.00\n365.0\n▇▁▁▁▁\n\n\ncompressive_strength\n0\n1\n35.82\n16.71\n2.33\n23.71\n34.44\n46.14\n82.6\n▅▇▇▃▁\n\n\n\n\n\nThe good news is that there were no missing data points in the concrete dataset. There are concrete compositions with no blast furnace slag, fly ash or superplasticizer. The age before testing is skewed to lower age before testing. These observations are further supported looking at the histograms shown below.\n\nconcrete_tbl %>%\n  pivot_longer(cement:age, names_to=\"ingredient\", values_to = \"amount\") %>%\n  ggplot(aes(x=amount)) +\n  geom_histogram(bins = 30) +\n  facet_wrap(~ingredient, scales = \"free\")"
  },
  {
    "objectID": "posts/2022-08-26_ConcreteEDA/2022-08-26_ConcreteEDA.html#variable-correlations",
    "href": "posts/2022-08-26_ConcreteEDA/2022-08-26_ConcreteEDA.html#variable-correlations",
    "title": "Exploratory Analysis of the Concrete Dataset",
    "section": "Variable correlations",
    "text": "Variable correlations\nNext, we analyze the correlations between variables. When the amount of one ingredient is increased, we expect one or more of the other ingredients in the concrete mixture to decrease. So, some correlation between the concrete ingredients is expected.\n\nGGally::ggcorr(concrete_tbl)\n\n\n\n\nThe correlation analysis showed a strong, positive correlation with cement content and compressive strength and less strong correlations with age with compressive strength and superplasticizer with compressive strength. An inverse correlation between water and superplasticizer was detected perhaps due to the water content of the superplasticizer requiring less additional water in the formulation.\nAnother way of visualizing the correlation of variables with the property you wish to predict is the called a “correlation funnel”.\n\nconcrete_tbl %>%\n  binarize(n_bins = 3) %>%\n  correlate(`compressive_strength__41.36856_Inf`) %>%\n  plot_correlation_funnel(interactive = FALSE)\n\n\n\n\nThe correlation funnel shows some degree of correlation between the cement, water, superplasticizer and age with compressive strength. The fly ash, coarse and fine aggregate and blast furnace slag showed very little correlation with compressive strength."
  },
  {
    "objectID": "posts/2022-08-26_ConcreteEDA/2022-08-26_ConcreteEDA.html#summary",
    "href": "posts/2022-08-26_ConcreteEDA/2022-08-26_ConcreteEDA.html#summary",
    "title": "Exploratory Analysis of the Concrete Dataset",
    "section": "Summary",
    "text": "Summary\nThis post has shown several techniques for exploring the concrete dataset. The next post will use a generalized linear modeling approach to predict concrete compressive strength and compare the results with the conventional material modeling approach. Subsequent articles will use machine learning techniques such as artificial neural networks and extreme gradient boosting.\n\n\n\n\n\n\nExpand for Session Info\n\n\n\n\n\n\n\nWarning: package 'sessioninfo' was built under R version 4.2.1\n\n\n─ Session info ───────────────────────────────────────────────────────────────\n setting  value\n version  R version 4.2.0 (2022-04-22 ucrt)\n os       Windows 10 x64 (build 19043)\n system   x86_64, mingw32\n ui       RTerm\n language (EN)\n collate  English_United States.utf8\n ctype    English_United States.utf8\n tz       America/Chicago\n date     2022-09-02\n pandoc   2.18 @ C:/Program Files/RStudio/bin/quarto/bin/tools/ (via rmarkdown)\n quarto   1.0.36 @ C:\\\\PROGRA~1\\\\RStudio\\\\bin\\\\quarto\\\\bin\\\\quarto.cmd\n\n─ Packages ───────────────────────────────────────────────────────────────────\n ! package           * version date (UTC) lib source\n P correlationfunnel * 0.2.0   2020-06-09 [?] CRAN (R 4.2.1)\n P dplyr             * 1.0.10  2022-09-01 [?] CRAN (R 4.2.0)\n P forcats           * 0.5.2   2022-08-19 [?] CRAN (R 4.2.1)\n P GGally            * 2.1.2   2021-06-21 [?] CRAN (R 4.2.1)\n P ggplot2           * 3.3.6   2022-05-03 [?] CRAN (R 4.2.1)\n P purrr             * 0.3.4   2020-04-17 [?] CRAN (R 4.2.1)\n P readr             * 2.1.2   2022-01-30 [?] CRAN (R 4.2.1)\n P readxl            * 1.4.1   2022-08-17 [?] CRAN (R 4.2.1)\n P sessioninfo       * 1.2.2   2021-12-06 [?] CRAN (R 4.2.1)\n P skimr             * 2.1.4   2022-04-15 [?] CRAN (R 4.2.1)\n P stringr           * 1.4.1   2022-08-20 [?] CRAN (R 4.2.1)\n P tibble            * 3.1.8   2022-07-22 [?] CRAN (R 4.2.1)\n P tidyr             * 1.2.0   2022-02-01 [?] CRAN (R 4.2.1)\n P tidyverse         * 1.3.2   2022-07-18 [?] CRAN (R 4.2.1)\n\n [1] C:/Users/David Zoller/AppData/Local/Temp/RtmpolCg0M/renv-library-cb838f17a38\n [2] C:/Users/David Zoller/Documents/datadavidz.github.io/renv/library/R-4.2/x86_64-w64-mingw32\n [3] C:/Program Files/R/R-4.2.0/library\n\n P ── Loaded and on-disk path mismatch.\n\n──────────────────────────────────────────────────────────────────────────────"
  },
  {
    "objectID": "posts/post-with-code/index.html",
    "href": "posts/post-with-code/index.html",
    "title": "Post With Code",
    "section": "",
    "text": "1 + 1\n\n[1] 2"
  },
  {
    "objectID": "posts/welcome/index.html",
    "href": "posts/welcome/index.html",
    "title": "Welcome To My Blog",
    "section": "",
    "text": "Since this post doesn’t specify an explicit image, the first image in the post will be used in the listing page of posts."
  },
  {
    "objectID": "posts/2022-09-03_ConcreteGLM/2022-09-03_ConcreteGLM.html",
    "href": "posts/2022-09-03_ConcreteGLM/2022-09-03_ConcreteGLM.html",
    "title": "GLM model for Concrete Strength",
    "section": "",
    "text": "A generalized linear model (GLM) was built to predict the compressive strength of high-performance concrete formulations.\nAn elastic net regularization has been employed to develop the generalized linear model using the glmnet engine within the tidymodels framework. These results will be compared with a conventional materials modeling approach in the next post.\n##Load libraries and data"
  },
  {
    "objectID": "posts/2022-09-03_ConcreteGLM/2022-09-03_ConcreteGLM.html#stage-machine-learning-approach",
    "href": "posts/2022-09-03_ConcreteGLM/2022-09-03_ConcreteGLM.html#stage-machine-learning-approach",
    "title": "GLM model for Concrete Strength",
    "section": "3-Stage Machine Learning Approach",
    "text": "3-Stage Machine Learning Approach\nWe will utilize the 3-stage machine learning approach promoted by Matt Dancho at Business Science. He posted an excellent tutorial “Product Price Prediction: A Tidy Hyperparameter Tuning and Cross Validation Tutorial”. I haven’t found a better example of applying the tidymodels framework to develop a predictive model.\nThe 3-stage hyperparameter tuning process:\n1. Find Parameters: Use hyperparameter tuning on a “training dataset” that sections your training data into cross validation folds. The output of stage 1 is the parameter set.\n2. Compare and Select the Best Model: Evaluate the performance on a hidden “test dataset”. The output at Stage 2 is what we determined as the best model.\n3. Train Final Model: Once we have selected the best model, we train the full dataset. This model goes into production.\n\nStage 1: Find Parameters\nHere we want to make different machine learning models and try them out by performing the following steps: - Initial Splitting: Separate into random training and test datasets - Preprocessing: Make a pipeline to transform raw data into a dataset ready for machine learning - Cross Validation Specification: Sample the training data into splits - Model Specification: Select model algorithms and identify key tuning parameters - Grid Specification: Set up a grid using wise parameter choices - Hyperparameter Tuning: Implement the tuning process\nInitial splitting of the dataset into Training and Test Dataset Here we use the rsample package to create an 80/20 split. The concrete dataset contains 1030 formulations of which 825 are randomly assigned to training and 205 are randomly assigned to testing.\n\nset.seed(123)\nconcrete_split <- initial_split(concrete_tbl, prop = 0.80)\nconcrete_train <- training(concrete_split)\nconcrete_test <- testing(concrete_split)\n\nPreprocessing is accomplished by using the recipe package. The recipe provides the steps required to transform our raw data into a dataset suitable for machine learning. The Concrete dataset actually doesn’t require much reformatting. The major issue was the lengthy column names which was addressed immediately after the dataset was imported. The dataset contained all numerical values and no missing data. Initially we will just center and scale the predictors before sending to the glmnet model.\n\nconcrete_rec <- recipe(compressive_strength ~ ., data = concrete_train) %>%\n  step_center(all_predictors()) %>%\n  step_scale(all_predictors())\n\nconcrete_rec\n\nRecipe\n\nInputs:\n\n      role #variables\n   outcome          1\n predictor          8\n\nOperations:\n\nCentering for all_predictors()\nScaling for all_predictors()\n\n\nCross validation folds are created in order to assess the performance of the model parameters. Here we use 5-fold cross validation to create splits from our training dataset and also using the preprocessing pipeline specified above.\n\nset.seed(234)\nconcrete_folds <- vfold_cv(concrete_train, v = 5)\n\nconcrete_folds\n\n#  5-fold cross-validation \n# A tibble: 5 × 2\n  splits            id   \n  <list>            <chr>\n1 <split [659/165]> Fold1\n2 <split [659/165]> Fold2\n3 <split [659/165]> Fold3\n4 <split [659/165]> Fold4\n5 <split [660/164]> Fold5\n\n\nModel specifications are created using the parsnip package. Here we specify a linear regression model using the glmnet engine. glmnet uses an Elastic Net which combines LASSO and Ridge Regression techniques. This is a linear algorithm which may have difficulty with the skewed numeric data which is present in the Concrete dataset. Notice that the penalty and mixture parameters have been specified to be tuned.\n\nglmnet_spec <- linear_reg(\n  penalty = tune(),\n  mixture = tune()\n) %>%\n  set_engine(\"glmnet\") %>%\n  set_mode(\"regression\")\n\nglmnet_spec\n\nLinear Regression Model Specification (regression)\n\nMain Arguments:\n  penalty = tune()\n  mixture = tune()\n\nComputational engine: glmnet \n\n\nGrid specifications sets up a variety of parameter values used with our model to find which combination yields the lowest prediction error (or best accuracy). Here we specify the parameter ranges and grid function using the dials package.\nSpecify the grid function (max entropy, hypercube etc.). Here we make a grid of 20 values using the grid_max_entropy() function in the dials package. Since there are just 2 tuning parameters in this case, we can visualize the grid selections. Note the penalty parameter is on the log base 10 scale by default. The dials package helps us make smarter choices for the critical tuning parameters.\n\nset.seed(345)\nglmnet_grid <- grid_max_entropy(penalty(), mixture(), size = 20)\n\nglmnet_grid %>%\n  ggplot(aes(penalty, mixture)) +\n  geom_point(color = \"steelblue\", size = 3) +\n  scale_x_log10() +\n  theme_light() +\n  labs(title = \"Max Entropy Grid\", x = \"Penalty (log scale)\", y = \"Mixture\")\n\n\n\n\n\nconcrete_wf <- workflow() %>%\n  add_recipe(concrete_rec) %>%\n  add_model(glmnet_spec)\n\nHyperparameter tuning is now performed using the tune_grid() function from the tune package. Here we specific the formula, model, resamples, grid and metrics. The metrics come from the yardstick package. For regression problems, we can specify multiple metrics such as mae, mape, rmse and rsq into a metric_set().\n\ndoParallel::registerDoParallel()\n\nglmnet_res <- tune_grid(\n  concrete_wf,\n  resamples = concrete_folds,\n  grid = glmnet_grid,\n  metrics = metric_set(rmse, rsq, mae),\n  control = control_grid(save_pred = TRUE)\n)\n\nIdentify the best hyperparameter values using the show_best() function.\n\nglmnet_res %>% show_best(\"mae\", n = 5)\n\n# A tibble: 5 × 8\n   penalty mixture .metric .estimator  mean     n std_err .config              \n     <dbl>   <dbl> <chr>   <chr>      <dbl> <int>   <dbl> <chr>                \n1 1.09e- 9   0.155 mae     standard    8.10     5   0.216 Preprocessor1_Model06\n2 5.89e- 4   0.208 mae     standard    8.10     5   0.216 Preprocessor1_Model07\n3 4.05e-10   0.392 mae     standard    8.10     5   0.216 Preprocessor1_Model10\n4 1.16e- 6   0.340 mae     standard    8.10     5   0.216 Preprocessor1_Model08\n5 1.41e- 8   0.520 mae     standard    8.10     5   0.216 Preprocessor1_Model12\n\n\nVisualize the tuning results\n\n\n\n\n\n\n\nStage 2: Compare and Select the Best Model\nSelect the best parameters based on the lowest mean absolute error.\n\nparams_glmnet_best <- glmnet_res %>% select_best(\"mae\")\nparams_glmnet_best\n\n# A tibble: 1 × 3\n        penalty mixture .config              \n          <dbl>   <dbl> <chr>                \n1 0.00000000109   0.155 Preprocessor1_Model06\n\n\nFinalize the model with the best parameters.\n\nfinal_glmnet <- finalize_workflow(concrete_wf, params_glmnet_best)\n\nfinal_glmnet\n\n══ Workflow ════════════════════════════════════════════════════════════════════\nPreprocessor: Recipe\nModel: linear_reg()\n\n── Preprocessor ────────────────────────────────────────────────────────────────\n2 Recipe Steps\n\n• step_center()\n• step_scale()\n\n── Model ───────────────────────────────────────────────────────────────────────\nLinear Regression Model Specification (regression)\n\nMain Arguments:\n  penalty = 1.09262294094878e-09\n  mixture = 0.155459027038887\n\nComputational engine: glmnet \n\n\nWhich Features are most important?\n\nfinal_glmnet %>%\n  fit(data = concrete_train) %>%\n  pull_workflow_fit() %>%\n  vip(aesthetics = list(fill = \"steelblue\")) +\n  labs(title = \"GLMNET Model Importance - Compressive Strength (MPa) Prediction\")\n\nWarning: `pull_workflow_fit()` was deprecated in workflows 0.2.3.\nPlease use `extract_fit_parsnip()` instead.\n\n\n\n\n\n\n\nStage 3: Train Final Model\nFit model on train and evaluate on test.\n\nfinal_res <- last_fit(final_glmnet, concrete_split, metrics = metric_set(rmse, rsq, mae))\n\nAssess final model performance metrics.\n\ncollect_metrics(final_res)\n\n# A tibble: 3 × 4\n  .metric .estimator .estimate .config             \n  <chr>   <chr>          <dbl> <chr>               \n1 rmse    standard      11.4   Preprocessor1_Model1\n2 rsq     standard       0.615 Preprocessor1_Model1\n3 mae     standard       9.09  Preprocessor1_Model1\n\n\nVisualize actual vs. predicted compressive strength for final model."
  },
  {
    "objectID": "posts/2022-09-10_ConcreteNLS/2022-09-10_ConcreteNLS.html",
    "href": "posts/2022-09-10_ConcreteNLS/2022-09-10_ConcreteNLS.html",
    "title": "Conventional Material Models for Concrete Dataset",
    "section": "",
    "text": "Fitting the concrete dataset to a pre-determined equation using a non-linear, least squares approximation.\nAbrams’ law states that the strength of a concrete mix is inversely related to the mass ratio of water to cement. In other words, as the water content increases, the strength of the concrete decreases. Experimental data however shows that this law does not provide the complete picture and concrete formulations with the same water:cement can have significantly different performance."
  },
  {
    "objectID": "posts/2022-09-10_ConcreteNLS/2022-09-10_ConcreteNLS.html#load-libraries-and-data",
    "href": "posts/2022-09-10_ConcreteNLS/2022-09-10_ConcreteNLS.html#load-libraries-and-data",
    "title": "Conventional Material Models for Concrete Dataset",
    "section": "Load libraries and data",
    "text": "Load libraries and data\n\nlibrary(readxl)\nlibrary(tidyverse)\n\ntheme_set(theme_light())\n\n\nfilename <- \"Concrete_Data.xls\"\n\nfolder <- \"../data/\"\nnumberCols <- 9 #total number of columns in spreadsheet\n\ncolTypes <- rep(\"numeric\", numberCols)\nconcrete_tbl <- read_excel(path = paste0(folder, filename), col_types = colTypes)\n\nconcrete_tbl <- concrete_tbl %>%\n  rename(cement = starts_with(\"Cement\")) %>%\n  rename(blast_furnace_slag = starts_with(\"Blast\")) %>%\n  rename(fly_ash = starts_with(\"Fly Ash\")) %>%\n  rename(water = starts_with(\"Water\")) %>%\n  rename(superplasticizer = starts_with(\"Super\")) %>%\n  rename(coarse_aggregate = starts_with(\"Coarse\")) %>%\n  rename(fine_aggregate = starts_with(\"Fine\")) %>%\n  rename(age = starts_with(\"Age\")) %>%\n  rename(compressive_strength = starts_with(\"Concrete\"))"
  },
  {
    "objectID": "posts/2022-09-10_ConcreteNLS/2022-09-10_ConcreteNLS.html#plot-compressive-strength-as-a-function-of-watercement",
    "href": "posts/2022-09-10_ConcreteNLS/2022-09-10_ConcreteNLS.html#plot-compressive-strength-as-a-function-of-watercement",
    "title": "Conventional Material Models for Concrete Dataset",
    "section": "Plot compressive strength as a function of water:cement",
    "text": "Plot compressive strength as a function of water:cement\n\nconcrete_tbl <- concrete_tbl %>%\n  mutate(water_cement = water / cement,\n         water_binder = water / (cement + blast_furnace_slag + fly_ash))\n\nconcrete_tbl %>%\n  ggplot(aes(water_cement, compressive_strength)) +\n  geom_point(alpha = 0.15) +\n  geom_smooth(formula = y ~ x, method = \"lm\") +\n  theme_light() +\n  labs(title = \"Concrete Compressive Strength vs. Water:Cement\",\n       x = \"Water:Cement\", y = \"Compressive Strength (MPa)\")\n\n\n\n\nIt is apparent from the plot above that water:cement is not the only factor important for determining the compressive strength of concrete. For example, there are multiple formulations with a water:cement of ~1 with a range of compressive strengths from less than 10 MPa to greater than 50 MPa. The age of the concrete at the time of testing is also recognized as an important factor in determining the concrete strength for a sample.\n\\[ f^\\prime_c(t) = a X^b \\cdot [c \\ln(t)+(d)] \\]\nwhere t = age at test, X = w/c or water-to-binder ratio and a, b, c, d are regression coefficients\nThe above equation also includes the age at test variable (t) to predict the compressive strength. This equation uses four parameters reminding me of the famous quote by mathematician John von Neumann, “with four parameters I can fit an elephant, with five I can make him wiggle his trunk.”\nThis equation is fit to the experimental dataset using non-linear least squares approximation. The nls function in base R has been used as shown below."
  },
  {
    "objectID": "posts/2022-09-10_ConcreteNLS/2022-09-10_ConcreteNLS.html#nls-fit-using-watercement",
    "href": "posts/2022-09-10_ConcreteNLS/2022-09-10_ConcreteNLS.html#nls-fit-using-watercement",
    "title": "Conventional Material Models for Concrete Dataset",
    "section": "NLS Fit using water:cement",
    "text": "NLS Fit using water:cement\n\nwc <- concrete_tbl$water_cement\nwb <- concrete_tbl$water_binder\nage <- concrete_tbl$age\ncs <- concrete_tbl$compressive_strength\n\ncsFunc <- function(wc, age, a, b, c, d) { (a * wc^b) + (c * log(age) + d)}\n\nFit with water:cement\n\ncsFit <- nls(cs ~ csFunc(wc, age, a, b, c, d), start=list(a=30, b=-0.6, c=0.3, d=0.1))\n\nsummary(csFit)\n\n\nFormula: cs ~ csFunc(wc, age, a, b, c, d)\n\nParameters:\n  Estimate Std. Error t value Pr(>|t|)    \na  14.0112     2.9035   4.826 1.61e-06 ***\nb  -1.0536     0.1357  -7.763 2.00e-14 ***\nc   8.1770     0.2587  31.608  < 2e-16 ***\nd -12.8289     3.1703  -4.047 5.59e-05 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 9.869 on 1026 degrees of freedom\n\nNumber of iterations to convergence: 7 \nAchieved convergence tolerance: 3.529e-06\n\n\nVisualize actual vs. predicted compressive strength for water:cement model.\n\n\n\n\n\n\nNLS Fit using Water:Binder\nFit with water:binder\n\ncsFit_wb <- nls(cs ~ csFunc(wb, age, a, b, c, d), start=list(a=10, b=-0.5, c=10, d=10))\n\nsummary(csFit_wb)\n\n\nFormula: cs ~ csFunc(wb, age, a, b, c, d)\n\nParameters:\n  Estimate Std. Error t value Pr(>|t|)    \na  23.5011     6.9342   3.389 0.000728 ***\nb  -0.8614     0.1440  -5.980 3.07e-09 ***\nc   8.5739     0.2043  41.971  < 2e-16 ***\nd -39.2343     8.2396  -4.762 2.20e-06 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 7.774 on 1026 degrees of freedom\n\nNumber of iterations to convergence: 7 \nAchieved convergence tolerance: 2.226e-06\n\n\nVisualize actual vs. predicted compressive strength for water:binder model."
  },
  {
    "objectID": "posts/2022-09-17_ConcreteMLP/2022-09-17_ConcreteMLP.html",
    "href": "posts/2022-09-17_ConcreteMLP/2022-09-17_ConcreteMLP.html",
    "title": "Neural Network for Concrete Dataset",
    "section": "",
    "text": "A single-layer neural network is fit to predict concrete compressive strength.\nIn this post, we will begin to use machine learning techniques for predicting compressive strength of formulations using the concrete dataset. In a previous post, we created a model using a conventional material modeling approach which resulted in an R2 of 0.78. Here we will use a single-layer neural network to predict compressive strength and compare the results with the conventional material model."
  },
  {
    "objectID": "posts/2022-09-17_ConcreteMLP/2022-09-17_ConcreteMLP.html#load-libraries-and-data",
    "href": "posts/2022-09-17_ConcreteMLP/2022-09-17_ConcreteMLP.html#load-libraries-and-data",
    "title": "Neural Network for Concrete Dataset",
    "section": "Load libraries and data",
    "text": "Load libraries and data\n\nlibrary(readxl)\nlibrary(tidyverse)\n\n#Tidymodels\nlibrary(tidymodels)\nlibrary(vip)\n\n\nfilename <- \"Concrete_Data.xls\"\n\nfolder <- \"../data/\"\nnumberCols <- 9 #total number of columns in spreadsheet\n\ncolTypes <- rep(\"numeric\", numberCols)\nconcrete_tbl <- read_excel(path = paste0(folder, filename), col_types = colTypes)\n\nconcrete_tbl <- concrete_tbl %>%\n  rename(cement = starts_with(\"Cement\")) %>%\n  rename(blast_furnace_slag = starts_with(\"Blast\")) %>%\n  rename(fly_ash = starts_with(\"Fly Ash\")) %>%\n  rename(water = starts_with(\"Water\")) %>%\n  rename(superplasticizer = starts_with(\"Super\")) %>%\n  rename(coarse_aggregate = starts_with(\"Coarse\")) %>%\n  rename(fine_aggregate = starts_with(\"Fine\")) %>%\n  rename(age = starts_with(\"Age\")) %>%\n  rename(compressive_strength = starts_with(\"Concrete\"))"
  },
  {
    "objectID": "posts/2022-09-17_ConcreteMLP/2022-09-17_ConcreteMLP.html#stage-1-model-tuning",
    "href": "posts/2022-09-17_ConcreteMLP/2022-09-17_ConcreteMLP.html#stage-1-model-tuning",
    "title": "Neural Network for Concrete Dataset",
    "section": "Stage 1: Model Tuning",
    "text": "Stage 1: Model Tuning\nInitial splitting of the dataset into Training and Test Dataset Here we use the rsample package to create an 80/20 split. The concrete dataset contains 1030 formulations of which 825 are randomly assigned to training and 205 are randomly assigned to testing.\n\nset.seed(123)\nconcrete_split <- initial_split(concrete_tbl, prop = 0.80)\nconcrete_train <- training(concrete_split)\nconcrete_test <- testing(concrete_split)\n\nPreprocessing is accomplished by using the recipe package. The recipe provides the steps required to transform our raw data into a dataset suitable for machine learning. The Concrete dataset actually doesn’t require much reformatting. The major issue was the lengthy column names which was addressed immediately after the dataset was imported. The dataset contained all numerical values and no missing data. Initially we will just center and scale the predictors before sending to the nnet model.\n\nconcrete_rec <- recipe(compressive_strength ~ ., data = concrete_train) %>%\n  step_center(all_predictors()) %>%\n  step_scale(all_predictors())\n\nconcrete_rec\n\nRecipe\n\nInputs:\n\n      role #variables\n   outcome          1\n predictor          8\n\nOperations:\n\nCentering for all_predictors()\nScaling for all_predictors()\n\n\nCross validation folds are created in order to assess the performance of the model parameters. Here we use 5-fold cross validation to create splits from our training dataset and also using the preprocessing pipeline specified above.\n\nset.seed(234)\nconcrete_folds <- vfold_cv(concrete_train, v = 5)\n\nconcrete_folds\n\n#  5-fold cross-validation \n# A tibble: 5 × 2\n  splits            id   \n  <list>            <chr>\n1 <split [659/165]> Fold1\n2 <split [659/165]> Fold2\n3 <split [659/165]> Fold3\n4 <split [659/165]> Fold4\n5 <split [660/164]> Fold5\n\n\nModel specifications are created using the parsnip package. Here we specify a multi-layer perceptron (mlp) using the nnet engine. The multi-layer perceptron is a single-layer neural network. Notice that the penalty and number of hidden units parameters have been specified to be tuned.\n\nmlp_spec = mlp(\n  hidden_units = tune(),\n  penalty = tune(),\n  epochs = 3000,\n  #activation = \"linear\"\n) %>%\n  set_engine(\"nnet\") %>%\n  #set_engine(\"nnet\", objective = \"reg:squarederror\") %>%\n  set_mode(\"regression\")\n\nmlp_spec\n\nSingle Layer Neural Network Model Specification (regression)\n\nMain Arguments:\n  hidden_units = tune()\n  penalty = tune()\n  epochs = 3000\n\nComputational engine: nnet \n\n\nGrid specifications sets up a variety of parameter values used with our model to find which combination yields the lowest prediction error (or best accuracy). Here we specify the parameter ranges and grid function using the dials package.\nSpecify the grid function (max entropy, hypercube etc.). Here we make a grid of 20 values using the grid_max_entropy() function in the dials package. Since there are just 2 tuning parameters in this case, we can visualize the grid selections. Note the penalty parameter is on the log base 10 scale by default. The dials package helps us make smarter choices for the critical tuning parameters.\n\nset.seed(345)\nnnet_grid <- grid_max_entropy(penalty(), hidden_units(), size = 20)\n\nnnet_grid %>%\n  ggplot(aes(penalty, hidden_units)) +\n  geom_point(color = \"steelblue\", size = 3) +\n  scale_x_log10() +\n  theme_light() +\n  labs(title = \"Max Entropy Grid\", x = \"Penalty (log scale)\", y = \"Hidden Units\")\n\n\n\n\nDefine a workflow for the tuning process\n\nconcrete_wf <- workflow() %>%\n  add_recipe(concrete_rec) %>%\n  add_model(mlp_spec)\n\nHyperparameter tuning is now performed using the tune_grid() function from the tune package. Here we specific the formula, model, resamples, grid and metrics. The metrics come from the yardstick package. For regression problems, we can specify multiple metrics such as mae, mape, rmse and rsq into a metric_set().\n\ndoParallel::registerDoParallel()\n\nbegin <- Sys.time()\n\nset.seed(456)\n\nnnet_res <- tune_grid(\n  concrete_wf,\n  resamples = concrete_folds,\n  grid = nnet_grid,\n  metrics = metric_set(rmse, rsq, mae),\n  control = control_grid(save_pred = TRUE)\n)\n\nend1 <- Sys.time() - begin"
  },
  {
    "objectID": "posts/2022-09-17_ConcreteMLP/2022-09-17_ConcreteMLP.html#stage-2-compare-and-select-the-best-model",
    "href": "posts/2022-09-17_ConcreteMLP/2022-09-17_ConcreteMLP.html#stage-2-compare-and-select-the-best-model",
    "title": "Neural Network for Concrete Dataset",
    "section": "Stage 2: Compare and Select the Best Model",
    "text": "Stage 2: Compare and Select the Best Model\nIdentify the best hyperparameter values using the show_best() function.\n\nnnet_res %>% show_best(\"mae\", n = 5)\n\n# A tibble: 5 × 8\n  hidden_units   penalty .metric .estimator  mean     n std_err .config         \n         <int>     <dbl> <chr>   <chr>      <dbl> <int>   <dbl> <chr>           \n1           10 0.0928    mae     standard    4.14     5  0.234  Preprocessor1_M…\n2           10 0.00165   mae     standard    4.32     5  0.189  Preprocessor1_M…\n3            7 0.0000358 mae     standard    4.36     5  0.322  Preprocessor1_M…\n4            7 0.316     mae     standard    4.40     5  0.0475 Preprocessor1_M…\n5            6 0.00285   mae     standard    4.61     5  0.315  Preprocessor1_M…\n\n\nVisualize the tuning results\n\n\n\n\n\nSelect the best parameters based on the lowest mean absolute error.\n\nparams_nnet_best <- nnet_res %>% select_best(\"mae\")\nparams_nnet_best\n\n# A tibble: 1 × 3\n  hidden_units penalty .config              \n         <int>   <dbl> <chr>                \n1           10  0.0928 Preprocessor1_Model10\n\n\n\nfinal_nnet <- finalize_workflow(concrete_wf, params_nnet_best)\n\nfinal_nnet\n\n══ Workflow ════════════════════════════════════════════════════════════════════\nPreprocessor: Recipe\nModel: mlp()\n\n── Preprocessor ────────────────────────────────────────────────────────────────\n2 Recipe Steps\n\n• step_center()\n• step_scale()\n\n── Model ───────────────────────────────────────────────────────────────────────\nSingle Layer Neural Network Model Specification (regression)\n\nMain Arguments:\n  hidden_units = 10\n  penalty = 0.0927943905608392\n  epochs = 3000\n\nComputational engine: nnet \n\n\n\nset.seed(567)\n\nfinal_nnet %>%\n  fit(data = concrete_train) %>%\n  extract_fit_parsnip() %>%\n  vip(aesthetics = list(fill = \"steelblue\")) +\n  labs(title = \"NNET Model Importance - Compressive Strength (MPa) Prediction\")"
  },
  {
    "objectID": "posts/2022-09-17_ConcreteMLP/2022-09-17_ConcreteMLP.html#stage-3-train-final-model",
    "href": "posts/2022-09-17_ConcreteMLP/2022-09-17_ConcreteMLP.html#stage-3-train-final-model",
    "title": "Neural Network for Concrete Dataset",
    "section": "Stage 3: Train Final Model",
    "text": "Stage 3: Train Final Model\nFit model on train and evaluate on test.\n\nset.seed(678)\n\nfinal_res <- last_fit(final_nnet, concrete_split, metrics = metric_set(rmse, rsq, mae))\n\nAssess final model performance metrics.\n\ncollect_metrics(final_res)\n\n# A tibble: 3 × 4\n  .metric .estimator .estimate .config             \n  <chr>   <chr>          <dbl> <chr>               \n1 rmse    standard       6.53  Preprocessor1_Model1\n2 rsq     standard       0.875 Preprocessor1_Model1\n3 mae     standard       4.94  Preprocessor1_Model1\n\n\nVisualize actual vs. predicted compressive strength for final model."
  },
  {
    "objectID": "posts/2022-09-17_ConcreteMLP/2022-09-17_ConcreteMLP.html#summary",
    "href": "posts/2022-09-17_ConcreteMLP/2022-09-17_ConcreteMLP.html#summary",
    "title": "Neural Network for Concrete Dataset",
    "section": "Summary",
    "text": "Summary\nThe single-layer, feed-forward neural network had an R2 of 0.87 and RMSE of 6.5 MPa.\n\n\n\n\n\n\nExpand for Session Info\n\n\n\n\n\n\n\n─ Session info ───────────────────────────────────────────────────────────────\n setting  value\n version  R version 4.2.0 (2022-04-22 ucrt)\n os       Windows 10 x64 (build 19043)\n system   x86_64, mingw32\n ui       RTerm\n language (EN)\n collate  English_United States.utf8\n ctype    English_United States.utf8\n tz       America/Chicago\n date     2022-09-02\n pandoc   2.18 @ C:/Program Files/RStudio/bin/quarto/bin/tools/ (via rmarkdown)\n quarto   1.0.36 @ C:\\\\PROGRA~1\\\\RStudio\\\\bin\\\\quarto\\\\bin\\\\quarto.cmd\n\n─ Packages ───────────────────────────────────────────────────────────────────\n ! package      * version date (UTC) lib source\n P broom        * 1.0.1   2022-08-29 [?] CRAN (R 4.2.1)\n P dials        * 1.0.0   2022-06-14 [?] CRAN (R 4.2.1)\n P dplyr        * 1.0.10  2022-09-01 [?] CRAN (R 4.2.0)\n P forcats      * 0.5.2   2022-08-19 [?] CRAN (R 4.2.1)\n P ggplot2      * 3.3.6   2022-05-03 [?] CRAN (R 4.2.1)\n P infer        * 1.0.3   2022-08-22 [?] CRAN (R 4.2.1)\n P modeldata    * 1.0.0   2022-07-01 [?] CRAN (R 4.2.1)\n P parsnip      * 1.0.0   2022-06-16 [?] CRAN (R 4.2.1)\n P purrr        * 0.3.4   2020-04-17 [?] CRAN (R 4.2.1)\n P readr        * 2.1.2   2022-01-30 [?] CRAN (R 4.2.1)\n P readxl       * 1.4.1   2022-08-17 [?] CRAN (R 4.2.1)\n P recipes      * 1.0.1   2022-07-07 [?] CRAN (R 4.2.1)\n P rsample      * 1.0.0   2022-06-24 [?] CRAN (R 4.2.1)\n P scales       * 1.2.1   2022-08-20 [?] CRAN (R 4.2.1)\n P sessioninfo  * 1.2.2   2021-12-06 [?] CRAN (R 4.2.1)\n P stringr      * 1.4.1   2022-08-20 [?] CRAN (R 4.2.1)\n P tibble       * 3.1.8   2022-07-22 [?] CRAN (R 4.2.1)\n P tidymodels   * 1.0.0   2022-07-13 [?] CRAN (R 4.2.1)\n P tidyr        * 1.2.0   2022-02-01 [?] CRAN (R 4.2.1)\n P tidyverse    * 1.3.2   2022-07-18 [?] CRAN (R 4.2.1)\n P tune         * 1.0.0   2022-07-07 [?] CRAN (R 4.2.1)\n P vip          * 0.3.2   2020-12-17 [?] CRAN (R 4.0.5)\n P workflows    * 1.0.0   2022-07-05 [?] CRAN (R 4.2.1)\n P workflowsets * 1.0.0   2022-07-12 [?] CRAN (R 4.2.1)\n P yardstick    * 1.0.0   2022-06-06 [?] CRAN (R 4.2.1)\n\n [1] C:/Users/David Zoller/AppData/Local/Temp/RtmpE9tHQu/renv-library-30081bca49\n [2] C:/Users/David Zoller/Documents/datadavidz.github.io/renv/library/R-4.2/x86_64-w64-mingw32\n [3] C:/Program Files/R/R-4.2.0/library\n\n P ── Loaded and on-disk path mismatch.\n\n──────────────────────────────────────────────────────────────────────────────"
  },
  {
    "objectID": "posts/2022-09-24_ConcreteXGB/2022-09-24_ConcreteXGB.html",
    "href": "posts/2022-09-24_ConcreteXGB/2022-09-24_ConcreteXGB.html",
    "title": "Prediction of Concrete Strength using XGBoost",
    "section": "",
    "text": "A gradient boosting model to predict the compressive strength of concrete was built using a tidymodels approach.\nIn this post, we will begin to use machine learning techniques for predicting compressive strength of formulations using the concrete dataset. In a previous post, we created a model using a conventional material modeling approach which resulted in an R2 of 0.78. Here we will use an XGBoost model to predict compressive strength and compare the results with a conventional material model."
  },
  {
    "objectID": "posts/2022-09-24_ConcreteXGB/2022-09-24_ConcreteXGB.html#load-libraries-and-data",
    "href": "posts/2022-09-24_ConcreteXGB/2022-09-24_ConcreteXGB.html#load-libraries-and-data",
    "title": "Prediction of Concrete Strength using XGBoost",
    "section": "Load libraries and data",
    "text": "Load libraries and data\n\nlibrary(readxl)\nlibrary(tidyverse)\nlibrary(ragg)\n\n#Tidymodels\nlibrary(tidymodels)\nlibrary(xgboost)\nlibrary(vip)\n\n\nfilename <- \"Concrete_Data.xls\"\n\nfolder <- \"../data/\"\nnumberCols <- 9 #total number of columns in spreadsheet\n\ncolTypes <- rep(\"numeric\", numberCols)\nconcrete_tbl <- read_excel(path = paste0(folder, filename), col_types = colTypes)\n\nconcrete_tbl <- concrete_tbl %>%\n  rename(cement = starts_with(\"Cement\")) %>%\n  rename(blast_furnace_slag = starts_with(\"Blast\")) %>%\n  rename(fly_ash = starts_with(\"Fly Ash\")) %>%\n  rename(water = starts_with(\"Water\")) %>%\n  rename(superplasticizer = starts_with(\"Super\")) %>%\n  rename(coarse_aggregate = starts_with(\"Coarse\")) %>%\n  rename(fine_aggregate = starts_with(\"Fine\")) %>%\n  rename(age = starts_with(\"Age\")) %>%\n  rename(compressive_strength = starts_with(\"Concrete\"))"
  },
  {
    "objectID": "posts/2022-09-24_ConcreteXGB/2022-09-24_ConcreteXGB.html#stage-1-model-tuning",
    "href": "posts/2022-09-24_ConcreteXGB/2022-09-24_ConcreteXGB.html#stage-1-model-tuning",
    "title": "Prediction of Concrete Strength using XGBoost",
    "section": "Stage 1: Model Tuning",
    "text": "Stage 1: Model Tuning\nInitial splitting of the dataset into Training and Test Dataset Here we use the rsample package to create an 80/20 split. The concrete dataset contains 1030 formulations of which 825 are randomly assigned to training and 205 are randomly assigned to testing.\n\nset.seed(123)\nconcrete_split <- initial_split(concrete_tbl, prop = 0.80)\nconcrete_train <- training(concrete_split)\nconcrete_test <- testing(concrete_split)\n\nPreprocessing is accomplished by using the recipe package. The recipe provides the steps required to transform our raw data into a dataset suitable for machine learning. The Concrete dataset actually doesn’t require much reformatting. The major issue was the lengthy column names which was addressed immediately after the dataset was imported. The dataset contained all numerical values and no missing data. Initially we will just center and scale the predictors before sending to the nnet model.\n\nconcrete_rec <- recipe(compressive_strength ~ ., data = concrete_train) %>%\n  step_center(all_predictors()) %>%\n  step_scale(all_predictors())\n\nconcrete_rec\n\nRecipe\n\nInputs:\n\n      role #variables\n   outcome          1\n predictor          8\n\nOperations:\n\nCentering for all_predictors()\nScaling for all_predictors()\n\n\nCross validation folds are created in order to assess the performance of the model parameters. Here we use 5-fold cross validation to create splits from our training dataset and also using the preprocessing pipeline specified above.\n\nset.seed(234)\nconcrete_folds <- vfold_cv(concrete_train, v = 5)\n\nconcrete_folds\n\n#  5-fold cross-validation \n# A tibble: 5 × 2\n  splits            id   \n  <list>            <chr>\n1 <split [659/165]> Fold1\n2 <split [659/165]> Fold2\n3 <split [659/165]> Fold3\n4 <split [659/165]> Fold4\n5 <split [660/164]> Fold5\n\n\nModel specifications are created using the parsnip package. Here we specify a boosted tree model using the XGBoost engine. Notice that the min n, tree depth and learn rate parameters have been specified to be tuned.\n\nxgboost_spec = boost_tree(\n  mode = \"regression\",\n  trees = 1000,\n  min_n = tune(),\n  tree_depth = tune(),\n  learn_rate = tune()\n) %>%\n  set_engine(\"xgboost\", objective = \"reg:squarederror\") %>%\n  set_mode(\"regression\")\n\nxgboost_spec\n\nBoosted Tree Model Specification (regression)\n\nMain Arguments:\n  trees = 1000\n  min_n = tune()\n  tree_depth = tune()\n  learn_rate = tune()\n\nEngine-Specific Arguments:\n  objective = reg:squarederror\n\nComputational engine: xgboost \n\n\nGrid specifications sets up a variety of parameter values used with our model to find which combination yields the lowest prediction error (or best accuracy). Here we specify the parameter ranges and grid function using the dials package.\n\nset.seed(345)\nxgboost_grid <- grid_max_entropy(min_n(), tree_depth(), learn_rate(), size = 30)\n\nxgboost_grid\n\n# A tibble: 30 × 3\n   min_n tree_depth learn_rate\n   <int>      <int>      <dbl>\n 1     6          1   8.78e- 7\n 2    38          3   9.89e- 8\n 3    30          1   1.18e- 2\n 4    23          5   3.77e- 7\n 5    37         15   1.07e-10\n 6    16          6   3.19e- 4\n 7    12          7   1.34e-10\n 8    40         10   9.93e- 8\n 9     2         15   2.08e- 8\n10    36         10   2.64e- 2\n# … with 20 more rows\n\n\nDefine a workflow for the tuning process\n\nconcrete_wf <- workflow() %>%\n  add_recipe(concrete_rec) %>%\n  add_model(xgboost_spec)\n\nHyperparameter tuning is now performed using the tune_grid() function from the tune package. Here we specific the formula, model, resamples, grid and metrics. The metrics come from the yardstick package. For regression problems, we can specify multiple metrics such as mae, mape, rmse and rsq into a metric_set().\n\ndoParallel::registerDoParallel()\n\nset.seed(456)\n\nbegin <- Sys.time()\n\nxgboost_res <- tune_grid(\n  concrete_wf,\n  resamples = concrete_folds,\n  grid = xgboost_grid,\n  metrics = metric_set(rmse, rsq, mae),\n  control = control_grid(save_pred = TRUE)\n)\n\nend1 <- Sys.time() - begin"
  },
  {
    "objectID": "posts/2022-09-24_ConcreteXGB/2022-09-24_ConcreteXGB.html#stage-2-compare-and-select-the-best-model",
    "href": "posts/2022-09-24_ConcreteXGB/2022-09-24_ConcreteXGB.html#stage-2-compare-and-select-the-best-model",
    "title": "Prediction of Concrete Strength using XGBoost",
    "section": "Stage 2: Compare and Select the Best Model",
    "text": "Stage 2: Compare and Select the Best Model\nIdentify the best hyperparameter values using the show_best() function.\n\nxgboost_res %>% show_best(\"mae\", n = 5)\n\n# A tibble: 5 × 9\n  min_n tree_depth learn_rate .metric .estimator  mean     n std_err .config    \n  <int>      <int>      <dbl> <chr>   <chr>      <dbl> <int>   <dbl> <chr>      \n1    18         10    0.0265  mae     standard    2.98     5  0.103  Preprocess…\n2    28          7    0.0302  mae     standard    3.10     5  0.103  Preprocess…\n3    36         10    0.0264  mae     standard    3.14     5  0.0829 Preprocess…\n4    19          2    0.0904  mae     standard    3.37     5  0.110  Preprocess…\n5    24         14    0.00824 mae     standard    3.46     5  0.0668 Preprocess…\n\n\nVisualize the tuning results\n\n\n\n\n\nSelect the best parameters based on the lowest mean absolute error.\n\nparams_xgboost_best <- xgboost_res %>% select_best(\"mae\")\nparams_xgboost_best\n\n# A tibble: 1 × 4\n  min_n tree_depth learn_rate .config              \n  <int>      <int>      <dbl> <chr>                \n1    18         10     0.0265 Preprocessor1_Model14\n\n\nFinalize workflow with the best model parameters\n\nfinal_xgboost <- finalize_workflow(concrete_wf, params_xgboost_best)\n\nfinal_xgboost\n\n══ Workflow ════════════════════════════════════════════════════════════════════\nPreprocessor: Recipe\nModel: boost_tree()\n\n── Preprocessor ────────────────────────────────────────────────────────────────\n2 Recipe Steps\n\n• step_center()\n• step_scale()\n\n── Model ───────────────────────────────────────────────────────────────────────\nBoosted Tree Model Specification (regression)\n\nMain Arguments:\n  trees = 1000\n  min_n = 18\n  tree_depth = 10\n  learn_rate = 0.0264752492619167\n\nEngine-Specific Arguments:\n  objective = reg:squarederror\n\nComputational engine: xgboost \n\n\nWhich Features are most important?\n\nfinal_xgboost %>%\n  fit(data = concrete_train) %>%\n  extract_fit_parsnip() %>%\n  vip(aesthetics = list(fill = \"steelblue\")) +\n  labs(title = \"XGBoost Model Importance - Compressive Strength (MPa) Prediction\")\n\n\n\n\n\nStage 3: Train Final Model\nFit model on train and evaluate on test.\n\nfinal_res <- last_fit(final_xgboost, concrete_split, metrics = metric_set(rmse, rsq, mae))\n\nAssess final model performance metrics.\n\ncollect_metrics(final_res)\n\n# A tibble: 3 × 4\n  .metric .estimator .estimate .config             \n  <chr>   <chr>          <dbl> <chr>               \n1 rmse    standard       4.33  Preprocessor1_Model1\n2 rsq     standard       0.945 Preprocessor1_Model1\n3 mae     standard       2.69  Preprocessor1_Model1\n\n\nVisualize actual vs. predicted compressive strength for final model."
  },
  {
    "objectID": "posts/2022-09-24_ConcreteXGB/2022-09-24_ConcreteXGB.html#summary",
    "href": "posts/2022-09-24_ConcreteXGB/2022-09-24_ConcreteXGB.html#summary",
    "title": "Prediction of Concrete Strength using XGBoost",
    "section": "Summary",
    "text": "Summary\nThe XGBoost model to predict the compressive strength of concrete performed better (RMSE = 4.3 MPa, R2 = 0.945) than a conventional materials model(RMSE = 7.9 MPa, R2 = 0.78).\n\n\n\n\n\n\nExpand for Session Info\n\n\n\n\n\n\n\n─ Session info ───────────────────────────────────────────────────────────────\n setting  value\n version  R version 4.2.0 (2022-04-22 ucrt)\n os       Windows 10 x64 (build 19043)\n system   x86_64, mingw32\n ui       RTerm\n language (EN)\n collate  English_United States.utf8\n ctype    English_United States.utf8\n tz       America/Chicago\n date     2022-09-02\n pandoc   2.18 @ C:/Program Files/RStudio/bin/quarto/bin/tools/ (via rmarkdown)\n quarto   1.0.36 @ C:\\\\PROGRA~1\\\\RStudio\\\\bin\\\\quarto\\\\bin\\\\quarto.cmd\n\n─ Packages ───────────────────────────────────────────────────────────────────\n ! package      * version date (UTC) lib source\n P broom        * 1.0.1   2022-08-29 [?] CRAN (R 4.2.1)\n P dials        * 1.0.0   2022-06-14 [?] CRAN (R 4.2.1)\n P dplyr        * 1.0.10  2022-09-01 [?] CRAN (R 4.2.0)\n P forcats      * 0.5.2   2022-08-19 [?] CRAN (R 4.2.1)\n P ggplot2      * 3.3.6   2022-05-03 [?] CRAN (R 4.2.1)\n P infer        * 1.0.3   2022-08-22 [?] CRAN (R 4.2.1)\n P modeldata    * 1.0.0   2022-07-01 [?] CRAN (R 4.2.1)\n P parsnip      * 1.0.0   2022-06-16 [?] CRAN (R 4.2.1)\n P purrr        * 0.3.4   2020-04-17 [?] CRAN (R 4.2.1)\n P ragg         * 1.2.2   2022-02-21 [?] CRAN (R 4.2.1)\n P readr        * 2.1.2   2022-01-30 [?] CRAN (R 4.2.1)\n P readxl       * 1.4.1   2022-08-17 [?] CRAN (R 4.2.1)\n P recipes      * 1.0.1   2022-07-07 [?] CRAN (R 4.2.1)\n P rsample      * 1.0.0   2022-06-24 [?] CRAN (R 4.2.1)\n P scales       * 1.2.1   2022-08-20 [?] CRAN (R 4.2.1)\n P sessioninfo  * 1.2.2   2021-12-06 [?] CRAN (R 4.2.1)\n P stringr      * 1.4.1   2022-08-20 [?] CRAN (R 4.2.1)\n P tibble       * 3.1.8   2022-07-22 [?] CRAN (R 4.2.1)\n P tidymodels   * 1.0.0   2022-07-13 [?] CRAN (R 4.2.1)\n P tidyr        * 1.2.0   2022-02-01 [?] CRAN (R 4.2.1)\n P tidyverse    * 1.3.2   2022-07-18 [?] CRAN (R 4.2.1)\n P tune         * 1.0.0   2022-07-07 [?] CRAN (R 4.2.1)\n P vip          * 0.3.2   2020-12-17 [?] CRAN (R 4.0.5)\n P workflows    * 1.0.0   2022-07-05 [?] CRAN (R 4.2.1)\n P workflowsets * 1.0.0   2022-07-12 [?] CRAN (R 4.2.1)\n P xgboost      * 1.6.0.1 2022-04-16 [?] CRAN (R 4.2.1)\n P yardstick    * 1.0.0   2022-06-06 [?] CRAN (R 4.2.1)\n\n [1] C:/Users/David Zoller/AppData/Local/Temp/RtmpquYv5l/renv-library-21f850a61f6a\n [2] C:/Users/David Zoller/Documents/datadavidz.github.io/renv/library/R-4.2/x86_64-w64-mingw32\n [3] C:/Program Files/R/R-4.2.0/library\n\n P ── Loaded and on-disk path mismatch.\n\n──────────────────────────────────────────────────────────────────────────────"
  },
  {
    "objectID": "posts/2022-10-01_ConcreteRF/2022-10-01_ConcreteRF.html",
    "href": "posts/2022-10-01_ConcreteRF/2022-10-01_ConcreteRF.html",
    "title": "Random Forest Model for Concrete Dataset",
    "section": "",
    "text": "A predictive model for compressive strength of concrete is built using a random forest algorithm.\nIn this post, we will begin to use machine learning techniques for predicting compressive strength of formulations using the concrete dataset. In a previous post, we created a model using a conventional material modeling approach which resulted in an R2 of 0.78. Here we will use a random forest model to predict compressive strength and compare the results with the conventional material model."
  },
  {
    "objectID": "posts/2022-10-01_ConcreteRF/2022-10-01_ConcreteRF.html#load-libraries-and-data",
    "href": "posts/2022-10-01_ConcreteRF/2022-10-01_ConcreteRF.html#load-libraries-and-data",
    "title": "Random Forest Model for Concrete Dataset",
    "section": "Load libraries and data",
    "text": "Load libraries and data\n\nlibrary(readxl)\nlibrary(tidyverse)\n\n#Tidymodels\nlibrary(tidymodels)\nlibrary(ranger)\nlibrary(vip)\n\n\nfilename <- \"Concrete_Data.xls\"\n\nfolder <- \"../data/\"\nnumberCols <- 9 #total number of columns in spreadsheet\n\ncolTypes <- rep(\"numeric\", numberCols)\nconcrete_tbl <- read_excel(path = paste0(folder, filename), col_types = colTypes)\n\nconcrete_tbl <- concrete_tbl %>%\n  rename(cement = starts_with(\"Cement\")) %>%\n  rename(blast_furnace_slag = starts_with(\"Blast\")) %>%\n  rename(fly_ash = starts_with(\"Fly Ash\")) %>%\n  rename(water = starts_with(\"Water\")) %>%\n  rename(superplasticizer = starts_with(\"Super\")) %>%\n  rename(coarse_aggregate = starts_with(\"Coarse\")) %>%\n  rename(fine_aggregate = starts_with(\"Fine\")) %>%\n  rename(age = starts_with(\"Age\")) %>%\n  rename(compressive_strength = starts_with(\"Concrete\"))"
  },
  {
    "objectID": "posts/2022-10-01_ConcreteRF/2022-10-01_ConcreteRF.html#stage-1-model-tuning",
    "href": "posts/2022-10-01_ConcreteRF/2022-10-01_ConcreteRF.html#stage-1-model-tuning",
    "title": "Random Forest Model for Concrete Dataset",
    "section": "Stage 1: Model Tuning",
    "text": "Stage 1: Model Tuning\nInitial splitting of the dataset into Training and Test Dataset Here we use the rsample package to create an 80/20 split. The concrete dataset contains 1030 formulations of which 825 are randomly assigned to training and 205 are randomly assigned to testing.\n\nset.seed(123)\nconcrete_split <- initial_split(concrete_tbl, prop = 0.80)\nconcrete_train <- training(concrete_split)\nconcrete_test <- testing(concrete_split)\n\nPreprocessing is accomplished by using the recipe package. The recipe provides the steps required to transform our raw data into a dataset suitable for machine learning. The Concrete dataset actually doesn’t require much reformatting. The major issue was the lengthy column names which was addressed immediately after the dataset was imported. The dataset contained all numerical values and no missing data. Initially we will just center and scale the predictors before sending to the nnet model.\n\nconcrete_rec <- recipe(compressive_strength ~ ., data = concrete_train) %>%\n  step_center(all_predictors()) %>%\n  step_scale(all_predictors())\n\nconcrete_rec\n\nRecipe\n\nInputs:\n\n      role #variables\n   outcome          1\n predictor          8\n\nOperations:\n\nCentering for all_predictors()\nScaling for all_predictors()\n\n\nCross validation folds are created in order to assess the performance of the model parameters. Here we use 5-fold cross validation to create splits from our training dataset and also using the preprocessing pipeline specified above.\n\nset.seed(234)\nconcrete_folds <- vfold_cv(concrete_train, v = 5)\n\nconcrete_folds\n\n#  5-fold cross-validation \n# A tibble: 5 × 2\n  splits            id   \n  <list>            <chr>\n1 <split [659/165]> Fold1\n2 <split [659/165]> Fold2\n3 <split [659/165]> Fold3\n4 <split [659/165]> Fold4\n5 <split [660/164]> Fold5\n\n\nModel specifications are created using the parsnip package. Here we specify a random forest model using the ranger engine. Notice that the min n and mtry parameters have been specified to be tuned.\n\nrf_spec = rand_forest(\n  trees = 1000,\n  min_n = tune(),\n  mtry = tune()\n) %>%\n  set_engine(\"ranger\") %>%\n  set_mode(\"regression\")\n\nrf_spec\n\nRandom Forest Model Specification (regression)\n\nMain Arguments:\n  mtry = tune()\n  trees = 1000\n  min_n = tune()\n\nComputational engine: ranger \n\n\nGrid specifications sets up a variety of parameter values used with our model to find which combination yields the lowest prediction error (or best accuracy). Here we specify the parameter ranges and grid function using the dials package.\nSpecify the grid function (max entropy, hypercube etc.). Here we make a grid of 20 values using the grid_max_entropy() function in the dials package. Since there are just 2 tuning parameters in this case, we can visualize the grid selections. Note the penalty parameter is on the log base 10 scale by default. The dials package helps us make smarter choices for the critical tuning parameters.\n\nset.seed(345)\nrf_grid <- grid_max_entropy(min_n(), mtry(c(1L, 10L)), size = 20)\n\nrf_grid %>%\n  ggplot(aes(min_n, mtry)) +\n  geom_point(color = \"steelblue\", size = 3) +\n  #scale_x_log10() +\n  theme_light() +\n  labs(title = \"Max Entropy Grid\", x = \"min n\", y = \"mtry\")\n\n\n\n\nDefine a workflow for the tuning process\n\nconcrete_wf <- workflow() %>%\n  add_recipe(concrete_rec) %>%\n  add_model(rf_spec)\n\nHyperparameter tuning is now performed using the tune_grid() function from the tune package. Here we specific the formula, model, resamples, grid and metrics. The metrics come from the yardstick package. For regression problems, we can specify multiple metrics such as mae, mape, rmse and rsq into a metric_set().\n\ndoParallel::registerDoParallel()\n\nset.seed(456)\n\nbegin <- Sys.time()\n\nrf_res <- tune_grid(\n  concrete_wf,\n  resamples = concrete_folds,\n  grid = rf_grid,\n  metrics = metric_set(rmse, rsq, mae),\n  control = control_grid(save_pred = TRUE)\n)\n\nend1 <- Sys.time() - begin"
  },
  {
    "objectID": "posts/2022-10-01_ConcreteRF/2022-10-01_ConcreteRF.html#stage-2-compare-and-select-the-best-model",
    "href": "posts/2022-10-01_ConcreteRF/2022-10-01_ConcreteRF.html#stage-2-compare-and-select-the-best-model",
    "title": "Random Forest Model for Concrete Dataset",
    "section": "Stage 2: Compare and Select the Best Model",
    "text": "Stage 2: Compare and Select the Best Model\nIdentify the best hyperparameter values using the show_best() function.\n\nrf_res %>% show_best(\"mae\", n = 5)\n\n# A tibble: 5 × 8\n   mtry min_n .metric .estimator  mean     n std_err .config              \n  <int> <int> <chr>   <chr>      <dbl> <int>   <dbl> <chr>                \n1     7     2 mae     standard    3.67     5  0.0647 Preprocessor1_Model01\n2     5     4 mae     standard    3.73     5  0.0648 Preprocessor1_Model14\n3     9     6 mae     standard    3.79     5  0.0695 Preprocessor1_Model15\n4     6    10 mae     standard    3.96     5  0.0734 Preprocessor1_Model09\n5     2     6 mae     standard    4.36     5  0.105  Preprocessor1_Model16\n\n\nVisualize the tuning results\n\nautoplot(rf_res)\n\n\n\n\nSelect the best parameters based on the lowest mean absolute error.\n\nparams_rf_best <- rf_res %>% select_best(\"mae\")\nparams_rf_best\n\n# A tibble: 1 × 3\n   mtry min_n .config              \n  <int> <int> <chr>                \n1     7     2 Preprocessor1_Model01\n\n\nFinalize workflow with the best model parameters\n\nfinal_rf <- finalize_workflow(concrete_wf, params_rf_best)\n\nfinal_rf\n\n══ Workflow ════════════════════════════════════════════════════════════════════\nPreprocessor: Recipe\nModel: rand_forest()\n\n── Preprocessor ────────────────────────────────────────────────────────────────\n2 Recipe Steps\n\n• step_center()\n• step_scale()\n\n── Model ───────────────────────────────────────────────────────────────────────\nRandom Forest Model Specification (regression)\n\nMain Arguments:\n  mtry = 7\n  trees = 1000\n  min_n = 2\n\nComputational engine: ranger \n\n\nWhich Features are most important? For random forest, we are defining the importance measure as permutation which requires a new specification since including this calculation in the initial specification would slow down the tuning process.\n\nimp_spec <- rf_spec %>%\n  finalize_model(params_rf_best) %>%\n  set_engine(\"ranger\", importance = \"permutation\")\n\nworkflow() %>%\n  add_recipe(concrete_rec) %>%\n  add_model(imp_spec) %>%\n  fit(data = concrete_train) %>%\n  extract_fit_parsnip() %>%\n  vip(aesthetics = list(fill = \"steelblue\")) +\n  labs(title = \"Random Forest Model Importance - Compressive Strength (MPa) Prediction\")\n\n\n\n\n\nStage 3: Train Final Model\nFit model on train and evaluate on test.\n\nfinal_res <- last_fit(final_rf, concrete_split, metrics = metric_set(rmse, rsq, mae))\n\nAssess final model performance metrics.\n\ncollect_metrics(final_res)\n\n# A tibble: 3 × 4\n  .metric .estimator .estimate .config             \n  <chr>   <chr>          <dbl> <chr>               \n1 rmse    standard       5.07  Preprocessor1_Model1\n2 rsq     standard       0.929 Preprocessor1_Model1\n3 mae     standard       3.31  Preprocessor1_Model1\n\n\nVisualize actual vs. predicted compressive strength for final model.\n\ncollect_predictions(final_res) %>%\n  ggplot(aes(compressive_strength, .pred)) +\n  geom_abline(slope = 1, lty = 2, color = \"gray50\", alpha = 0.5) +\n  geom_point(alpha = 0.6, color = \"midnightblue\") +\n  ylim(0, NA) +\n  labs(title = \"Random Forest Model Performance for Concrete Dataset\", \n       x = \"Actual Compressive Strength (MPa)\", \n       y = \"Predicted Compressive Strength (MPa)\")"
  },
  {
    "objectID": "posts/2022-10-01_ConcreteRF/2022-10-01_ConcreteRF.html#summary",
    "href": "posts/2022-10-01_ConcreteRF/2022-10-01_ConcreteRF.html#summary",
    "title": "Random Forest Model for Concrete Dataset",
    "section": "Summary",
    "text": "Summary\nThe random forest model to predict the compressive strength of concrete performed better (RMSE = 5.0 MPa, R2 = 0.93) than a conventional materials model(RMSE = 7.9 MPa, R2 = 0.78) but not quite as good as the XGBoost model (RMSE = 4.3 MPa, R2 = 0.945).\n\n\n\n\n\n\nExpand for Session Info\n\n\n\n\n\n\n\n─ Session info ───────────────────────────────────────────────────────────────\n setting  value\n version  R version 4.2.0 (2022-04-22 ucrt)\n os       Windows 10 x64 (build 19043)\n system   x86_64, mingw32\n ui       RTerm\n language (EN)\n collate  English_United States.utf8\n ctype    English_United States.utf8\n tz       America/Chicago\n date     2022-09-02\n pandoc   2.18 @ C:/Program Files/RStudio/bin/quarto/bin/tools/ (via rmarkdown)\n quarto   1.0.36 @ C:\\\\PROGRA~1\\\\RStudio\\\\bin\\\\quarto\\\\bin\\\\quarto.cmd\n\n─ Packages ───────────────────────────────────────────────────────────────────\n ! package      * version date (UTC) lib source\n P broom        * 1.0.1   2022-08-29 [?] CRAN (R 4.2.1)\n P dials        * 1.0.0   2022-06-14 [?] CRAN (R 4.2.1)\n P dplyr        * 1.0.10  2022-09-01 [?] CRAN (R 4.2.0)\n P forcats      * 0.5.2   2022-08-19 [?] CRAN (R 4.2.1)\n P ggplot2      * 3.3.6   2022-05-03 [?] CRAN (R 4.2.1)\n P infer        * 1.0.3   2022-08-22 [?] CRAN (R 4.2.1)\n P modeldata    * 1.0.0   2022-07-01 [?] CRAN (R 4.2.1)\n P parsnip      * 1.0.0   2022-06-16 [?] CRAN (R 4.2.1)\n P purrr        * 0.3.4   2020-04-17 [?] CRAN (R 4.2.1)\n P ranger       * 0.14.1  2022-06-18 [?] CRAN (R 4.2.1)\n P readr        * 2.1.2   2022-01-30 [?] CRAN (R 4.2.1)\n P readxl       * 1.4.1   2022-08-17 [?] CRAN (R 4.2.1)\n P recipes      * 1.0.1   2022-07-07 [?] CRAN (R 4.2.1)\n P rsample      * 1.0.0   2022-06-24 [?] CRAN (R 4.2.1)\n P scales       * 1.2.1   2022-08-20 [?] CRAN (R 4.2.1)\n P sessioninfo  * 1.2.2   2021-12-06 [?] CRAN (R 4.2.1)\n P stringr      * 1.4.1   2022-08-20 [?] CRAN (R 4.2.1)\n P tibble       * 3.1.8   2022-07-22 [?] CRAN (R 4.2.1)\n P tidymodels   * 1.0.0   2022-07-13 [?] CRAN (R 4.2.1)\n P tidyr        * 1.2.0   2022-02-01 [?] CRAN (R 4.2.1)\n P tidyverse    * 1.3.2   2022-07-18 [?] CRAN (R 4.2.1)\n P tune         * 1.0.0   2022-07-07 [?] CRAN (R 4.2.1)\n P vip          * 0.3.2   2020-12-17 [?] CRAN (R 4.0.5)\n P workflows    * 1.0.0   2022-07-05 [?] CRAN (R 4.2.1)\n P workflowsets * 1.0.0   2022-07-12 [?] CRAN (R 4.2.1)\n P yardstick    * 1.0.0   2022-06-06 [?] CRAN (R 4.2.1)\n\n [1] C:/Users/David Zoller/AppData/Local/Temp/RtmpIPfqiD/renv-library-11c44d35eb2\n [2] C:/Users/David Zoller/Documents/datadavidz.github.io/renv/library/R-4.2/x86_64-w64-mingw32\n [3] C:/Program Files/R/R-4.2.0/library\n\n P ── Loaded and on-disk path mismatch.\n\n──────────────────────────────────────────────────────────────────────────────"
  },
  {
    "objectID": "posts/2022-10-07_ConcreteSummary/2022-10-07_ConcreteSummary.html",
    "href": "posts/2022-10-07_ConcreteSummary/2022-10-07_ConcreteSummary.html",
    "title": "Summary of Concrete Models",
    "section": "",
    "text": "A comparison of the predictive performance and speed for the different modeling approaches.\nSeveral models have been created to predict the compressive strength of high performance concrete based on the I-Cheng Yeh dataset. A conventional material model using a pre-determined transfer function which was fit to the data using a non-linear least squares approach. Four different models were created using machine learning algorithms, elastic net (glmnet), single-layer neural net (nnet), random forest (ranger) and boosted tree (xgboost), applied to the dataset."
  },
  {
    "objectID": "posts/2022-10-07_ConcreteSummary/2022-10-07_ConcreteSummary.html#load-libraries-and-data",
    "href": "posts/2022-10-07_ConcreteSummary/2022-10-07_ConcreteSummary.html#load-libraries-and-data",
    "title": "Summary of Concrete Models",
    "section": "Load libraries and data",
    "text": "Load libraries and data\n\n\nCode\nlibrary(knitr)\nlibrary(readxl)\nlibrary(tidyverse)\nlibrary(tidymodels)\n\n\n\n\nCode\nfilename <- \"Concrete_Data.xls\"\n\nfolder <- \"../data/\"\nnumberCols <- 9 #total number of columns in spreadsheet\n\ncolTypes <- rep(\"numeric\", numberCols)\nconcrete_tbl <- read_excel(path = paste0(folder, filename), col_types = colTypes)\n\nconcrete_tbl <- concrete_tbl %>%\n  rename(cement = starts_with(\"Cement\")) %>%\n  rename(blast_furnace_slag = starts_with(\"Blast\")) %>%\n  rename(fly_ash = starts_with(\"Fly Ash\")) %>%\n  rename(water = starts_with(\"Water\")) %>%\n  rename(superplasticizer = starts_with(\"Super\")) %>%\n  rename(coarse_aggregate = starts_with(\"Coarse\")) %>%\n  rename(fine_aggregate = starts_with(\"Fine\")) %>%\n  rename(age = starts_with(\"Age\")) %>%\n  rename(compressive_strength = starts_with(\"Concrete\"))"
  },
  {
    "objectID": "posts/2022-10-07_ConcreteSummary/2022-10-07_ConcreteSummary.html#predictive-accuracy",
    "href": "posts/2022-10-07_ConcreteSummary/2022-10-07_ConcreteSummary.html#predictive-accuracy",
    "title": "Summary of Concrete Models",
    "section": "Predictive Accuracy",
    "text": "Predictive Accuracy\nEach model performance was assessed by several metrics: R-squared (R2), Root Mean Square Error (RMSE) and Mean Absolute Error (MAE).\n\n\n\n\n\n\n\n\n\n\nmetric\nnls\nglm\nmlp\nrf\nxgboost\n\n\n\n\nrmse\n7.76\n11.37\n6.53\n5.08\n4.33\n\n\nrsq\n0.78\n0.62\n0.88\n0.93\n0.95\n\n\nmae\n5.95\n9.09\n4.94\n3.32\n2.69\n\n\n\n\n\nAs shown in the figure and table above, the random forest (rf) and boosted tree (xgboost) models showed a significant improvement in predictive capability as compared with the conventional modeling approach (nls). The xgboost model had an R2 of 0.95 compared to 0.78 for the nls model with similar improvements in root mean square error and mean absolute error. The glmnet model gave worse performance than the non-linear models."
  },
  {
    "objectID": "posts/2022-10-07_ConcreteSummary/2022-10-07_ConcreteSummary.html#benchmark-performance",
    "href": "posts/2022-10-07_ConcreteSummary/2022-10-07_ConcreteSummary.html#benchmark-performance",
    "title": "Summary of Concrete Models",
    "section": "Benchmark performance",
    "text": "Benchmark performance\nHere we load the final models for the different approaches for comparison of prediction time. In this case, the time to make predictions for 10,300 (10 times the original dataset) was determined as a benchmark.\n\n\nCode\n#load all the models\nconcrete_nls <- readRDS(\"../results/concrete_nls_model.rds\")\nconcrete_glm <- readRDS(\"../results/concrete_glm_model.rds\")\nconcrete_mlp <- readRDS(\"../results/concrete_mlp_model.rds\")\nconcrete_rf <- readRDS(\"../results/concrete_rf_model.rds\")\nconcrete_xgb <- readRDS(\"../results/concrete_xgb_model.rds\")\n\n\nCreate the prediction dataset using 10 times the original dataset for purpose of comparing very fast prediction times.\n\n\nCode\ntemp <- concrete_tbl %>% slice(rep(row_number(), 10))\n\n\nBenchmarking was performed in the following manner using Sys.time to capture the time before and after each set of model predictions.\n\n\nCode\nbegin <- Sys.time()\na_temp <- predict(concrete_nls, new_data = temp)\nend1 <- Sys.time()\n\nb_temp <- predict(concrete_glm, new_data = temp)\nend2 <- Sys.time()\n\nc_temp <- predict(concrete_mlp, new_data = temp)\nend3 <- Sys.time()\n\nd_temp <- predict(concrete_rf, new_data = temp)\nend4 <- Sys.time()\n\ne_temp <- predict(concrete_xgb, new_data = temp)\nend5 <- Sys.time()\n\n# print(end1 - begin)[[1]]\n# print(end2 - end1)[[1]]\n# print(end3 - end2)[[1]]\n# print(end4 - end3)[[1]]\n\n#rm(temp)\n\n\nAs shown in the figure and table below, the xgboost model was the slowest taking about 1 second to perform 10,300 predictions. For the example of making a prediction of compressive strength of concrete for a particular formulation, however, this amount of time is trivial and the increased accuracy would be preferred over a faster and less accurate model.\n\n\n\n\n\n\n\n\n\n\nModel\nTime (ms)\n\n\n\n\nnls\n2\n\n\nglm\n132\n\n\nmlp\n60\n\n\nrf\n488\n\n\nxgboost\n555"
  },
  {
    "objectID": "posts/2022-10-07_ConcreteSummary/2022-10-07_ConcreteSummary.html#summary",
    "href": "posts/2022-10-07_ConcreteSummary/2022-10-07_ConcreteSummary.html#summary",
    "title": "Summary of Concrete Models",
    "section": "Summary",
    "text": "Summary\nPrediction with the conventional model (nls) is about two orders of magnitude faster than the boosted tree model (xgboost). It should be noted that the random forest model is about 40% faster than the xgboost model, in this case, with similar predictive accuracy.\n\n\n\n\n\n\nExpand for Session Info\n\n\n\n\n\n\n\n─ Session info ───────────────────────────────────────────────────────────────\n setting  value\n version  R version 4.2.0 (2022-04-22 ucrt)\n os       Windows 10 x64 (build 19043)\n system   x86_64, mingw32\n ui       RTerm\n language (EN)\n collate  English_United States.utf8\n ctype    English_United States.utf8\n tz       America/Chicago\n date     2022-09-02\n pandoc   2.18 @ C:/Program Files/RStudio/bin/quarto/bin/tools/ (via rmarkdown)\n quarto   1.0.36 @ C:\\\\PROGRA~1\\\\RStudio\\\\bin\\\\quarto\\\\bin\\\\quarto.cmd\n\n─ Packages ───────────────────────────────────────────────────────────────────\n ! package      * version date (UTC) lib source\n P broom        * 1.0.1   2022-08-29 [?] CRAN (R 4.2.1)\n P dials        * 1.0.0   2022-06-14 [?] CRAN (R 4.2.1)\n P dplyr        * 1.0.10  2022-09-01 [?] CRAN (R 4.2.0)\n P forcats      * 0.5.2   2022-08-19 [?] CRAN (R 4.2.1)\n P ggplot2      * 3.3.6   2022-05-03 [?] CRAN (R 4.2.1)\n P infer        * 1.0.3   2022-08-22 [?] CRAN (R 4.2.1)\n P knitr        * 1.40    2022-08-24 [?] CRAN (R 4.2.1)\n P modeldata    * 1.0.0   2022-07-01 [?] CRAN (R 4.2.1)\n P parsnip      * 1.0.0   2022-06-16 [?] CRAN (R 4.2.1)\n P purrr        * 0.3.4   2020-04-17 [?] CRAN (R 4.2.1)\n P readr        * 2.1.2   2022-01-30 [?] CRAN (R 4.2.1)\n P readxl       * 1.4.1   2022-08-17 [?] CRAN (R 4.2.1)\n P recipes      * 1.0.1   2022-07-07 [?] CRAN (R 4.2.1)\n P rsample      * 1.0.0   2022-06-24 [?] CRAN (R 4.2.1)\n P scales       * 1.2.1   2022-08-20 [?] CRAN (R 4.2.1)\n P sessioninfo  * 1.2.2   2021-12-06 [?] CRAN (R 4.2.1)\n P stringr      * 1.4.1   2022-08-20 [?] CRAN (R 4.2.1)\n P tibble       * 3.1.8   2022-07-22 [?] CRAN (R 4.2.1)\n P tidymodels   * 1.0.0   2022-07-13 [?] CRAN (R 4.2.1)\n P tidyr        * 1.2.0   2022-02-01 [?] CRAN (R 4.2.1)\n P tidyverse    * 1.3.2   2022-07-18 [?] CRAN (R 4.2.1)\n P tune         * 1.0.0   2022-07-07 [?] CRAN (R 4.2.1)\n P workflows    * 1.0.0   2022-07-05 [?] CRAN (R 4.2.1)\n P workflowsets * 1.0.0   2022-07-12 [?] CRAN (R 4.2.1)\n P yardstick    * 1.0.0   2022-06-06 [?] CRAN (R 4.2.1)\n\n [1] C:/Users/David Zoller/AppData/Local/Temp/RtmpYhQbrp/renv-library-2ff468663bb8\n [2] C:/Users/David Zoller/Documents/datadavidz.github.io/renv/library/R-4.2/x86_64-w64-mingw32\n [3] C:/Program Files/R/R-4.2.0/library\n\n P ── Loaded and on-disk path mismatch.\n\n──────────────────────────────────────────────────────────────────────────────"
  },
  {
    "objectID": "posts/2022-09-03_ConcreteGLM/2022-09-03_ConcreteGLM.html#summary",
    "href": "posts/2022-09-03_ConcreteGLM/2022-09-03_ConcreteGLM.html#summary",
    "title": "GLM model for Concrete Strength",
    "section": "Summary",
    "text": "Summary\nThe regularized linear model had relatively poor predictive performance (RMSE = 11.4 MPa, R2 = 0.62). A non-linear, least squares model will be built with better model performance in the next post.\n\n\n\n\n\n\nExpand for Session Info\n\n\n\n\n\n\n\n─ Session info ───────────────────────────────────────────────────────────────\n setting  value\n version  R version 4.2.0 (2022-04-22 ucrt)\n os       Windows 10 x64 (build 19043)\n system   x86_64, mingw32\n ui       RTerm\n language (EN)\n collate  English_United States.utf8\n ctype    English_United States.utf8\n tz       America/Chicago\n date     2022-09-02\n pandoc   2.18 @ C:/Program Files/RStudio/bin/quarto/bin/tools/ (via rmarkdown)\n quarto   1.0.36 @ C:\\\\PROGRA~1\\\\RStudio\\\\bin\\\\quarto\\\\bin\\\\quarto.cmd\n\n─ Packages ───────────────────────────────────────────────────────────────────\n ! package      * version date (UTC) lib source\n P broom        * 1.0.1   2022-08-29 [?] CRAN (R 4.2.1)\n P dials        * 1.0.0   2022-06-14 [?] CRAN (R 4.2.1)\n P dplyr        * 1.0.10  2022-09-01 [?] CRAN (R 4.2.0)\n P forcats      * 0.5.2   2022-08-19 [?] CRAN (R 4.2.1)\n P ggplot2      * 3.3.6   2022-05-03 [?] CRAN (R 4.2.1)\n P glmnet       * 4.1-1   2021-02-21 [?] CRAN (R 4.0.5)\n P infer        * 1.0.3   2022-08-22 [?] CRAN (R 4.2.1)\n P Matrix       * 1.4-1   2022-03-23 [?] CRAN (R 4.2.0)\n P modeldata    * 1.0.0   2022-07-01 [?] CRAN (R 4.2.1)\n P parsnip      * 1.0.0   2022-06-16 [?] CRAN (R 4.2.1)\n P purrr        * 0.3.4   2020-04-17 [?] CRAN (R 4.2.1)\n P readr        * 2.1.2   2022-01-30 [?] CRAN (R 4.2.1)\n P readxl       * 1.4.1   2022-08-17 [?] CRAN (R 4.2.1)\n P recipes      * 1.0.1   2022-07-07 [?] CRAN (R 4.2.1)\n P rsample      * 1.0.0   2022-06-24 [?] CRAN (R 4.2.1)\n P scales       * 1.2.1   2022-08-20 [?] CRAN (R 4.2.1)\n P sessioninfo  * 1.2.2   2021-12-06 [?] CRAN (R 4.2.1)\n P stringr      * 1.4.1   2022-08-20 [?] CRAN (R 4.2.1)\n P tibble       * 3.1.8   2022-07-22 [?] CRAN (R 4.2.1)\n P tidymodels   * 1.0.0   2022-07-13 [?] CRAN (R 4.2.1)\n P tidyr        * 1.2.0   2022-02-01 [?] CRAN (R 4.2.1)\n P tidyverse    * 1.3.2   2022-07-18 [?] CRAN (R 4.2.1)\n P tune         * 1.0.0   2022-07-07 [?] CRAN (R 4.2.1)\n P vip          * 0.3.2   2020-12-17 [?] CRAN (R 4.0.5)\n P workflows    * 1.0.0   2022-07-05 [?] CRAN (R 4.2.1)\n P workflowsets * 1.0.0   2022-07-12 [?] CRAN (R 4.2.1)\n P yardstick    * 1.0.0   2022-06-06 [?] CRAN (R 4.2.1)\n\n [1] C:/Users/David Zoller/AppData/Local/Temp/Rtmpuo7gRW/renv-library-30a47499110a\n [2] C:/Users/David Zoller/Documents/datadavidz.github.io/renv/library/R-4.2/x86_64-w64-mingw32\n [3] C:/Program Files/R/R-4.2.0/library\n\n P ── Loaded and on-disk path mismatch.\n\n──────────────────────────────────────────────────────────────────────────────"
  },
  {
    "objectID": "posts/2022-09-10_ConcreteNLS/2022-09-10_ConcreteNLS.html#summary",
    "href": "posts/2022-09-10_ConcreteNLS/2022-09-10_ConcreteNLS.html#summary",
    "title": "Conventional Material Models for Concrete Dataset",
    "section": "Summary",
    "text": "Summary\nThe NLS model using water:binder was a better fit to the experimental data than the NLS model using water:cement. The R2 for the water:binder model was 0.78 compared to an R2 of 0.65 for the water:cement model.\n\n\n\n\n\n\nExpand for Session Info\n\n\n\n\n\n\n\n─ Session info ───────────────────────────────────────────────────────────────\n setting  value\n version  R version 4.2.0 (2022-04-22 ucrt)\n os       Windows 10 x64 (build 19043)\n system   x86_64, mingw32\n ui       RTerm\n language (EN)\n collate  English_United States.utf8\n ctype    English_United States.utf8\n tz       America/Chicago\n date     2022-09-02\n pandoc   2.18 @ C:/Program Files/RStudio/bin/quarto/bin/tools/ (via rmarkdown)\n quarto   1.0.36 @ C:\\\\PROGRA~1\\\\RStudio\\\\bin\\\\quarto\\\\bin\\\\quarto.cmd\n\n─ Packages ───────────────────────────────────────────────────────────────────\n ! package     * version date (UTC) lib source\n P dplyr       * 1.0.10  2022-09-01 [?] CRAN (R 4.2.0)\n P forcats     * 0.5.2   2022-08-19 [?] CRAN (R 4.2.1)\n P ggplot2     * 3.3.6   2022-05-03 [?] CRAN (R 4.2.1)\n P purrr       * 0.3.4   2020-04-17 [?] CRAN (R 4.2.1)\n P readr       * 2.1.2   2022-01-30 [?] CRAN (R 4.2.1)\n P readxl      * 1.4.1   2022-08-17 [?] CRAN (R 4.2.1)\n P sessioninfo * 1.2.2   2021-12-06 [?] CRAN (R 4.2.1)\n P stringr     * 1.4.1   2022-08-20 [?] CRAN (R 4.2.1)\n P tibble      * 3.1.8   2022-07-22 [?] CRAN (R 4.2.1)\n P tidyr       * 1.2.0   2022-02-01 [?] CRAN (R 4.2.1)\n P tidyverse   * 1.3.2   2022-07-18 [?] CRAN (R 4.2.1)\n\n [1] C:/Users/David Zoller/AppData/Local/Temp/RtmpIHRddC/renv-library-22e4303bbb\n [2] C:/Users/David Zoller/Documents/datadavidz.github.io/renv/library/R-4.2/x86_64-w64-mingw32\n [3] C:/Program Files/R/R-4.2.0/library\n\n P ── Loaded and on-disk path mismatch.\n\n──────────────────────────────────────────────────────────────────────────────"
  },
  {
    "objectID": "posts/2022-09-02_ReticulateSetup/2022-09-02_ReticulateSetup.html",
    "href": "posts/2022-09-02_ReticulateSetup/2022-09-02_ReticulateSetup.html",
    "title": "Python Setup in RStudio using reticulate",
    "section": "",
    "text": "My experience setting up Python using the reticulate package and the RStudio IDE.\nThis post is a summary of my initial exploration to set up Python to operate within RStudio. I was mostly interested in being able to apply machine learning algorithms from Sci-kit Learn but through the RStudio IDE. The possibility of switching between R and Python languages within an analysis was also intriguing to me. I was somewhat surprised that there doesn’t seem to be a consensus on how to set up Python with RStudio. I found many different recommendations as far as how to install Python and how to configure RStudio. I believe this lack of consensus is due to the feature being rather new and also there are many possible configurations depending on your usage and preferences.\nI started with a fresh installation of Python and I chose to use the Miniconda installer for Windows 64-bit. No problems here except the default installation directory contained my Windows user name which contained a space. The installer gave a warning and I instead chose to install in folder in root directory called miniconda. I then updated to the latest version of RStudio (2022.02.2) and installation of the reticulate package. The reticulate package is essential for using Python in the RStudio environment.\n\nLoad libraries\n\nlibrary(tidyverse)\nlibrary(reticulate)\n\nFrom here, I tried the setup recommended by Tiffany Timbers on her Github and further discussed in an R Ladies Baltimore video. This setup involved setting a system environment variable in the .Rprofile to specify which Python installation to use: Sys.setenv(RETICULATE_PYTHON = \"path_to_miniconda's_python\"). While this approach does in fact work, this system setting locks in the Python installation to use and you need to modify the .Rprofile in order to use a different conda python environment. The setup also mentioned to make configuration changes to Git Bash and RStudio terminal settings that I found were not necessary. The setup instructions were created in December 2020 so, perhaps, subsequent RStudio versions have made these terminal configurations obsolete.\nNext, I found the reticulate installation recommended by Matt Dancho on the Business Science website. This setup recommended setting up a conda environment using the following command: conda create -n py3.8 python=3.8 scikit-learn pandas numpy matplotlib. This command creates a new environment “py3.8”, installs Python 3.8 and installs the latest versions of scikit-learn, pandas, numpy and matplotlib.\n\n\nList the conda environments in RMarkdown\n\nconda_list()\n\n      name                                   python\n1     base                 C:\\\\miniconda/python.exe\n2 my-rdkit C:\\\\miniconda\\\\envs\\\\my-rdkit/python.exe\n3    py3.8    C:\\\\miniconda\\\\envs\\\\py3.8/python.exe\n\n\nYou can then set your conda environment using reticulate::use_condaenv.\n\nuse_condaenv(\"py3.8\", required = TRUE)\n\nThe conda environment used by reticulate can then be checked.\n\npy_config()\n\npython:         C:/miniconda/envs/py3.8/python.exe\nlibpython:      C:/miniconda/envs/py3.8/python38.dll\npythonhome:     C:/miniconda/envs/py3.8\nversion:        3.8.13 | packaged by conda-forge | (default, Mar 25 2022, 05:59:45) [MSC v.1929 64 bit (AMD64)]\nArchitecture:   64bit\nnumpy:          C:/miniconda/envs/py3.8/Lib/site-packages/numpy\nnumpy_version:  1.22.4\n\nNOTE: Python version was forced by RETICULATE_PYTHON\n\n\n\n\nTest 1: Is Python Working?\n\n1 + 1\n\n2\n\n\nNote that here we are using a Python code block in Rmarkdown.\n\n\nTest 2: Numpy and Pandas\n\nimport numpy as np\nimport pandas as pd\n\nUse numpy to create a sequence of numbers in an array\n\nnp.arange(1,10)\n\narray([1, 2, 3, 4, 5, 6, 7, 8, 9])\n\n\nUse pandas to create a dataframe\n\n# Make a sequence in a data frame using dict format\ndf = pd.DataFrame(data = {\"sequence\":np.arange(1,20,.01)})\n\n# Use assign (mutate) equivalent to calculate the np.sin() of the series\ndf = df.assign(value=np.sin(df[\"sequence\"]))\n\ndf\n\n      sequence     value\n0         1.00  0.841471\n1         1.01  0.846832\n2         1.02  0.852108\n3         1.03  0.857299\n4         1.04  0.862404\n...        ...       ...\n1895     19.95  0.891409\n1896     19.96  0.895896\n1897     19.97  0.900294\n1898     19.98  0.904602\n1899     19.99  0.908819\n\n[1900 rows x 2 columns]\n\n\n\n\nTest #3: Generate a plot using Matplotlib\n\nimport matplotlib as plt\n\ndf.plot(x=\"sequence\", y = \"value\", title = \"Matplotlib\")\n\n\n\n\n\n\nTest #4: Build a model using Sci-kit Learn\n\nfrom sklearn.ensemble import RandomForestClassifier\n\nclf = RandomForestClassifier(random_state=0)\n\nX = [[ 1,  2,  3],  # 2 samples, 3 features\n     [11, 12, 13]]\n\ny = [0, 1]  # classes of each sample\n\nclf.fit(X, y)\n\nRandomForestClassifier(random_state=0)In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.RandomForestClassifierRandomForestClassifier(random_state=0)\n\n\n\nclf.predict(X)  # predict classes of the training data\n\narray([0, 1])\n\n\n\n\nTip from Business Science post - 4 Conda Terminal Commands\nAt some point you will need to create, modify, add more packages to your Conda Environment(s). Here are 4 useful commands:\n\nRun conda env list to list the available conda environments\nRun conda activate <env_name> to activate a conda environment\nRun conda update --all to update all python packages in a conda environment.\nRun conda install <package_name> to install a new package\n\n\n\nSummary\nI found the approach recommended in the post by Matt Dancho was more straightforward and I haven’t found any downside yet. I like the flexibilty to change the conda environment for each analysis (Rmarkdown file) rather than adjusting the .Rprofile setting and rebooting R each time for the change to take effect. I will continue to update this post as I learn more tips and tricks for mixing R and Python code in Rmarkdown using the RStudio IDE.\n\n\n\n\n\n\nExpand for Session Info\n\n\n\n\n\n\n\n─ Session info ───────────────────────────────────────────────────────────────\n setting  value\n version  R version 4.2.0 (2022-04-22 ucrt)\n os       Windows 10 x64 (build 19043)\n system   x86_64, mingw32\n ui       RTerm\n language (EN)\n collate  English_United States.utf8\n ctype    English_United States.utf8\n tz       America/Chicago\n date     2022-09-02\n pandoc   2.18 @ C:/Program Files/RStudio/bin/quarto/bin/tools/ (via rmarkdown)\n quarto   1.0.36 @ C:\\\\PROGRA~1\\\\RStudio\\\\bin\\\\quarto\\\\bin\\\\quarto.cmd\n\n─ Packages ───────────────────────────────────────────────────────────────────\n ! package     * version date (UTC) lib source\n P dplyr       * 1.0.10  2022-09-01 [?] CRAN (R 4.2.0)\n P forcats     * 0.5.2   2022-08-19 [?] CRAN (R 4.2.1)\n P ggplot2     * 3.3.6   2022-05-03 [?] CRAN (R 4.2.1)\n P purrr       * 0.3.4   2020-04-17 [?] CRAN (R 4.2.1)\n P readr       * 2.1.2   2022-01-30 [?] CRAN (R 4.2.1)\n P reticulate  * 1.26    2022-08-31 [?] CRAN (R 4.2.1)\n P sessioninfo * 1.2.2   2021-12-06 [?] CRAN (R 4.2.1)\n P stringr     * 1.4.1   2022-08-20 [?] CRAN (R 4.2.1)\n P tibble      * 3.1.8   2022-07-22 [?] CRAN (R 4.2.1)\n P tidyr       * 1.2.0   2022-02-01 [?] CRAN (R 4.2.1)\n P tidyverse   * 1.3.2   2022-07-18 [?] CRAN (R 4.2.1)\n\n [1] C:/Users/David Zoller/AppData/Local/Temp/Rtmpm0ubzp/renv-library-3b9c661d2710\n [2] C:/Users/David Zoller/Documents/datadavidz.github.io/renv/library/R-4.2/x86_64-w64-mingw32\n [3] C:/Program Files/R/R-4.2.0/library\n\n P ── Loaded and on-disk path mismatch.\n\n─ Python configuration ───────────────────────────────────────────────────────\n python:         C:/miniconda/envs/py3.8/python.exe\n libpython:      C:/miniconda/envs/py3.8/python38.dll\n pythonhome:     C:/miniconda/envs/py3.8\n version:        3.8.13 | packaged by conda-forge | (default, Mar 25 2022, 05:59:45) [MSC v.1929 64 bit (AMD64)]\n Architecture:   64bit\n numpy:          C:/miniconda/envs/py3.8/Lib/site-packages/numpy\n numpy_version:  1.22.4\n \n NOTE: Python version was forced by RETICULATE_PYTHON\n\n──────────────────────────────────────────────────────────────────────────────"
  },
  {
    "objectID": "posts/2022-10-13_ConcreteGP/2022-10-13_ConcreteGP.html",
    "href": "posts/2022-10-13_ConcreteGP/2022-10-13_ConcreteGP.html",
    "title": "Gaussian Process Model for the Concrete Dataset",
    "section": "",
    "text": "A GP model to predict the compressive strength of concrete is built using R and Python.\nThis post shares my first analysis of the Concrete dataset using a Gaussian Process modeling approach. I was interested in Gaussian Process models due to the possibility of building a non-linear regression model which fits the dataset well and allows for predictions on new data along with the uncertainty in that prediction. I have previously analyzed this dataset using a variety of machine learning approaches which allows for a good comparison in prediction performance.\nThe analysis combines R and Python as I wanted to reuse some of the data cleaning from the previous analyses written in R while the Gaussian Process model was built using Python. The most relevant articles I could find on Gaussian Process modeling contained examples in Python so I decided to use a similar approach. In this post, I am using the GaussianProcessRegressor model in the Sci-Kit Learn package to build the model. An RStudio blog was written in 2019 in R using tfprobability package on the same dataset but, honestly, I found it difficult to follow and the modeling results (MSE) was higher than my sklearn model."
  },
  {
    "objectID": "posts/2022-10-13_ConcreteGP/2022-10-13_ConcreteGP.html#evaluating-the-gp-model-predictions-for-the-test-data",
    "href": "posts/2022-10-13_ConcreteGP/2022-10-13_ConcreteGP.html#evaluating-the-gp-model-predictions-for-the-test-data",
    "title": "Gaussian Process Model for the Concrete Dataset",
    "section": "Evaluating the GP model predictions for the test data",
    "text": "Evaluating the GP model predictions for the test data\nYou need to scale the test data before prediction using the same scaling used on the training dataset.\n\nX_test_scale = scaler.transform(X_test)\ny_pred_te_scale, y_pred_te_std_scale = gp_model.predict(X_test_scale, return_std=True)\ny_pred_te = target_scaler.inverse_transform(y_pred_te_scale.reshape(-1,1))\ny_pred_te_std = y_pred_te_std_scale * target_scaler.scale_\n\ntpred_gp = metrics.r2_score(y_test, y_pred_te)\n\ntest_metrics = [[\"Rsq\", metrics.r2_score(y_test, y_pred_te)], [\"Adjusted RSq\", 1 - (1-metrics.r2_score(y_test, y_pred_te))*(len(y_test)-1)/(len(y_test)-X_test.shape[1]-1)], [\"MAE\", metrics.mean_absolute_error(y_test, y_pred_te)], [\"MSE\", metrics.mean_squared_error(y_test, y_pred_te)], [\"RMSE\", np.sqrt(metrics.mean_squared_error(y_test, y_pred_te))]]\n\ntest_metrics_df = pd.DataFrame(test_metrics, columns = [\"metric\", \"value\"])\nprint(test_metrics_df)\n\n         metric      value\n0           Rsq   0.891769\n1  Adjusted RSq   0.889621\n2           MAE   4.019690\n3           MSE  29.627775\n4          RMSE   5.443140\n\n\nThe model performance was a bit worse for the testing data as compared to the training data. I believe one reason is that cross-validation was not used and the model is overfitting the training data. One of the advantages of the Gaussian Process model is the estimation of uncertainty in the prediction. In the figure below, the predicted vs. measured compressive strengths for the test dataset are displayed along with error bars for +/- 1 standard deviation.\n\npred_test <- tibble(y_test = py$y_test, y_pred_te = as.vector(py$y_pred_te), y_pred_te_std = py$y_pred_te_std)\n\nggplot(data = pred_test, aes(x = y_test, y = y_pred_te)) +\n  geom_point() +\n  geom_errorbar(aes(ymin = y_pred_te - y_pred_te_std, ymax = y_pred_te + y_pred_te_std)) +\n  geom_smooth(method = \"lm\") +\n  labs(title = \"Gaussian Process Model: Predicted vs. Measured for Testing Data\",\n       x = \"Actual Compressive Strength (MPa)\",\n       y = \"Predicted Compressive Strength (MPa)\") +\n  theme_light()\n\n`geom_smooth()` using formula 'y ~ x'"
  },
  {
    "objectID": "posts/2022-10-13_ConcreteGP/2022-10-13_ConcreteGP.html#summary",
    "href": "posts/2022-10-13_ConcreteGP/2022-10-13_ConcreteGP.html#summary",
    "title": "Gaussian Process Model for the Concrete Dataset",
    "section": "Summary",
    "text": "Summary\nA Gaussian process model has been built for the concrete dataset. The predictive performance of this model was lower than for random forest and xgboost models (GP R2 = 0.89 vs. RF R2 = 0.94). The main advantage of the Gaussian Process model is the calculation of prediction error which can be very helpful in assessing confidence in future predictions.\n\n\n\n\n\n\nExpand for Session Info\n\n\n\n\n\n\n\n─ Session info ───────────────────────────────────────────────────────────────\n setting  value\n version  R version 4.2.0 (2022-04-22 ucrt)\n os       Windows 10 x64 (build 19043)\n system   x86_64, mingw32\n ui       RTerm\n language (EN)\n collate  English_United States.utf8\n ctype    English_United States.utf8\n tz       America/Chicago\n date     2022-09-02\n pandoc   2.18 @ C:/Program Files/RStudio/bin/quarto/bin/tools/ (via rmarkdown)\n quarto   1.0.36 @ C:\\\\PROGRA~1\\\\RStudio\\\\bin\\\\quarto\\\\bin\\\\quarto.cmd\n\n─ Packages ───────────────────────────────────────────────────────────────────\n ! package     * version date (UTC) lib source\n P dplyr       * 1.0.10  2022-09-01 [?] CRAN (R 4.2.0)\n P forcats     * 0.5.2   2022-08-19 [?] CRAN (R 4.2.1)\n P ggplot2     * 3.3.6   2022-05-03 [?] CRAN (R 4.2.1)\n P purrr       * 0.3.4   2020-04-17 [?] CRAN (R 4.2.1)\n P readr       * 2.1.2   2022-01-30 [?] CRAN (R 4.2.1)\n P readxl      * 1.4.1   2022-08-17 [?] CRAN (R 4.2.1)\n P reticulate  * 1.26    2022-08-31 [?] CRAN (R 4.2.1)\n P sessioninfo * 1.2.2   2021-12-06 [?] CRAN (R 4.2.1)\n P stringr     * 1.4.1   2022-08-20 [?] CRAN (R 4.2.1)\n P tibble      * 3.1.8   2022-07-22 [?] CRAN (R 4.2.1)\n P tidyr       * 1.2.0   2022-02-01 [?] CRAN (R 4.2.1)\n P tidyverse   * 1.3.2   2022-07-18 [?] CRAN (R 4.2.1)\n\n [1] C:/Users/David Zoller/AppData/Local/Temp/RtmpQ5SNYG/renv-library-35903dd013ae\n [2] C:/Users/David Zoller/Documents/datadavidz.github.io/renv/library/R-4.2/x86_64-w64-mingw32\n [3] C:/Program Files/R/R-4.2.0/library\n\n P ── Loaded and on-disk path mismatch.\n\n─ Python configuration ───────────────────────────────────────────────────────\n python:         C:/miniconda/envs/py3.8/python.exe\n libpython:      C:/miniconda/envs/py3.8/python38.dll\n pythonhome:     C:/miniconda/envs/py3.8\n version:        3.8.13 | packaged by conda-forge | (default, Mar 25 2022, 05:59:45) [MSC v.1929 64 bit (AMD64)]\n Architecture:   64bit\n numpy:          C:/miniconda/envs/py3.8/Lib/site-packages/numpy\n numpy_version:  1.22.4\n \n NOTE: Python version was forced by use_python function\n\n──────────────────────────────────────────────────────────────────────────────"
  },
  {
    "objectID": "posts/2022-10-14_ConcreteS3/2022-10-14_ConcreteS3.html",
    "href": "posts/2022-10-14_ConcreteS3/2022-10-14_ConcreteS3.html",
    "title": "Pin a Vetiver Model to an AWS S3 Container",
    "section": "",
    "text": "An XGBoost model for predicting concrete strength is transformed into a deployable model object and uploaded to an AWS S3 container.\nIn this post, I will take the XGBoost model for predicting concrete compressive strength described in a previous post, convert the model into a deployable model object using vetiverand “pin” it to an S3 bucket. The purpose of this effort is to make the model accessible in the cloud to an API running in a different location. The development of the API will be discussed in the next post. S3 stands for the AWS Simple Storage Service which exists in the cloud. I chose AWS over other vetiver-compatible options simply because I already had an existing account."
  },
  {
    "objectID": "posts/2022-10-14_ConcreteS3/2022-10-14_ConcreteS3.html#build-the-model-again",
    "href": "posts/2022-10-14_ConcreteS3/2022-10-14_ConcreteS3.html#build-the-model-again",
    "title": "Pin a Vetiver Model to an AWS S3 Container",
    "section": "Build the model (again)",
    "text": "Build the model (again)\nThis section just performs the steps to build the XGBoost model described in detail in the previous post.\nExpand to see the code\n\n\nCode\nlibrary(readxl)\nlibrary(tidyverse)\n\n#Tidymodels\nlibrary(tidymodels)\nlibrary(xgboost)\n\n#MLOps\nlibrary(vetiver)\nlibrary(pins)\n\n#Load the dataset\nfilename <- \"Concrete_Data.xls\"\n\nfolder <- \"../data/\"\nnumberCols <- 9 #total number of columns in spreadsheet\n\ncolTypes <- rep(\"numeric\", numberCols)\nconcrete_tbl <- read_excel(path = paste0(folder, filename), col_types = colTypes)\n\nconcrete_tbl <- concrete_tbl %>%\n  rename(cement = starts_with(\"Cement\")) %>%\n  rename(blast_furnace_slag = starts_with(\"Blast\")) %>%\n  rename(fly_ash = starts_with(\"Fly Ash\")) %>%\n  rename(water = starts_with(\"Water\")) %>%\n  rename(superplasticizer = starts_with(\"Super\")) %>%\n  rename(coarse_aggregate = starts_with(\"Coarse\")) %>%\n  rename(fine_aggregate = starts_with(\"Fine\")) %>%\n  rename(age = starts_with(\"Age\")) %>%\n  rename(compressive_strength = starts_with(\"Concrete\"))\n\n#Split the data into training and testing datasets\nset.seed(123)\nconcrete_split <- initial_split(concrete_tbl, prop = 0.80)\nconcrete_train <- training(concrete_split)\nconcrete_test <- testing(concrete_split)\n\n#Create the model recipe\nconcrete_rec <- recipe(compressive_strength ~ ., data = concrete_train) %>%\n  step_normalize(all_predictors())\n\n#Create the model specification. Parameters were specified from tuning in a previous post.\nxgboost_spec = boost_tree(\n  trees = 1000,\n  min_n = 18,\n  tree_depth = 10,\n  learn_rate = 0.02647525\n) %>%\n  set_engine(\"xgboost\") %>%\n  set_mode(\"regression\")\n\n#Create the modeling workflow\nconcrete_wf <- workflow() %>%\n  add_recipe(concrete_rec) %>%\n  add_model(xgboost_spec)\n\n#Fit model on train and evaluate on test.\nfinal_res <- last_fit(concrete_wf, concrete_split, metrics = metric_set(rmse, rsq, mae))\n\n#Assess final model performance metrics\ncollect_metrics(final_res)\n\n\n# A tibble: 3 × 4\n  .metric .estimator .estimate .config             \n  <chr>   <chr>          <dbl> <chr>               \n1 rmse    standard       4.33  Preprocessor1_Model1\n2 rsq     standard       0.945 Preprocessor1_Model1\n3 mae     standard       2.69  Preprocessor1_Model1"
  },
  {
    "objectID": "posts/2022-10-14_ConcreteS3/2022-10-14_ConcreteS3.html#create-the-deployable-model-object",
    "href": "posts/2022-10-14_ConcreteS3/2022-10-14_ConcreteS3.html#create-the-deployable-model-object",
    "title": "Pin a Vetiver Model to an AWS S3 Container",
    "section": "Create the Deployable Model Object",
    "text": "Create the Deployable Model Object\nThe deployable model object is created using the vetiver package. It is really as simple as extracting the workflow and passing it to the vetiver_model function.\n\nv <- final_res %>%\n  extract_workflow() %>%\n  vetiver_model(model_name = \"concrete-xgb\")\n\nv\n\n\n── concrete-xgb ─ <bundled_workflow> model for deployment \nA xgboost regression modeling workflow using 8 features"
  },
  {
    "objectID": "posts/2022-10-14_ConcreteS3/2022-10-14_ConcreteS3.html#pins-and-aws-s3",
    "href": "posts/2022-10-14_ConcreteS3/2022-10-14_ConcreteS3.html#pins-and-aws-s3",
    "title": "Pin a Vetiver Model to an AWS S3 Container",
    "section": "Pins and AWS s3",
    "text": "Pins and AWS s3\nThe pins package allows you to save data, models or R objects to the cloud such as an AWS S3 container. A new S3 container can be set up within AWS. In my case, I just used the default settings for the S3 bucket with the name pins-test-zoller. A security id and access key need to be set up to enable saving of data from your local computer to the S3 container. In your AWS account options under Security Credentials, you can configure your security id and access key and save the file to your local computer. There are multiple options to tell R where to find this information but I preferred to create a shared AWS credentials file in a text editor as follows:\n[default]\naws_access_key_id=your AWS access key\naws_secret_access_key=your AWS secret key\nOn a Windows computer, the file needs to be saved with the name credentials without any extension. The file location needs to be C:\\Users\\[your username]\\.aws\\. You may need to create the .aws directory.\nYou can then connect to the board where you want to place the pin using board_s3 command. Here, we pin the vetiver model for the concrete data.\n\nboard <- board_s3(\"pins-test-zoller\", region = \"us-east-2\")\nboard %>% vetiver_pin_write(v)\n\nCreating new version '20221019T191525Z-b1278'\nWriting to pin 'concrete-xgb'\n\nCreate a Model Card for your published model\n• Model Cards provide a framework for transparent, responsible reporting\n• Use the vetiver `.Rmd` template as a place to start\n\n\nIn the AWS S3 bucket with the name “pins-test-zoller”, a new folder is created with the same name as the model, concrete-xgb. Within this folder, there is a subfolder with the named according to the model version number and, within the subfolder, is the model object in rds form (concrete-xgb.rds) and a data.txt file with summary information about the model object."
  },
  {
    "objectID": "posts/2022-10-14_ConcreteS3/2022-10-14_ConcreteS3.html#summary",
    "href": "posts/2022-10-14_ConcreteS3/2022-10-14_ConcreteS3.html#summary",
    "title": "Pin a Vetiver Model to an AWS S3 Container",
    "section": "Summary",
    "text": "Summary\nAn XGBoost model for the concrete dataset has been converted to a deployable model object using the vetiver package and then uploaded (i.e. pinned) to an AWS S3 bucket. The model object can now be accessed in the cloud for different purposes including creating an API to provide model predictions. The API use case will be discussed further in the next post.\n\n\n\n\n\n\nExpand for Session Info\n\n\n\n\n\n\n\n─ Session info ───────────────────────────────────────────────────────────────\n setting  value\n version  R version 4.2.0 (2022-04-22 ucrt)\n os       Windows 10 x64 (build 19043)\n system   x86_64, mingw32\n ui       RTerm\n language (EN)\n collate  English_United States.utf8\n ctype    English_United States.utf8\n tz       America/Chicago\n date     2022-10-19\n pandoc   2.18 @ C:/Program Files/RStudio/bin/quarto/bin/tools/ (via rmarkdown)\n quarto    @ C:\\\\PROGRA~1\\\\RStudio\\\\bin\\\\quarto\\\\bin\\\\quarto.cmd\n\n─ Packages ───────────────────────────────────────────────────────────────────\n ! package      * version date (UTC) lib source\n P broom        * 1.0.1   2022-08-29 [?] CRAN (R 4.2.1)\n P dials        * 1.0.0   2022-06-14 [?] CRAN (R 4.2.1)\n P dplyr        * 1.0.10  2022-09-01 [?] CRAN (R 4.2.0)\n P forcats      * 0.5.2   2022-08-19 [?] CRAN (R 4.2.1)\n P ggplot2      * 3.3.6   2022-05-03 [?] CRAN (R 4.2.1)\n P infer        * 1.0.3   2022-08-22 [?] CRAN (R 4.2.1)\n   modeldata    * 1.0.1   2022-09-06 [2] CRAN (R 4.2.1)\n   parsnip      * 1.0.2   2022-10-01 [2] CRAN (R 4.2.1)\n P pins         * 1.0.3   2022-09-24 [?] CRAN (R 4.2.1)\n   purrr        * 0.3.5   2022-10-06 [2] CRAN (R 4.2.1)\n   readr        * 2.1.3   2022-10-01 [2] CRAN (R 4.2.1)\n P readxl       * 1.4.1   2022-08-17 [?] CRAN (R 4.2.1)\n   recipes      * 1.0.2   2022-10-16 [2] CRAN (R 4.2.0)\n   rsample      * 1.1.0   2022-08-08 [2] CRAN (R 4.2.1)\n P scales       * 1.2.1   2022-08-20 [?] CRAN (R 4.2.1)\n P sessioninfo  * 1.2.2   2021-12-06 [?] CRAN (R 4.2.1)\n P stringr      * 1.4.1   2022-08-20 [?] CRAN (R 4.2.1)\n P tibble       * 3.1.8   2022-07-22 [?] CRAN (R 4.2.1)\n P tidymodels   * 1.0.0   2022-07-13 [?] CRAN (R 4.2.1)\n   tidyr        * 1.2.1   2022-09-08 [2] CRAN (R 4.2.1)\n P tidyverse    * 1.3.2   2022-07-18 [?] CRAN (R 4.2.1)\n   tune         * 1.0.1   2022-10-09 [2] CRAN (R 4.2.1)\n P vetiver      * 0.1.8   2022-09-29 [?] CRAN (R 4.2.1)\n   workflows    * 1.1.0   2022-09-26 [2] CRAN (R 4.2.1)\n P workflowsets * 1.0.0   2022-07-12 [?] CRAN (R 4.2.1)\n P xgboost      * 1.6.0.1 2022-04-16 [?] CRAN (R 4.2.1)\n   yardstick    * 1.1.0   2022-09-07 [2] CRAN (R 4.2.1)\n\n [1] C:/Users/David Zoller/AppData/Local/Temp/RtmpILaCM5/renv-library-e38b4b587d\n [2] C:/Users/David Zoller/Documents/datadavidz.github.io/renv/library/R-4.2/x86_64-w64-mingw32\n [3] C:/Users/David Zoller/AppData/Local/Temp/RtmpILaCM5/renv-system-library\n\n P ── Loaded and on-disk path mismatch.\n\n──────────────────────────────────────────────────────────────────────────────"
  },
  {
    "objectID": "posts/2022-10-21_ConcreteAPI/2022-10-21_ConcreteAPI.html",
    "href": "posts/2022-10-21_ConcreteAPI/2022-10-21_ConcreteAPI.html",
    "title": "Create a Dockerized API Running on an AWS EC2 instance",
    "section": "",
    "text": "An Application Programming Interface (API) to predict concrete compressive strength is implemented in the cloud using an AWS EC2 instance.\nIn this post, we create an API for the deployable model object pinned to an S3 bucket as described in the previous post. We start by creating an Elastic Compute (EC2) instance on AWS to run the API. The vetiver package is used to write a Dockerfile for running the API inside a Docker container on the EC2 instance. The R script to run a plumber API for the model object is also created using the vetiver package. The EC2 instance is set up with Docker and the container is created from the Dockerfile. The API can then be run to provide compressive strength predictions for different concrete formulations."
  },
  {
    "objectID": "posts/2022-10-21_ConcreteAPI/2022-10-21_ConcreteAPI.html#create-an-ec2-instance-to-run-a-docker-container-with-a-plumber-api",
    "href": "posts/2022-10-21_ConcreteAPI/2022-10-21_ConcreteAPI.html#create-an-ec2-instance-to-run-a-docker-container-with-a-plumber-api",
    "title": "Create a Dockerized API Running on an AWS EC2 instance",
    "section": "Create an EC2 instance to run a Docker container with a Plumber API",
    "text": "Create an EC2 instance to run a Docker container with a Plumber API\nI chose to use the Elastic Compute (EC2) service from AWS to run the API in a docker container. The basics of setting up an EC2 instance are captured well in the The Shiny AWS book. I mostly accepted the defaults offered by AWS as described below:\n\nEnter a name for the instance such as docker-api-test.\nSelect Amazon Machine Image (AMI) for which I chose the free tier eligible, Amazon Linux (Amazon Linux 2 Kernel 5.10 AMI 2.0.20220912.1 x86_64 HVM gp2).\nSelect the Instance Type. Here is chose free tier eligible, t2.micro (1 CPU, 1 GB memory).\nCreate a key-pair for security access (unless you already have one you would like to re-use). This generates a .pem file to save.\nLeave the Network Settings as default for now. These settings will need to be changed later.\nFor Storage, I increased the amount to the free tier limit of 30 GB.\nNo changes to Detailed Settings.\nLaunch the instance."
  },
  {
    "objectID": "posts/2022-10-21_ConcreteAPI/2022-10-21_ConcreteAPI.html#create-a-security-group-to-allow-access-to-the-api",
    "href": "posts/2022-10-21_ConcreteAPI/2022-10-21_ConcreteAPI.html#create-a-security-group-to-allow-access-to-the-api",
    "title": "Create a Dockerized API Running on an AWS EC2 instance",
    "section": "Create a Security Group to Allow Access to the API",
    "text": "Create a Security Group to Allow Access to the API\nThe inbound and outbound rules need to be adjusted for the API to work properly. I found an article by Martin Lukac on “Deploying a plumber API to AWS EC2 instance” which contained the rules which also worked for me.\nInbound rules:\n1. Type: SSH, Protocol: TCP, Port: 22, Source: 0.0.0.0/0 (by default this was added)\n2. Type: HTTP, Protocol: TCP, Port: 80, Source: 0.0.0.0/0\n3. Type: Custom TCP, Protocol: TCP, Port: 8000, Source: 0.0.0.0/0 (for accessing the API)\n4. Type: Custom ICMP Rule IPv4, Protocol: Echo Request, Port: N/A, Source: 0.0.0.0/0 (for testing)\nOutbound rule:\n1. Type: All traffic, Protocol: All, Port Range: All, Destination: 0.0.0.0/0 (by default this was added)\nThe Security Group is then added to the proper EC2 instance."
  },
  {
    "objectID": "posts/2022-10-21_ConcreteAPI/2022-10-21_ConcreteAPI.html#connecting-to-your-ec2-instance-with-putty",
    "href": "posts/2022-10-21_ConcreteAPI/2022-10-21_ConcreteAPI.html#connecting-to-your-ec2-instance-with-putty",
    "title": "Create a Dockerized API Running on an AWS EC2 instance",
    "section": "Connecting to your EC2 instance with PuTTY",
    "text": "Connecting to your EC2 instance with PuTTY\nYou need to connect to your EC2 instance via an SSH client. A convenient option for Windows users is PuTTY an SSH and telnet client originally developed by Simon Tatham. The website for the Alaska Satellite Facility has a nice walkthrough on setting up PuTTY to access your EC2 instance.\n\nGenerate a PuTTY private key file (.ppk)\nIn brief, the steps to create the .ppk file from the AWS .pem file are as follows:\n\nStart the puttygen.exe program.\nClick on Load and find your .pem file you generated in Step 4 of Create an EC2 Instance above.\nMake sure Type of key to generate is set to RSA.\nClick on Save private key, name the file and save the ppk file.\n\n\n\nConfigure PuTTY to connect to your EC2 instance\n\nStart the putty.exe program\nEnter the Host name as ec2-user@your_public_DNS where your_public_DNS is listed in the description for your EC2 on the AWS console. It should be something like ec2-12-345-678-910.compute-1.amazonaws.com. Note: If you use an Ubuntu machine image the host name will begin with ubuntu@ instead of ec2-user@.\nMake sure the Port is set to 22.\nThe Connection type needs to be set to SSH.\nIn the Category pane on the left side of PuTTY configuration window, find the Connection category and expand the SSH options by clicking on the “+” and then click on Auth.\nUnder Private key for authentification, click on the Browse button and load the ppk file you generated above.\nIn the Category pane, click on Session and in the box under Saved Sessions, enter a name for this connection and then click on Save.\n\n\n\nConnect to your EC2\n\nStart the “putty.exe” program.\nClick on the Saved Sessions you named in Step 7 above.\nClick on Open to bring up a terminal session connected to your EC2."
  },
  {
    "objectID": "posts/2022-10-21_ConcreteAPI/2022-10-21_ConcreteAPI.html#load-and-start-docker-on-ec2",
    "href": "posts/2022-10-21_ConcreteAPI/2022-10-21_ConcreteAPI.html#load-and-start-docker-on-ec2",
    "title": "Create a Dockerized API Running on an AWS EC2 instance",
    "section": "Load and Start Docker on EC2",
    "text": "Load and Start Docker on EC2\nThe AWS EC2 instance does not come pre-loaded with Docker so it needs to be installed. A nice walkthrough can be found on the [Workfall Blog] (https://www.workfall.com/learning/blog/how-to-install-and-run-docker-containers-on-amazon-ec2-instance/). You first need to connect to your EC2 instance with PuTTY as described above. The next steps are as follows:\n\nUpdate the installed packages and package cache by running the command:sudo yum update -y\nInstall the most recent Docker package by running the command: sudo amazon-linux-extras install docker\nStart the Docker service: sudo service docker start\nAdd the ec2-user to the Docker group so you don’t need to execute Docker commands with sudo: sudo usermod -a -G Docker ec2-user\nLog out and log back into the EC2 instance and run a command to verify: docker info"
  },
  {
    "objectID": "posts/2022-10-21_ConcreteAPI/2022-10-21_ConcreteAPI.html#write-the-dockerfile-and-plumber-api-script",
    "href": "posts/2022-10-21_ConcreteAPI/2022-10-21_ConcreteAPI.html#write-the-dockerfile-and-plumber-api-script",
    "title": "Create a Dockerized API Running on an AWS EC2 instance",
    "section": "Write the Dockerfile and Plumber API script",
    "text": "Write the Dockerfile and Plumber API script\n\nlibrary(vetiver)\nlibrary(pins)\n\nboard <- board_s3(\"pins-test-zoller\", region = \"us-east-2\")\nv <- vetiver_pin_read(board, name = \"concrete-xgb\", version = \"20221019T191525Z-b1278\")\n\nvetiver_write_plumber(board, name = \"concrete-xgb\", version = \"20221019T191525Z-b1278\", rsconnect = FALSE)\nvetiver_write_docker(v)\n\nThe contents of the Dockerfile\n# Generated by the vetiver package; edit with care\n\nFROM rocker/r-ver:4.2.0\nENV RENV_CONFIG_REPOS_OVERRIDE https://packagemanager.rstudio.com/cran/latest\n\nRUN apt-get update -qq && apt-get install -y --no-install-recommends \\\n  libcurl4-openssl-dev \\\n  libicu-dev \\\n  libsodium-dev \\\n  libssl-dev \\\n  make \\\n  zlib1g-dev \\\n  && apt-get clean\n\nCOPY vetiver_renv.lock renv.lock\nRUN Rscript -e \"install.packages('renv')\"\nRUN Rscript -e \"renv::restore()\"\nCOPY plumber.R /opt/ml/plumber.R\nEXPOSE 8000\nENTRYPOINT [\"R\", \"-e\", \"pr <- plumber::plumb('/opt/ml/plumber.R'); pr$run(host = '0.0.0.0', port = 8000)\"]\nThe contents of the plumber.R file\n# Generated by the vetiver package; edit with care\n\nlibrary(pins)\nlibrary(plumber)\nlibrary(rapidoc)\nlibrary(vetiver)\nb <- board_s3(bucket = \"pins-test-zoller\", region = structure(\"us-east-2\", tags = list(type = \"scalar\")))\nv <- vetiver_pin_read(b, \"concrete-xgb\", version = \"20221019T191525Z-b1278\")\n\n#* @plumber\nfunction(pr) {\n    pr %>% vetiver_api(v)\n}"
  },
  {
    "objectID": "posts/2022-10-21_ConcreteAPI/2022-10-21_ConcreteAPI.html#editing-the-dockerfile-for-amazon-linux-ec2",
    "href": "posts/2022-10-21_ConcreteAPI/2022-10-21_ConcreteAPI.html#editing-the-dockerfile-for-amazon-linux-ec2",
    "title": "Create a Dockerized API Running on an AWS EC2 instance",
    "section": "Editing the Dockerfile for Amazon Linux EC2",
    "text": "Editing the Dockerfile for Amazon Linux EC2\nI found that a couple of edits were necessary to successfully create the Docker container. The libxml2 library needs to be installed in the container which can be added into the RUN apt-get update command line. The paws.storage R library needs to be installed by adding the command RUN Rscript -e \"install.packages('paws.storage')\". This issue has been reported on the vetiver Github as it is not recognized as a dependency when creating the renv lockfile.\nThe edited version should be:\n# Generated by the vetiver package; edit with care\n\nFROM rocker/r-ver:4.2.0\nENV RENV_CONFIG_REPOS_OVERRIDE https://packagemanager.rstudio.com/cran/latest\n\nRUN apt-get update -qq && apt-get install -y --no-install-recommends \\\n  libcurl4-openssl-dev \\\n  libicu-dev \\\n  libsodium-dev \\\n  libssl-dev \\\n  libxml2 \\\n  make \\\n  zlib1g-dev \\\n  && apt-get clean\n\nCOPY vetiver_renv.lock renv.lock\nRUN Rscript -e \"install.packages('renv')\"\nRUN Rscript -e \"renv::restore()\"\nRUN Rscript -e \"install.packages('paws.storage')\"\nCOPY plumber.R /opt/ml/plumber.R\nEXPOSE 8000\nENTRYPOINT [\"R\", \"-e\", \"pr <- plumber::plumb('/opt/ml/plumber.R'); pr$run(host = '0.0.0.0', port = 8000)\"]"
  },
  {
    "objectID": "posts/2022-10-21_ConcreteAPI/2022-10-21_ConcreteAPI.html#copying-files-to-your-ec2-instance",
    "href": "posts/2022-10-21_ConcreteAPI/2022-10-21_ConcreteAPI.html#copying-files-to-your-ec2-instance",
    "title": "Create a Dockerized API Running on an AWS EC2 instance",
    "section": "Copying files to your EC2 instance",
    "text": "Copying files to your EC2 instance\nThe article at this link describes two different methods for copying files from Windows to an EC2 instance using WinSCP and using PuTTY secure copy. I used PuTTY secure copy (PSCP) since PuTTY is already installed on my computer and there are not many files to copy. PSCP is a command line utility\npscp -i your-key.ppk yourfilename ec2-user@yourPublicDNS:/home/ec2-user/\nwhere your-key.ppk is your PuTTY private key file previously generated to connect to your EC2 instance. The ppk file needs to be in the same directory with the files you are copying to the EC2 instance.\nYou need to copy the Dockerfile, vetiver_renv.lock and plumber.R files to your EC2 instance in the ec2-user directory."
  },
  {
    "objectID": "posts/2022-10-21_ConcreteAPI/2022-10-21_ConcreteAPI.html#build-and-run-the-docker-api",
    "href": "posts/2022-10-21_ConcreteAPI/2022-10-21_ConcreteAPI.html#build-and-run-the-docker-api",
    "title": "Create a Dockerized API Running on an AWS EC2 instance",
    "section": "Build and run the Docker API",
    "text": "Build and run the Docker API\n\nLog in to (SSH) the EC2 instance and start the Docker service: sudo service docker start\nBuild the docker container from the Dockerfile: docker build -t concrete-xgb-api .\nStart the API: docker run --rm -p 8000:8000 concrete-xgb-api\nThe API can then be tested by connecting to the rapiddoc Docs on your instance via a web browser:\n\nhttp://yourEC2PublicDNS:8000/__docs__/\nIf you successfully connect to the API, you will see a page such as shown below.\n\n\n\nYour rapiddoc API home page\n\n\nYou can click on GET and TRY to ping the status of your API. You can test the predictive model by clicking on POST and then under REQUEST click on the Example tab. You can then enter different values for the predictors in the format shown in the Example and then click on TRY and the outcome will show below in the Response window. An example for the Concrete API is shown in the figure below.\n\n\n\nExample of Concrete Strength Prediction from the rapiddoc page"
  },
  {
    "objectID": "posts/2022-10-21_ConcreteAPI/2022-10-21_ConcreteAPI.html#summary",
    "href": "posts/2022-10-21_ConcreteAPI/2022-10-21_ConcreteAPI.html#summary",
    "title": "Create a Dockerized API Running on an AWS EC2 instance",
    "section": "Summary",
    "text": "Summary\nIn this post, I have shown how to launch an API inside a Docker Container running on an EC2 instance. The Dockerfile and plumber API script was created using the vetiver package. The API accesses an xgboost model to predict concrete strength from ingredients and age that was versioned and posted to an AWS S3 container as described in the previous post. I am curious about building a Shiny app to utilize this API but this will need to wait for a future post.\n\n\n\n\n\n\nExpand for Session Info\n\n\n\n\n\n\n\n─ Session info ───────────────────────────────────────────────────────────────\n setting  value\n version  R version 4.2.0 (2022-04-22 ucrt)\n os       Windows 10 x64 (build 19045)\n system   x86_64, mingw32\n ui       RTerm\n language (EN)\n collate  English_United States.utf8\n ctype    English_United States.utf8\n tz       America/Chicago\n date     2022-11-04\n pandoc   2.18 @ C:/Program Files/RStudio/bin/quarto/bin/tools/ (via rmarkdown)\n quarto   1.0.36 @ C:\\\\PROGRA~1\\\\RStudio\\\\bin\\\\quarto\\\\bin\\\\quarto.cmd\n\n─ Packages ───────────────────────────────────────────────────────────────────\n ! package     * version date (UTC) lib source\n P pins        * 1.0.3   2022-09-24 [?] CRAN (R 4.2.1)\n P sessioninfo * 1.2.2   2021-12-06 [?] CRAN (R 4.2.1)\n P vetiver     * 0.1.8   2022-09-29 [?] CRAN (R 4.2.1)\n\n [1] C:/Users/David Zoller/AppData/Local/Temp/RtmpWoGT29/renv-library-23ec6a0a5974\n [2] C:/Users/David Zoller/Documents/datadavidz.github.io/renv/library/R-4.2/x86_64-w64-mingw32\n [3] C:/Users/David Zoller/AppData/Local/Temp/RtmpWoGT29/renv-system-library\n\n P ── Loaded and on-disk path mismatch.\n\n──────────────────────────────────────────────────────────────────────────────"
  },
  {
    "objectID": "posts/2022-12-02_SimpleUIConcreteAPI/2022-12-02_SimpleUIConcreteAPI.html",
    "href": "posts/2022-12-02_SimpleUIConcreteAPI/2022-12-02_SimpleUIConcreteAPI.html",
    "title": "A Rudimentary Shiny App for the Concrete API",
    "section": "",
    "text": "A simple, user interface for requesting predictions from the Concrete API has been built using Shiny.\nA simple UI has been built which allows the user to adjust the amounts of the concrete ingredients and age. The user can then send those selections to the Concrete API describes in a previous post running on an Amazon EC2 instance. A prediction of the compressive strength for the concrete formulation and age is then displayed in the Shiny app. The UI also has a button to ping the API and check if it is online. The app is currently deployed on shinyapps.io but the likelihood it is still active when you are reading this post is quite low as it is not an application I will be actively maintaining."
  },
  {
    "objectID": "posts/2022-12-02_SimpleUIConcreteAPI/2022-12-02_SimpleUIConcreteAPI.html#user-interface",
    "href": "posts/2022-12-02_SimpleUIConcreteAPI/2022-12-02_SimpleUIConcreteAPI.html#user-interface",
    "title": "A Rudimentary Shiny App for the Concrete API",
    "section": "User Interface",
    "text": "User Interface\nThe UI for the app is set up using the sidebarLayout with the 8 slider bars on the left for adjusting the concrete ingredient amounts and the age of the concrete. The mainPanel contains the 2 action buttons. The first button is used to ping the status of the API. The second button is to send the sliderInputs to the API and receive back the prediction of concrete strength. A text input is available in case the URL location of the API changes. The results print as text directly below the buttons. The aim was to just get a working Shiny app and, hopefully, the user interface will be improved in a subsequent post.\n\n\nCode\nui <- fluidPage(\n \n  titlePanel(\"Predictions Using the Concrete API\"),\n  \n  sidebarLayout(\n    sidebarPanel(\n      sliderInput(\"cement\", \"Cement (kg)\", min = 100, max = 550, value = 275),\n      sliderInput(\"blast_furnace_slag\", \"Blast Furnace Slag (kg)\", min = 0, max = 375, value = 20),\n      sliderInput(\"fly_ash\", \"Fly Ash (kg)\", min = 0, max = 200, value = 0),\n      sliderInput(\"water\", \"Water (kg)\", min = 100, max = 250, value = 185),\n      sliderInput(\"superplasticizer\", \"Superplasticizer (kg)\", min = 0, max = 35, value = 5),\n      sliderInput(\"coarse_aggregate\", \"Coarse Aggregate (kg)\", min = 800, max = 1150, value = 975),\n      sliderInput(\"fine_aggregate\", \"Fine Aggregate (kg)\", min = 575, max = 1000, value = 775),\n      sliderInput(\"age\", \"Age (days)\", min = 1, max = 365, value = 28),\n    ),\n    mainPanel(\n      textInput(\"api_url\", \"API URL\", \"http://ec2-XX-YYY-ZZZ-AAA.compute-1.amazonaws.com:8000/\"),\n      actionButton(\"go\", \"Ping\"),\n      textOutput(\"status\"),\n      actionButton(\"predict\", \"Predict\"),\n      h1(textOutput(\"strength\"))\n    )\n  )\n)"
  },
  {
    "objectID": "posts/2022-12-02_SimpleUIConcreteAPI/2022-12-02_SimpleUIConcreteAPI.html#server-side",
    "href": "posts/2022-12-02_SimpleUIConcreteAPI/2022-12-02_SimpleUIConcreteAPI.html#server-side",
    "title": "A Rudimentary Shiny App for the Concrete API",
    "section": "Server side",
    "text": "Server side\nThe app uses the httr package to connect to the Concrete API. The httr GET command is used to obtain the API status. The httr status_code function is used to parse the status code from the GET response. The httr POST command is used to send the predictor inputs to the API and receive the output response. The string format for the sending the predictor inputs is shown in the rapidDoc docs by looking the at the curl example. This format is used in the body of the POST command also incorporating the values for the 8 sliderInputs. The prediction for concrete strength is parsed from the content of the POST response. Both the GET and POST commands are contained within an eventReactive tied to their respective action buttons.\n\n\nCode\nserver <- function(input, output) {\n  \n  resp <- eventReactive(input$go, {\n    GET(paste0(input$api_url, \"ping\"))\n  })\n  \n  post_resp <- eventReactive(input$predict, {\n    POST(paste0(input$api_url, \"predict\"), body = paste0('[{\"cement\":',input$cement,\n                                                         ',\"blast_furnace_slag\":', input$blast_furnace_slag,\n                                                         ',\"fly_ash\":', input$fly_ash, \n                                                         ',\"water\":', input$water,\n                                                         ',\"superplasticizer\":', input$superplasticizer,\n                                                         ',\"coarse_aggregate\":', input$coarse_aggregate,\n                                                         ',\"fine_aggregate\":', input$fine_aggregate,\n                                                         ',\"age\":', input$age,'}]'))\n  })\n  output$status <- renderText({\n    paste0(\"Status Code:\", status_code(resp()))\n  })\n  output$strength <- renderText({\n    paste0(content(post_resp(), as = \"parsed\")[[1]][[1]], \" MPa\")\n  })\n}\n\n\nPredictions for different concrete formulations and ages can be accomplished by adjusting the slider inputs and then pressing the “Predict” action button. Some potential improvements to the functioning of this app could include:\n\nClearing the current prediction when the Predict action button is pressed but before the new prediction is received from the API\nError checking to handle cases when the response is not received or received without a prediction\nAdjustment of the sliders to a specific total weight of concrete\nRecording the recent formulations and prediction results in a table for the user"
  },
  {
    "objectID": "posts/2022-12-02_SimpleUIConcreteAPI/2022-12-02_SimpleUIConcreteAPI.html#summary",
    "href": "posts/2022-12-02_SimpleUIConcreteAPI/2022-12-02_SimpleUIConcreteAPI.html#summary",
    "title": "A Rudimentary Shiny App for the Concrete API",
    "section": "Summary",
    "text": "Summary\nA simple app has been built for a user to interface with the Concrete API. The slider bars make it relatively easy to explore the effect of different ingredients and age on the concrete strength compared to manually editing each value in an R script. Hopefully, I will have time to further develop the app with a nicer, user interface and improved functionality in a future post.\n\n\n\n\n\n\nExpand for Session Info\n\n\n\n\n\n\n\n─ Session info ───────────────────────────────────────────────────────────────\n setting  value\n version  R version 4.2.0 (2022-04-22 ucrt)\n os       Windows 10 x64 (build 19045)\n system   x86_64, mingw32\n ui       RTerm\n language (EN)\n collate  English_United States.utf8\n ctype    English_United States.utf8\n tz       America/Chicago\n date     2022-12-06\n pandoc   2.19.2 @ C:/Program Files/RStudio/bin/quarto/bin/tools/ (via rmarkdown)\n quarto   1.1.189 @ C:\\\\PROGRA~1\\\\RStudio\\\\bin\\\\quarto\\\\bin\\\\quarto.exe\n\n─ Packages ───────────────────────────────────────────────────────────────────\n ! package     * version date (UTC) lib source\n P sessioninfo * 1.2.2   2021-12-06 [?] CRAN (R 4.2.1)\n\n [1] C:/Users/David Zoller/AppData/Local/Temp/RtmpsraoOb/renv-library-102069bf25f5\n [2] C:/Users/David Zoller/Documents/datadavidz.github.io/renv/library/R-4.2/x86_64-w64-mingw32\n [3] C:/Users/David Zoller/AppData/Local/Temp/RtmpsraoOb/renv-system-library\n\n P ── Loaded and on-disk path mismatch.\n\n──────────────────────────────────────────────────────────────────────────────"
  },
  {
    "objectID": "posts/2021-04-27_tt_CEODepartures/2021-04-27_tt_CEODepartures.html",
    "href": "posts/2021-04-27_tt_CEODepartures/2021-04-27_tt_CEODepartures.html",
    "title": "Tidy Tuesday: CEO Departures",
    "section": "",
    "text": "My data visualization based on a dataset of CEO departures from 1500 S&P firms from 2000-2018.\nA quick analysis of the weekly #TidyTuesday dataset organized by the R4DS Online Learning Community. My approach is to apply my data science skills to explore one question I have about the data and generate a visualization that addresses this question. The main purpose for me is to practice and try out new things. I am never completely satisfied with the end result but I do the best I can in a short period of time.\nWhat I learned this week about R and the Tidyverse\nBrief explanation of the dataset\nThis dataset is from DataIsPlural and contains reasons for CEO departures from S&P 1500 firms. Information is provided about the company name, CEO name and date of departure along with notes and links to articles which were used to assign the departure reason. Reasons were assigned to one of 9 different codes. Codes 1-4 were involuntary reasons such as CEO died or was ill and CEO was terminated for poor job performance or legal issues. Codes 5-6 were voluntary reasons such as the CEO retired or decided to leave for a new opportunity. Code 7 is mostly about a change following a merger or acquisition and in some cases the CEO stayed on with the new company. Code 8-9 are missing or data collection error."
  },
  {
    "objectID": "posts/2021-04-27_tt_CEODepartures/2021-04-27_tt_CEODepartures.html#load-libraries-and-data",
    "href": "posts/2021-04-27_tt_CEODepartures/2021-04-27_tt_CEODepartures.html#load-libraries-and-data",
    "title": "Tidy Tuesday: CEO Departures",
    "section": "Load libraries and data",
    "text": "Load libraries and data\n\nlibrary(tidyverse)\nlibrary(scales)\nlibrary(viridisLite)\n\ntheme_set(theme_minimal(base_family = \"mono\"))\n\n#Load dataset from TidyTuesday repository\ndepartures <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2021/2021-04-27/departures.csv')"
  },
  {
    "objectID": "posts/2021-04-27_tt_CEODepartures/2021-04-27_tt_CEODepartures.html#wrangle",
    "href": "posts/2021-04-27_tt_CEODepartures/2021-04-27_tt_CEODepartures.html#wrangle",
    "title": "Tidy Tuesday: CEO Departures",
    "section": "Wrangle",
    "text": "Wrangle\nInitial conclusions from exploring the CEO departures dataset.\n\nCEO departures ranged from 1987 to 2020 in the dataset however not much data before 1995 and data after 2018 was mostly incomplete.\nTop reasons for departures were CEO retired, Other (mostly M&A) and dismissed due to job performance.\nNA in the departure code appears to be an entry where the CEO is still at the company upon last check.\n\nThe following plot shows the breakdown of departure codes vs. fiscal year for the entire dataset.\n\ndepartures %>%\n  mutate(departure_code = as.factor(departure_code)) %>%\n  group_by(fyear, departure_code) %>%\n  summarize(n = n(), .groups = \"drop\") %>%\n  ggplot(aes(x = fyear, y = n, fill = departure_code)) +\n    geom_area() +\n  labs(title = \"CEO Departures by Code\",\n       x = \"Fiscal Year\",\n       y = \"# of Departures\")\n\n\n\n\nAs can be seen from this chart, the data after 2018 contains a great deal of NAs which appear to be just missing data. Also the data before 1995 is pretty lean. Another observation is that just a few codes tend to dominate the chart making the less frequent codes difficult to assess. Based on these observations, I decided to recode the data to capture 5 main categories for CEO departures: 1) Health, 2) Performance, 3) CEO choice, 4) Merger and 5) N/A (unknown).\nThe code for cleaning and wrangling the dataset prior to plotting is given below.\n\ndepartures_clean <- departures %>%\n  filter(fyear < 2019 & fyear > 1994) %>%\n  filter(!is.na(departure_code)) %>%\n  mutate(departure_code = as.character(departure_code)) %>%\n  mutate(departure_code = fct_recode(departure_code, Health = \"1\",\n                                      Health = \"2\",\n                                      Performance = \"3\",\n                                      Performance = \"4\",\n                                      `CEO Choice` = \"5\",\n                                      `CEO Choice` = \"6\",\n                                      Merger = \"7\",\n                                      `N/A` = \"8\",\n                                      `N/A` = \"9\"\n                                      )) %>%\n  group_by(fyear, departure_code) %>%\n  summarize(n = n(), .groups = \"drop\")\n\ndepartures_clean\n\n# A tibble: 120 × 3\n   fyear departure_code     n\n   <dbl> <fct>          <int>\n 1  1995 Health             8\n 2  1995 Performance       34\n 3  1995 CEO Choice       129\n 4  1995 Merger            48\n 5  1995 N/A                2\n 6  1996 Health             4\n 7  1996 Performance       42\n 8  1996 CEO Choice       130\n 9  1996 Merger           139\n10  1996 N/A                2\n# … with 110 more rows\n\n\n\nVisualize\nThe visualization of the tidied and recoded dataset was then performed using a stacked area chart. This type of plot is standard in ggplot2 using geom_area.\n\np1 <- departures_clean %>%\n  ggplot(aes(x = fyear, y = n, fill = departure_code)) +\n  geom_area() +\n  scale_fill_viridis_d(option = \"plasma\", direction = -1) +\n  labs(title = \"Reasons for CEO Departures\",\n       subtitle = \"S&P 1500 Firms 1995-2018\",\n       x = \"Fiscal Year of Event\",\n       y = \"Number of Departures\",\n       fill = NULL,\n       caption = \"Graphic: @datadavidz | Source: DataIsPlural | #TidyTuesday\") +\n  theme(legend.position = \"top\",\n        axis.title.x = element_text(margin = margin(t = 5, r = 0, b = 0, l = 0)),\n        axis.title.y = element_text(margin = margin(t = 0, r = 10, b = 0, l = 0)))\n\n\n\n\n\n\n\nData Visualization for CEO Departures\n\n\nThe default margin for the axis title labels for theme_minimal is just too close to the axis labels for my liking. The best way to adjust the spacing of these labels is to use the margin function within the theme element_text for axis.title.x or axis.title.y. The ordering of the elements is a bit weird (top, right, bottom, left) but I guess it goes clockwise from the top. Probably best to assign the labels to avoid confusion. I was a bit lazy with the font choosing the default “mono” font but it seemed like a good fit for a business-related dataset.\n\n\nSummary\nThe stacked area chart for the CEO departure dataset was effective in communicating the main reasons CEOs left their company over the 1995-2018 timeframe. The viridis magma color palette produced a pleasing visualization. The number of departures varied from year-to-year however the ratio among the reasons was fairly consistent."
  },
  {
    "objectID": "posts/2021-04-13_tt_PostOffices/2021-04-13_tt_PostOffices.html",
    "href": "posts/2021-04-13_tt_PostOffices/2021-04-13_tt_PostOffices.html",
    "title": "Tidy Tuesday: U.S. Post Offices",
    "section": "",
    "text": "My data visualization based on a dataset of US Post Offices for 166,140 post offices that operated in the United States between 1639 and 2000.\nA quick analysis of the weekly #TidyTuesday dataset organized by the R4DS Online Learning Community. My approach is to apply my data science skills to explore one question I have about the data and generate a visualization that addresses this question. The main purpose for me is to practice and try out new things. I am never completely satisfied with the end result but I do the best I can in a short period of time.\nWhat I learned this week about R and the Tidyverse\n\nCreating a stacked area chart using geom_area function in ggplot2\nSlight adjustments in placing the axis title using the margin function in the plot theme\n\nBrief explanation of the dataset\nThis dataset is from DataIsPlural and contains reasons for CEO departures from S&P 1500 firms. Information is provided about the company name, CEO name and date of departure along with notes and links to articles which were used to assign the departure reason. Reasons were assigned to one of 9 different codes. Codes 1-4 were involuntary reasons such as CEO died or was ill and CEO was terminated for poor job performance or legal issues. Codes 5-6 were voluntary reasons such as the CEO retired or decided to leave for a new opportunity. Code 7 is mostly about a change following a merger or acquisition and in some cases the CEO stayed on with the new company. Code 8-9 are missing or data collection error.\n\nLoad libraries and data\n\nlibrary(tidyverse)\n\nlibrary(geojsonio)\nlibrary(rgdal)\nlibrary(broom)\nlibrary(rgeos)\n\nlibrary(viridis)\nlibrary(showtext)\n\nfont_add_google(name = \"Oswald\")\n\ntheme_set(theme_minimal())\n\n#Load dataset from TidyTuesday repository\npost_offices <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2021/2021-04-13/post_offices.csv')\nus_reps <- read_csv(file = \"../data/us_reps_state.csv\") %>% janitor::clean_names()\n\n\n\nWrangle\nInitial conclusions from exploring the post_offices dataset.\n\nThe established date for post offices ranged from 1877-2000.\n\nThe discontinued date can be missing and would suggest the post office is still in operation as of 2000.\n\nThe state and county is available for almost all of the post offices.\nThe GNIS information including latitude and longitude is present for about 2/3 of the data.\n\nThe assumption is that the missing (NA) discontinued year means the post office is still operating. Based on this assumption, we calculate the number of post offices per state and as a ratio to the number of US House of Representatives for each state.\n\noffice_count <- post_offices %>%\n  select(id, name, state, established, discontinued) %>%\n  filter(is.na(discontinued)) %>%\n  group_by(state) %>%\n  summarize(offices = n(), .groups = \"drop\")\n\noffice_ratio <- us_reps %>%\n  left_join(tibble(state = state.name, id = state.abb), by = \"state\") %>%\n  left_join(office_count, by = c(\"id\" =  \"state\")) %>%\n  mutate(rep_ratio = offices / representatives_number,\n         pop_ratio = pop / offices) %>%\n  arrange(desc(pop_ratio))\n\n\n\nVisualize\nLet’s first look at the states with the most number of post offices.\n\noffice_count %>%\n  arrange(desc(offices)) %>%\n  slice(1:10) %>%\n  mutate(state = fct_reorder(state, offices)) %>%\n  ggplot(aes(x = offices, y = state)) +\n  geom_col(fill = \"steelblue\") +\n  labs(title = \"Top 10 States with the Highest Number of Post Offices\",\n       x = \"# of Post Offices\",\n       y = NULL)\n\n\n\n\nNow let’s look at the ratio of post offices per US representatives for each state.\n\noffice_ratio %>%\n  arrange(desc(rep_ratio)) %>%\n  slice(1:10) %>%\n  mutate(state = fct_reorder(state, rep_ratio)) %>%\n  ggplot(aes(x = rep_ratio, y = state)) +\n  geom_col(fill = \"midnightblue\") +\n  labs(title = \"Top 10 States with the Highest Number of Post Offices per US Rep\",\n       x = \"# of Post Offices\",\n       y = NULL)\n\n\n\n\nThe most post offices per state generally includes the most populous states while the most post offices per US representatives includes some of the less populous states. Kentucky and Iowa show up in both top ten lists. I decided from here that I was most interested in the average population served by the post offices in each state. I wanted to create a map but not using the US map but rather a hexbin representation I had come across previously.\nCreating the hexbin map was more complicated than I thought it would be when I began. The first step was to download a geojson file which I found here. This file contained the boundaries for the hexagons for each state. The file is read using the geojsonio package into a SpatialPolygonsDataFrame class.\n\n#geojsonio package\nspdf <- geojson_read(\"../data/us_states_hexgrid.geojson\",  what = \"sp\")\n\n#reformat the state name\nspdf@data = spdf@data %>%\n  mutate(google_name = gsub(\" \\\\(United States\\\\)\", \"\", google_name))\n\n# Show it (requires rgdal library)\nplot(spdf)\n\n\n\n\nWe can then reformat the spdf data into a standard data frame using the tidy function from the broom package. Next, we need to calculate the center of each hexagon for adding the label with the state abbreviation. The centroid is calculated from the spdf data using a function from the rgeos package.\n\n# reformat as data frame for ggplot\nspdf_fortified <- tidy(spdf, region = \"iso3166_2\")\n\n#calculate centroid of each hexagon for adding label\ncenters <- cbind.data.frame(data.frame(gCentroid(spdf, byid=TRUE), id=spdf@data$iso3166_2))\n\nggplot() +\n  geom_polygon(data = spdf_fortified, aes( x = long, y = lat, group = group), fill=\"skyblue\", color=\"white\") +\n  geom_text(data=centers, aes(x=x, y=y, label=id)) +\n  theme_void() +\n  coord_map()\n\n\n\n\nNext, we add the ratio of state population to number of post offices and segregate into bins.\n\nspdf_fortified <- spdf_fortified %>%\n  left_join(select(office_ratio, id, pop_ratio), by = \"id\") %>%\n  filter(!is.na(pop_ratio))\n\nspdf_fortified$bin <- cut( spdf_fortified$pop_ratio , breaks=c(seq(0, 20000, 5000), Inf), \n                           labels=c(\"< 5K\", \"5-10K\", \"10-15K\", \"15-20K\", \"20K+\") , include.lowest = TRUE )\n\nFinally, we create the hexbin map with the post office data.\n\nshowtext_auto()\nmy_palette <- rev(magma(8))[c(-1,-8)]\n\np1 <- ggplot() +\n  geom_polygon(data = spdf_fortified, aes(fill = bin, x = long, y = lat, group = group) , size=0, alpha=0.9) +\n  geom_text(data=centers, aes(x=x, y=y, label=id), color=\"white\", size=3, alpha=0.6) +\n  theme_void() +\n  scale_fill_manual( \n    values=my_palette, \n    name=\"Average population served per post office\", \n    guide = guide_legend( keyheight = unit(3, units = \"mm\"), keywidth=unit(12, units = \"mm\"), label.position = \"bottom\", title.position = 'top', nrow=1) \n  ) +\n  labs( title = \"Population Served per Post Office ca. 2000\",\n        caption = \"Graphic: @datadavidz | Source: Blevins and Helbock | #TidyTuesday\") +\n  theme(\n    legend.position = c(0.5, 0.9),\n    text = element_text(color = \"#22211d\"),\n    plot.background = element_rect(fill = \"#f5f5f2\", color = NA), \n    panel.background = element_rect(fill = \"#f5f5f2\", color = NA), \n    legend.background = element_rect(fill = \"#f5f5f2\", color = NA),\n    plot.title = element_text(family = \"Oswald\", size= 22, hjust=0.5, color = \"#4e4d47\", margin = margin(b = -0.1, t = 0.4, l = 2, unit = \"cm\")),\n    plot.caption = element_text(hjust = 0.95, vjust = 1)\n  )\n\n\n\n\n ### Summary\nI felt this hexbin map was an effective and aesthetically-pleasing graphic for the analysis. The construction of the hexbin map was more complex than I imagined requiring a website download, multiple packages I don’t normally use and new data formats. I have seen people make similar plots using the geofacet package and I am interested whether this could simplify the process. However, this package doesn’t appear to be able to easily make the hexagon shapes."
  },
  {
    "objectID": "posts/2023-01-05_aoc_Day01_Lists/2023-01-05_aoc_Day01_Lists.html",
    "href": "posts/2023-01-05_aoc_Day01_Lists/2023-01-05_aoc_Day01_Lists.html",
    "title": "Advent of Code Day 1: Working with Lists",
    "section": "",
    "text": "An input file is transformed into a structured list to enable calculations on the dataset."
  },
  {
    "objectID": "posts/2023-01-05_aoc_Day01_Lists/2023-01-05_aoc_Day01_Lists.html#introduction",
    "href": "posts/2023-01-05_aoc_Day01_Lists/2023-01-05_aoc_Day01_Lists.html#introduction",
    "title": "Advent of Code Day 1: Working with Lists",
    "section": "Introduction",
    "text": "Introduction\nThis post explains my solution to the Advent of Code problem from Day 1. The scenario is that the elves are asked to record the calories for each consumable item they’ve brought with them. The list for each elf is separated by a blank line. So, the list looks something like this:\n1000\n2000\n3000\n\n4000\n\n5000\n6000\n\n7000\n8000\n9000\n\n10000\nThe first objective is to determine the most calories carried by a single elf. The second objective is to determine the total calories available from the top 3 elves carrying the most calories. There are a number of approaches to answer these questions, for example, by iterating through the data and storing just the highest (or 3 highest) totals in the process. Thinking about real world problems, I was interested in storing the totals for each elf so you could do additional analyses such as which elves are carrying the most calories, what is the distribution of calories amongst the elves and so on. To retain the structure of the original data set but make it more amenable for further analysis, my thought was to read the data into a list where each list item contained a sub-list of the calories for each elf."
  },
  {
    "objectID": "posts/2023-01-05_aoc_Day01_Lists/2023-01-05_aoc_Day01_Lists.html#loading-and-analyzing-input-file",
    "href": "posts/2023-01-05_aoc_Day01_Lists/2023-01-05_aoc_Day01_Lists.html#loading-and-analyzing-input-file",
    "title": "Advent of Code Day 1: Working with Lists",
    "section": "Loading and analyzing input file",
    "text": "Loading and analyzing input file\nThe input file has the structure as described in the introduction. The read_delim function from the readr package is used to load the file into a tibble (dataframe).\n\nlibrary(tidyverse)\n\nfilepath <- here::here(\"./posts/data/aoc/day01_input.txt\")\n\ndata <- read_delim(filepath, delim = \"\\n\", col_names = c(\"calories\"), skip_empty_rows = FALSE)\n\nNext, I determine the number of elves in the list by counting the number of NAs. I need to add 1 since the items for the last elf does not end with an NA.\n\nnum_elves <- data %>%\n  filter(is.na(calories)) %>%\n  count(calories) %>%\n  pull(n) %>%\n  `+`(1)\n\nnum_elves\n\n[1] 251\n\n\nThe data is now read into the list where each list item contains the vector of calories for that elf. I preallocate the list and then loop through the dataframe structure. When an NA is encountered, the list of calories for the current elf (elf_bag) is added to cal_lst at the position specified by elf_id, elf_id is iterated by 1 and elf_bag is reset to an empty vector.\n\nelf_id <- 1 #counter for the current elf\nelf_bag <- vector() #vector for the calories for each consumable item\n\n#Preallocate the list\ncal_lst <- vector(mode = \"list\", length = 251)\n\nfor (i in 1:length(data[[1]])) {\n  if (is.na(data[[i,1]])) {\n    cal_lst[elf_id] <- list(elf_bag)\n    names(cal_lst)[elf_id] <- paste0(\"elf_\", elf_id)\n    elf_id <- elf_id + 1\n    elf_bag <- vector()\n  } else {\n    elf_bag <- c(elf_bag, data[[i, 1]])\n  }\n}\n# Add the final list of items since no NA at the end\ncal_lst[elf_id] <- list(elf_bag)\nnames(cal_lst)[elf_id] <- paste0(\"elf_\", elf_id)\n\n#Show the first three list items\ncal_lst[1:3]\n\n$elf_1\n[1] 11223  6323 10725 10761  3587\n\n$elf_2\n [1] 1274 1041 5566 1759 1372 1619 2228 1283 1981 1885 5894 1321 6081 4407 2992\n\n$elf_3\n [1] 7184 2310 7975 2752 7942 7616 3622 1320 1231 6191"
  },
  {
    "objectID": "posts/2023-01-05_aoc_Day01_Lists/2023-01-05_aoc_Day01_Lists.html#finding-the-objectives",
    "href": "posts/2023-01-05_aoc_Day01_Lists/2023-01-05_aoc_Day01_Lists.html#finding-the-objectives",
    "title": "Advent of Code Day 1: Working with Lists",
    "section": "Finding the objectives",
    "text": "Finding the objectives\nNow, it is easy to find the most calories carried by an elf using sapply and then sort. Since we named the list elements, we can see that elf_186 is caring the most calories.\n\n#total calories for each elf\ncal_by_elf <- sapply(cal_lst, sum)\nsort(cal_by_elf, decreasing = TRUE)[1]\n\nelf_186 \n  72511 \n\n\nSimilarly, the total amount for the top 3 elves carrying the most calories is determined.\n\nsum(sort(cal_by_elf, decreasing = TRUE)[1:3])\n\n[1] 212117\n\n\nThe distribution of calories carried by the elves can be visualized in a histogram.\n\nenframe(cal_by_elf) %>%\n  ggplot(aes(x=value)) +\n  geom_histogram(bins = 35, fill = \"steelblue\") +\n  labs(title = \"Calories of consumable items carried by Santa's elves\",\n       x = \"calories carried\")"
  },
  {
    "objectID": "posts/2023-01-05_aoc_Day01_Lists/2023-01-05_aoc_Day01_Lists.html#summary",
    "href": "posts/2023-01-05_aoc_Day01_Lists/2023-01-05_aoc_Day01_Lists.html#summary",
    "title": "Advent of Code Day 1: Working with Lists",
    "section": "Summary",
    "text": "Summary\nA dataset from the Advent of Code Day 1 problem has been loaded into a structured list. This format made performing the calculations required to meet the objectives quite straightforward. Further analysis such as building to histogram is possible since the calculations are preserved for all of the elves.\n\n\n\n\n\n\nExpand for Session Info\n\n\n\n\n\n\n\n─ Session info ───────────────────────────────────────────────────────────────\n setting  value\n version  R version 4.2.0 (2022-04-22 ucrt)\n os       Windows 10 x64 (build 19045)\n system   x86_64, mingw32\n ui       RTerm\n language (EN)\n collate  English_United States.utf8\n ctype    English_United States.utf8\n tz       America/Chicago\n date     2023-01-05\n pandoc   2.19.2 @ C:/Program Files/RStudio/resources/app/bin/quarto/bin/tools/ (via rmarkdown)\n quarto   1.2.269 @ C:\\\\PROGRA~1\\\\RStudio\\\\RESOUR~1\\\\app\\\\bin\\\\quarto\\\\bin\\\\quarto.exe\n\n─ Packages ───────────────────────────────────────────────────────────────────\n ! package     * version date (UTC) lib source\n P dplyr       * 1.0.10  2022-09-01 [?] CRAN (R 4.2.2)\n P forcats     * 0.5.2   2022-08-19 [?] CRAN (R 4.2.2)\n P ggplot2     * 3.3.6   2022-05-03 [?] CRAN (R 4.2.1)\n   purrr       * 0.3.5   2022-10-06 [2] CRAN (R 4.2.1)\n   readr       * 2.1.3   2022-10-01 [2] CRAN (R 4.2.1)\n P sessioninfo * 1.2.2   2021-12-06 [?] CRAN (R 4.2.1)\n P stringr     * 1.4.1   2022-08-20 [?] CRAN (R 4.2.1)\n P tibble      * 3.1.8   2022-07-22 [?] CRAN (R 4.2.1)\n   tidyr       * 1.2.1   2022-09-08 [2] CRAN (R 4.2.1)\n P tidyverse   * 1.3.2   2022-07-18 [?] CRAN (R 4.2.1)\n\n [1] C:/Users/David Zoller/AppData/Local/Temp/RtmpeWEZEz/renv-library-2d8446fa353c\n [2] C:/Users/David Zoller/Documents/datadavidz.github.io/renv/library/R-4.2/x86_64-w64-mingw32\n [3] C:/Users/David Zoller/AppData/Local/Temp/RtmpeWEZEz/renv-system-library\n\n P ── Loaded and on-disk path mismatch.\n\n──────────────────────────────────────────────────────────────────────────────"
  },
  {
    "objectID": "posts/2023-01-11_aoc_Day02_Lookup/2023-01-11_aoc_Day02_Lookup.html",
    "href": "posts/2023-01-11_aoc_Day02_Lookup/2023-01-11_aoc_Day02_Lookup.html",
    "title": "Advent of Code Day 2: Using Lookup Tables",
    "section": "",
    "text": "Rules are defined in lookup tables and joined to the input dataset in order to calculate a score for a Rocks-Paper-Scissors game."
  },
  {
    "objectID": "posts/2023-01-11_aoc_Day02_Lookup/2023-01-11_aoc_Day02_Lookup.html#introduction",
    "href": "posts/2023-01-11_aoc_Day02_Lookup/2023-01-11_aoc_Day02_Lookup.html#introduction",
    "title": "Advent of Code Day 2: Using Lookup Tables",
    "section": "Introduction",
    "text": "Introduction\nThis post explains my solution to the Advent of Code problem from Day 2. The scenario is that the elves are playing a game of rock-paper-scissors. You have a list of what your opponent chose where A is for Rock, B is for Paper and C is for Scissors and what you have chosen where X is for Rock, Y is for Paper and Z is for Scissors. So, the list looks something like this:\nA X\nC Y\nB Z\nB Y\nC X\nA X\nC Z\nYou need to determine the total score for the game. The score for each round is determined by what you chose to play (1 point for Rock, 2 points for Paper and 3 points for Scissors) and the result (0 points for a Loss, 3 points for a Draw and 6 points for a Win). In this case, of course, Rock beats Scissor, Paper beats Rock and Scissor beats Paper."
  },
  {
    "objectID": "posts/2023-01-11_aoc_Day02_Lookup/2023-01-11_aoc_Day02_Lookup.html#loading-and-analyzing-input-file",
    "href": "posts/2023-01-11_aoc_Day02_Lookup/2023-01-11_aoc_Day02_Lookup.html#loading-and-analyzing-input-file",
    "title": "Advent of Code Day 2: Using Lookup Tables",
    "section": "Loading and analyzing input file",
    "text": "Loading and analyzing input file\nThe input file has the structure as described in the introduction. The read_delim function from the readr package is used to load the file into a tibble (dataframe).\n\nlibrary(tidyverse)\nlibrary(gt)\n\nfilepath <- here::here(\"./posts/data/aoc/day02_input.txt\")\n\ndata <- read_delim(filepath, delim = \"\\n\", col_names = c(\"rounds\"))\n\nInitially, the data is loaded into a single column as a string with two characters separated by a space (e.g. “C Y”). I would prefer to separate the opponents choice and my choice into separate columns.\n\ndata <- data |> separate(rounds, into = c(\"opponent\", \"me\"), sep = \" \")\n\ndata |> slice(1:6) |> gt()\n\n\n\n\n\n  \n  \n    \n      opponent\n      me\n    \n  \n  \n    C\nY\n    B\nZ\n    B\nZ\n    C\nY\n    B\nY\n    C\nZ\n  \n  \n  \n\n\n\n\nNow, we define the scoring rules in lookup tables. The first table is for the points depending upon what you chose to play.\n\ntt_shape <- tribble(~me, ~shape_score,\n        \"X\", 1,\n        \"Y\", 2,\n        \"Z\", 3)\n\ntt_shape |> gt()\n\n\n\n\n\n  \n  \n    \n      me\n      shape_score\n    \n  \n  \n    X\n1\n    Y\n2\n    Z\n3\n  \n  \n  \n\n\n\n\nNext, we define a lookup table for the round result to define whether you win (W), lose (L) or draw (D).\n\ntt_result <- tribble(~opponent, ~me, ~result,\n        \"A\", \"X\", \"D\",\n        \"A\", \"Y\", \"W\",\n        \"A\", \"Z\", \"L\",\n        \"B\", \"X\", \"L\",\n        \"B\", \"Y\", \"D\",\n        \"B\", \"Z\", \"W\",\n        \"C\", \"X\", \"W\",\n        \"C\", \"Y\", \"L\",\n        \"C\", \"Z\", \"D\"\n        )\n\ntt_result |> gt()\n\n\n\n\n\n  \n  \n    \n      opponent\n      me\n      result\n    \n  \n  \n    A\nX\nD\n    A\nY\nW\n    A\nZ\nL\n    B\nX\nL\n    B\nY\nD\n    B\nZ\nW\n    C\nX\nW\n    C\nY\nL\n    C\nZ\nD\n  \n  \n  \n\n\n\n\nThe scoring for the win, loss and draw result is then defined.\n\ntt_rscore <- tribble(~result, ~result_score,\n        \"L\", 0,\n        \"D\", 3,\n        \"W\", 6)\n\ntt_rscore |> gt()\n\n\n\n\n\n  \n  \n    \n      result\n      result_score\n    \n  \n  \n    L\n0\n    D\n3\n    W\n6"
  },
  {
    "objectID": "posts/2023-01-11_aoc_Day02_Lookup/2023-01-11_aoc_Day02_Lookup.html#part-one-solution",
    "href": "posts/2023-01-11_aoc_Day02_Lookup/2023-01-11_aoc_Day02_Lookup.html#part-one-solution",
    "title": "Advent of Code Day 2: Using Lookup Tables",
    "section": "Part One: Solution",
    "text": "Part One: Solution\nThe goal for Part One is to calculate the total score for the rock-paper-scissors rounds contained in the input file. We can achieve this goal by applying the lookup tables to the input file data. A series of left joins is applied using dplyr is applied to the dataset, the score for each round is determined and then the scores for each round are summed to determine the total score.\n\ndata %>%\n  left_join(tt_shape, by = \"me\") %>%\n  left_join(tt_result, by = c(\"opponent\", \"me\")) %>%\n  left_join(tt_rscore, by = \"result\") %>%\n  rowwise() %>%\n  mutate(round_score = shape_score + result_score) %>%\n  ungroup() %>%\n  summarize(total_score = sum(round_score))\n\n# A tibble: 1 × 1\n  total_score\n        <dbl>\n1       13268"
  },
  {
    "objectID": "posts/2023-01-11_aoc_Day02_Lookup/2023-01-11_aoc_Day02_Lookup.html#part-two-solution",
    "href": "posts/2023-01-11_aoc_Day02_Lookup/2023-01-11_aoc_Day02_Lookup.html#part-two-solution",
    "title": "Advent of Code Day 2: Using Lookup Tables",
    "section": "Part Two: Solution",
    "text": "Part Two: Solution\nIn Part Two, we find out that the second column in the dataset containing the ‘X’, ‘Y’ and ‘Z’s do not refer to the choice played but rather the desired result for the round. So, we need to update the rules so that ’X’ is a loss, ‘Y’ is a draw and ‘Z’ is a draw therefore a new lookup table is created as shown below.\n\ntt_update <- tribble(~me, ~result,\n        \"X\", \"L\",\n        \"Y\", \"D\",\n        \"Z\", \"W\")\n\ntt_update |> gt()\n\n\n\n\n\n  \n  \n    \n      me\n      result\n    \n  \n  \n    X\nL\n    Y\nD\n    Z\nW\n  \n  \n  \n\n\n\n\nNow, we apply the rules update to determine the result and then the original tables are applied to determine the choice to play, the score for playing that choice and the score for the round result. Similarly to Part One, each round score is then calculated and summed to determine the total score.\n\ndata %>%\n  left_join(tt_update, by = \"me\") %>%\n  select(-me) %>%  #drop this column because the definition has changed\n  left_join(tt_result, by = c(\"opponent\", \"result\")) %>% #determine the new \"me\" column\n  left_join(tt_shape, by = \"me\") %>%\n  left_join(tt_rscore, by = \"result\") %>%\n  rowwise() %>%\n  mutate(round_score = shape_score + result_score) %>%\n  ungroup() %>%\n  summarize(total_score = sum(round_score))\n\n# A tibble: 1 × 1\n  total_score\n        <dbl>\n1       15508"
  },
  {
    "objectID": "posts/2023-01-11_aoc_Day02_Lookup/2023-01-11_aoc_Day02_Lookup.html#summary",
    "href": "posts/2023-01-11_aoc_Day02_Lookup/2023-01-11_aoc_Day02_Lookup.html#summary",
    "title": "Advent of Code Day 2: Using Lookup Tables",
    "section": "Summary",
    "text": "Summary\nIn this Advent of Code problem, lookup tables were created to represent the rules for scoring a rock-paper-scissors game in this fictitious scenario. The advantage of using lookup tables was seen in a subsequent rules change where a minimal amount of changes were required to calculate the new score.\n\n\n\n\n\n\nExpand for Session Info\n\n\n\n\n\n\n\n─ Session info ───────────────────────────────────────────────────────────────\n setting  value\n version  R version 4.2.2 (2022-10-31 ucrt)\n os       Windows 10 x64 (build 19045)\n system   x86_64, mingw32\n ui       RTerm\n language (EN)\n collate  English_United States.utf8\n ctype    English_United States.utf8\n tz       America/Chicago\n date     2023-01-19\n pandoc   2.19.2 @ C:/Program Files/RStudio/resources/app/bin/quarto/bin/tools/ (via rmarkdown)\n quarto   1.2.269 @ C:\\\\PROGRA~1\\\\RStudio\\\\RESOUR~1\\\\app\\\\bin\\\\quarto\\\\bin\\\\quarto.exe\n\n─ Packages ───────────────────────────────────────────────────────────────────\n ! package     * version date (UTC) lib source\n P dplyr       * 1.0.10  2022-09-01 [?] CRAN (R 4.2.2)\n P forcats     * 0.5.2   2022-08-19 [?] CRAN (R 4.2.2)\n P ggplot2     * 3.3.6   2022-05-03 [?] CRAN (R 4.2.1)\n P gt          * 0.8.0   2022-11-16 [?] CRAN (R 4.2.2)\n   purrr       * 0.3.5   2022-10-06 [2] CRAN (R 4.2.1)\n   readr       * 2.1.3   2022-10-01 [2] CRAN (R 4.2.1)\n P sessioninfo * 1.2.2   2021-12-06 [?] CRAN (R 4.2.1)\n P stringr     * 1.4.1   2022-08-20 [?] CRAN (R 4.2.1)\n P tibble      * 3.1.8   2022-07-22 [?] CRAN (R 4.2.1)\n   tidyr       * 1.2.1   2022-09-08 [2] CRAN (R 4.2.1)\n P tidyverse   * 1.3.2   2022-07-18 [?] CRAN (R 4.2.1)\n\n [1] C:/Users/David Zoller/AppData/Local/Temp/RtmpUFTZqi/renv-library-30cc735c13bd\n [2] C:/Users/David Zoller/Documents/datadavidz.github.io/renv/library/R-4.2/x86_64-w64-mingw32\n [3] C:/Users/David Zoller/AppData/Local/Temp/RtmpUFTZqi/renv-system-library\n\n P ── Loaded and on-disk path mismatch.\n\n──────────────────────────────────────────────────────────────────────────────"
  },
  {
    "objectID": "posts/2023-01-23_aoc_Day03_Strings/2023-01-23_aoc_Day03_Strings.html",
    "href": "posts/2023-01-23_aoc_Day03_Strings/2023-01-23_aoc_Day03_Strings.html",
    "title": "Advent of Code Day 3: Manipulating Strings",
    "section": "",
    "text": "Lists of elf items are contained within strings which are manipulated with the stringr package to determine loading priorities."
  },
  {
    "objectID": "posts/2023-01-23_aoc_Day03_Strings/2023-01-23_aoc_Day03_Strings.html#introduction",
    "href": "posts/2023-01-23_aoc_Day03_Strings/2023-01-23_aoc_Day03_Strings.html#introduction",
    "title": "Advent of Code Day 3: Manipulating Strings",
    "section": "Introduction",
    "text": "Introduction\nThis post explains my solution to the Advent of Code problem from Day 3. This time the elves need to load items into rucksacks and the list of items is represented by strings such as:\n\nlibrary(tidyverse)\n\nfilepath <- here::here(\"./posts/data/aoc/day03_input.txt\")\n\ndata <- read_delim(filepath, delim = \"\\n\", col_names = c(\"items\"))\ndata |> slice(1:5)\n\nEach character in each string represents an item. The first half of the items in the string go into the first compartment and the second half of the items go into the second compartment. The item which is in both the first half and second half of the string sets the priority where:\nThe lowercase letters from a to z have priorities 1 through 26.\nThe uppercase letters from A to Z have priorities 27 through 52.\nThis priority table is rather easily defined in R using the letters constant for lowercase a-z and LETTERS for uppercase A-Z.\n\nitem_priority <- tibble(item_name = c(letters, LETTERS),\n                        item_prio = 1:52)"
  },
  {
    "objectID": "posts/2023-01-23_aoc_Day03_Strings/2023-01-23_aoc_Day03_Strings.html#solution-to-part-one",
    "href": "posts/2023-01-23_aoc_Day03_Strings/2023-01-23_aoc_Day03_Strings.html#solution-to-part-one",
    "title": "Advent of Code Day 3: Manipulating Strings",
    "section": "Solution to Part One",
    "text": "Solution to Part One\nThe goal of part one is to determine the sum of the priorities for all of the item lists. Again, the priority is defined by the common item in the first and second half of the string. The first step is to separate each string into two halves. The midpoint is determined by dividing the string length by 2. Functions from the stringr package are used to find the string length (str_length) and then create the sub-strings (str_sub).\n\nsplit_data <- data |>\n  mutate(item_len = str_length(items)) |>\n  rowwise() |>\n  mutate(items_1 = str_sub(items, 1, item_len / 2)) |>\n  mutate(items_2 = str_sub(items, (item_len / 2) + 1, item_len)) |>\n  ungroup()\n\nhead(split_data)\n\n# A tibble: 6 × 4\n  items                                            item_len items_1      items_2\n  <chr>                                               <int> <chr>        <chr>  \n1 zBBtHnnHtwwHplmlRlzPLCpp                               24 zBBtHnnHtwwH plmlRl…\n2 vvhJccJFGFcNsdNNJbhJsJQplQMRLQMlfdfTPCLfQQCT           44 vvhJccJFGFc… QplQMR…\n3 GPhjcjhZDjWtnSVH                                       16 GPhjcjhZ     DjWtnS…\n4 BNhHVhrGNVTbDHdDJdJRPJdSQQSJwPjR                       32 BNhHVhrGNVT… JdJRPJ…\n5 lvtsfbsqzwSnJcvjSm                                     18 lvtsfbsqz    wSnJcv…\n6 MftttFLftZMLgtgMbltMqZzbDNrTpVGhNWrDTrpTGNpZGZhD       48 MftttFLftZM… DNrTpV…\n\n\nThe common item in both compartments is identified by using two more stringr package functions. The str_split function is used to create a list of the characters in each sub-string. The str_unique function (new to stringr 1.5.0) is used to create a list of only the unique characters in the substring. Finally, the intersect function from dplyr is used to find the common character is both lists.\n\ncommon_items <- split_data |>  \n  rowwise() |>\n  mutate(split_1 = str_split(items_1, \"\")) |>\n  mutate(split_2 = str_split(items_2, \"\")) |>\n  mutate(unique_1 = list(str_unique(unlist(split_1)))) |>\n  mutate(unique_2 = list(str_unique(unlist(split_2)))) |>\n  mutate(common_item = intersect(unique_1, unique_2)) |>\n  ungroup() |>\n  select(items_1, items_2, common_item)\n\ncommon_items |> slice(1:6)\n\n# A tibble: 6 × 3\n  items_1                  items_2                  common_item\n  <chr>                    <chr>                    <chr>      \n1 zBBtHnnHtwwH             plmlRlzPLCpp             z          \n2 vvhJccJFGFcNsdNNJbhJsJ   QplQMRLQMlfdfTPCLfQQCT   d          \n3 GPhjcjhZ                 DjWtnSVH                 j          \n4 BNhHVhrGNVTbDHdD         JdJRPJdSQQSJwPjR         d          \n5 lvtsfbsqz                wSnJcvjSm                v          \n6 MftttFLftZMLgtgMbltMqZzb DNrTpVGhNWrDTrpTGNpZGZhD Z          \n\n\nThe common_items are then joined with item_priority and then the priorities are summed to find the total priority.\n\nleft_join(common_items, item_priority, by = c(\"common_item\" = \"item_name\")) %>%\n  summarize(total_priority = sum(item_prio))\n\n# A tibble: 1 × 1\n  total_priority\n           <int>\n1           7597"
  },
  {
    "objectID": "posts/2023-01-23_aoc_Day03_Strings/2023-01-23_aoc_Day03_Strings.html#solution-to-part-two",
    "href": "posts/2023-01-23_aoc_Day03_Strings/2023-01-23_aoc_Day03_Strings.html#solution-to-part-two",
    "title": "Advent of Code Day 3: Manipulating Strings",
    "section": "Solution to Part Two",
    "text": "Solution to Part Two\nIn Part Two, we are informed that each elf is part of group consisting of three elves and each group has an identifying badge. Every set of three lines in the dataset represents one group and the common item among all three lines is the badge. Priorities for the items are the same as defined in Part One where a-z is 1 to 26 and A-Z is 27 to 52. The question is what is the sum of the priorities for the group badges.\nIn this case, we do not need to split the strings in half but we do need to identify the unique characters in each string similar to Part One.\n\nunique_data <- data |>\n  rowwise() |>\n  mutate(items_split = str_split(items, \"\")) |>\n  mutate(items_unique = list(str_unique(unlist(items_split)))) |>\n  ungroup()\n\nunique_data |> slice(1:6)\n\n# A tibble: 6 × 3\n  items                                            items_split items_unique\n  <chr>                                            <list>      <list>      \n1 zBBtHnnHtwwHplmlRlzPLCpp                         <chr [24]>  <chr [13]>  \n2 vvhJccJFGFcNsdNNJbhJsJQplQMRLQMlfdfTPCLfQQCT     <chr [44]>  <chr [20]>  \n3 GPhjcjhZDjWtnSVH                                 <chr [16]>  <chr [13]>  \n4 BNhHVhrGNVTbDHdDJdJRPJdSQQSJwPjR                 <chr [32]>  <chr [18]>  \n5 lvtsfbsqzwSnJcvjSm                               <chr [18]>  <chr [15]>  \n6 MftttFLftZMLgtgMbltMqZzbDNrTpVGhNWrDTrpTGNpZGZhD <chr [48]>  <chr [20]>  \n\n\nNow we need to identify the groups by introducing a new id column, elf_group, for each set of three lines. We then group_by this new column and find the intersection between the first two lines and the result is intersected with the last line to find the common item. The Reduce function is used to iteratively apply the function with two arguments at a time.\n\nbadge_data <- unique_data |>\n  mutate(elf_group = rep(1:(nrow(data) %/% 3), each = 3)) |>\n  mutate(elf_group = as.factor(elf_group)) |>\n  group_by(elf_group) |>\n  summarize(badge = Reduce(intersect, items_unique), .groups = \"drop\")\n\nbadge_data |> slice(1:6)\n\n# A tibble: 6 × 2\n  elf_group badge\n  <fct>     <chr>\n1 1         P    \n2 2         b    \n3 3         Z    \n4 4         S    \n5 5         q    \n6 6         c    \n\n\nThe total priority for the badge items is then calculated by joining with item_priority.\n\nleft_join(badge_data, item_priority, by = c(\"badge\" = \"item_name\")) %>%\n  summarize(total_priority = sum(item_prio))\n\n# A tibble: 1 × 1\n  total_priority\n           <int>\n1           2607"
  },
  {
    "objectID": "posts/2023-01-23_aoc_Day03_Strings/2023-01-23_aoc_Day03_Strings.html#summary",
    "href": "posts/2023-01-23_aoc_Day03_Strings/2023-01-23_aoc_Day03_Strings.html#summary",
    "title": "Advent of Code Day 3: Manipulating Strings",
    "section": "Summary",
    "text": "Summary\nThis Advent of Code problem provided a great opportunity to brush up on some useful stringr functions. It was also interesting to keep all of the data transformations in tibble columns. A nice application of the Reduce function (base R!) was used to find the common item among several strings.\n\n\n\n\n\n\nExpand for Session Info\n\n\n\n\n\n\n\n─ Session info ───────────────────────────────────────────────────────────────\n setting  value\n version  R version 4.2.2 (2022-10-31 ucrt)\n os       Windows 10 x64 (build 19045)\n system   x86_64, mingw32\n ui       RTerm\n language (EN)\n collate  English_United States.utf8\n ctype    English_United States.utf8\n tz       America/Chicago\n date     2023-02-02\n pandoc   2.19.2 @ C:/Program Files/RStudio/resources/app/bin/quarto/bin/tools/ (via rmarkdown)\n quarto   1.2.269 @ C:\\\\PROGRA~1\\\\RStudio\\\\RESOUR~1\\\\app\\\\bin\\\\quarto\\\\bin\\\\quarto.exe\n\n─ Packages ───────────────────────────────────────────────────────────────────\n ! package     * version date (UTC) lib source\n P dplyr       * 1.0.10  2022-09-01 [?] CRAN (R 4.2.2)\n P forcats     * 0.5.2   2022-08-19 [?] CRAN (R 4.2.2)\n P ggplot2     * 3.3.6   2022-05-03 [?] CRAN (R 4.2.1)\n   purrr       * 0.3.5   2022-10-06 [2] CRAN (R 4.2.1)\n   readr       * 2.1.3   2022-10-01 [2] CRAN (R 4.2.1)\n P sessioninfo * 1.2.2   2021-12-06 [?] CRAN (R 4.2.1)\n P stringr     * 1.5.0   2022-12-02 [?] CRAN (R 4.2.2)\n P tibble      * 3.1.8   2022-07-22 [?] CRAN (R 4.2.1)\n   tidyr       * 1.2.1   2022-09-08 [2] CRAN (R 4.2.1)\n P tidyverse   * 1.3.2   2022-07-18 [?] CRAN (R 4.2.1)\n\n [1] C:/Users/David Zoller/AppData/Local/Temp/RtmpUHj1Wl/renv-library-24087b9d1284\n [2] C:/Users/David Zoller/Documents/datadavidz.github.io/renv/library/R-4.2/x86_64-w64-mingw32\n [3] C:/Users/David Zoller/AppData/Local/Temp/RtmpUHj1Wl/renv-system-library\n\n P ── Loaded and on-disk path mismatch.\n\n──────────────────────────────────────────────────────────────────────────────"
  },
  {
    "objectID": "posts/2023-02-07_aoc_Day04_Separate/2023-02-07_aoc_Day04_Separate.html",
    "href": "posts/2023-02-07_aoc_Day04_Separate/2023-02-07_aoc_Day04_Separate.html",
    "title": "Advent of Code Day 4: Separate",
    "section": "",
    "text": "Contiguous sections to be cleaned by the elves are parsed from the input file to identify overlapping assignments."
  },
  {
    "objectID": "posts/2023-02-07_aoc_Day04_Separate/2023-02-07_aoc_Day04_Separate.html#introduction",
    "href": "posts/2023-02-07_aoc_Day04_Separate/2023-02-07_aoc_Day04_Separate.html#introduction",
    "title": "Advent of Code Day 4: Separate",
    "section": "Introduction",
    "text": "Introduction\nThis post explains my solution to the Advent of Code problem from Day 4. The contiguous sections for each set of elf cleaning crews is listed as one line separated by a comma. Each contiguous section for each crew is listed as first section to be cleaned and last section to be cleaned separated by a hyphen.\n\nlibrary(tidyverse)\n\nfilepath <- here::here(\"./posts/data/aoc/day04_input.txt\")\n\ndata <- read_delim(filepath, delim = \"\\n\", col_names = c(\"assignments\"))\n\nSo, in the first line, crew 1 is assigned to clean section 31 (i.e. first and last section to be cleaned). Crew 2 is assigned to clean from section 32 to section 40. We can parse these input lines using the separate function from the tidyr package.\n\nsplit_data <- data |>\n  separate(assignments, c(\"clean_1\", \"clean_2\"), sep = \",\") |>\n  separate(clean_1, c(\"clean_1_start\", \"clean_1_end\"), sep = \"-\") |>\n  separate(clean_2, c(\"clean_2_start\", \"clean_2_end\"), sep = \"-\") |>\n  mutate_if(is.character, as.integer)\n\nsplit_data |> slice(1:5)\n\n# A tibble: 5 × 4\n  clean_1_start clean_1_end clean_2_start clean_2_end\n          <int>       <int>         <int>       <int>\n1            31          31            32          40\n2            26          92            13          91\n3             9          90            29          91\n4            72          72            25          73\n5            28          79            79          79"
  },
  {
    "objectID": "posts/2023-02-07_aoc_Day04_Separate/2023-02-07_aoc_Day04_Separate.html#solution-to-part-one",
    "href": "posts/2023-02-07_aoc_Day04_Separate/2023-02-07_aoc_Day04_Separate.html#solution-to-part-one",
    "title": "Advent of Code Day 4: Separate",
    "section": "Solution to Part One",
    "text": "Solution to Part One\nThe first question is to find for how many assignments are the assigned sections for one cleaning crew completely contained within the assigned sections for the other cleaning crew. For example, if cleaning crew 1 is assigned sections 2-8 and cleaning crew 2 is assigned sections 3-5 then the assignment for crew 2 is contained within the assignment for crew 1.\n\noverlap_data <- split_data |>\n  rowwise() |>\n  mutate(overlap = (clean_1_start <= clean_2_start) & (clean_1_end >= clean_2_end) |     #clean 2 contained within clean 1 or\n                   (clean_1_start >= clean_2_start) & (clean_1_end <= clean_2_end)) |>   #clean 1 contained within clean 2\n  ungroup()\n\noverlap_data |> slice(1:5)\n\n# A tibble: 5 × 5\n  clean_1_start clean_1_end clean_2_start clean_2_end overlap\n          <int>       <int>         <int>       <int> <lgl>  \n1            31          31            32          40 FALSE  \n2            26          92            13          91 FALSE  \n3             9          90            29          91 FALSE  \n4            72          72            25          73 TRUE   \n5            28          79            79          79 TRUE   \n\n\nYou can then add up all of rows where overlap is TRUE to find the answer to Part One.\n\noverlap_data |>\n  summarize(total_overlaps = sum(overlap))\n\n# A tibble: 1 × 1\n  total_overlaps\n           <int>\n1            556"
  },
  {
    "objectID": "posts/2023-02-07_aoc_Day04_Separate/2023-02-07_aoc_Day04_Separate.html#solution-to-part-two",
    "href": "posts/2023-02-07_aoc_Day04_Separate/2023-02-07_aoc_Day04_Separate.html#solution-to-part-two",
    "title": "Advent of Code Day 4: Separate",
    "section": "Solution to Part Two",
    "text": "Solution to Part Two\nThe second question is for how many of the assignments do the sections for crew 1 and crew 2 overlap at all. The easier way to answer this question is to find the assignments with no overlap. You just need to check if the ending section for crew 1 is less than the starting section for crew 2 or the ending section for crew 2 is less than the starting section for crew 1.\n\npartial_overlap_data <- split_data |>\n  rowwise() |>\n  mutate(no_overlap = (clean_1_end < clean_2_start) | (clean_2_end < clean_1_start)) |>\n  ungroup()\n\npartial_overlap_data |> slice(1:5)\n\n# A tibble: 5 × 5\n  clean_1_start clean_1_end clean_2_start clean_2_end no_overlap\n          <int>       <int>         <int>       <int> <lgl>     \n1            31          31            32          40 TRUE      \n2            26          92            13          91 FALSE     \n3             9          90            29          91 FALSE     \n4            72          72            25          73 FALSE     \n5            28          79            79          79 FALSE     \n\n\nYou can then add up all the rows where no_overlap is TRUE and subtract from the total number of rows (assignments).\n\npartial_overlap_data |>\n  summarize(total_partial_overlap = nrow(partial_overlap_data) - sum(no_overlap))\n\n# A tibble: 1 × 1\n  total_partial_overlap\n                  <int>\n1                   876"
  },
  {
    "objectID": "posts/2023-02-07_aoc_Day04_Separate/2023-02-07_aoc_Day04_Separate.html#summary",
    "href": "posts/2023-02-07_aoc_Day04_Separate/2023-02-07_aoc_Day04_Separate.html#summary",
    "title": "Advent of Code Day 4: Separate",
    "section": "Summary",
    "text": "Summary\nThe problem for Day 4 was pretty straightforward in implementing the logical tests once the input data was tidied. The separate function made it easy to parse the input data into a tibble and then perform row-wise calculations.\n\n\n\n\n\n\nExpand for Session Info\n\n\n\n\n\n\n\n─ Session info ───────────────────────────────────────────────────────────────\n setting  value\n version  R version 4.2.2 (2022-10-31 ucrt)\n os       Windows 10 x64 (build 19045)\n system   x86_64, mingw32\n ui       RTerm\n language (EN)\n collate  English_United States.utf8\n ctype    English_United States.utf8\n tz       America/Chicago\n date     2023-02-07\n pandoc   2.19.2 @ C:/Program Files/RStudio/resources/app/bin/quarto/bin/tools/ (via rmarkdown)\n quarto   1.2.269 @ C:\\\\PROGRA~1\\\\RStudio\\\\RESOUR~1\\\\app\\\\bin\\\\quarto\\\\bin\\\\quarto.exe\n\n─ Packages ───────────────────────────────────────────────────────────────────\n ! package     * version date (UTC) lib source\n P dplyr       * 1.0.10  2022-09-01 [?] CRAN (R 4.2.2)\n P forcats     * 0.5.2   2022-08-19 [?] CRAN (R 4.2.2)\n P ggplot2     * 3.3.6   2022-05-03 [?] CRAN (R 4.2.1)\n   purrr       * 0.3.5   2022-10-06 [2] CRAN (R 4.2.1)\n   readr       * 2.1.3   2022-10-01 [2] CRAN (R 4.2.1)\n P sessioninfo * 1.2.2   2021-12-06 [?] CRAN (R 4.2.1)\n P stringr     * 1.5.0   2022-12-02 [?] CRAN (R 4.2.2)\n P tibble      * 3.1.8   2022-07-22 [?] CRAN (R 4.2.1)\n   tidyr       * 1.2.1   2022-09-08 [2] CRAN (R 4.2.1)\n P tidyverse   * 1.3.2   2022-07-18 [?] CRAN (R 4.2.1)\n\n [1] C:/Users/David Zoller/AppData/Local/Temp/RtmpGugBWK/renv-library-38782e7835ab\n [2] C:/Users/David Zoller/Documents/datadavidz.github.io/renv/library/R-4.2/x86_64-w64-mingw32\n [3] C:/Users/David Zoller/AppData/Local/Temp/RtmpGugBWK/renv-system-library\n\n P ── Loaded and on-disk path mismatch.\n\n──────────────────────────────────────────────────────────────────────────────"
  },
  {
    "objectID": "posts/2023-04-14_aoc_Day05_Stacks/2023-04-14_aoc_Day05_Stacks.html",
    "href": "posts/2023-04-14_aoc_Day05_Stacks/2023-04-14_aoc_Day05_Stacks.html",
    "title": "Advent of Code Day 5: Stacking Crates",
    "section": "",
    "text": "Using base R to read a custom, input file format and manipulate the data in lists"
  },
  {
    "objectID": "posts/2023-04-14_aoc_Day05_Stacks/2023-04-14_aoc_Day05_Stacks.html#introduction",
    "href": "posts/2023-04-14_aoc_Day05_Stacks/2023-04-14_aoc_Day05_Stacks.html#introduction",
    "title": "Advent of Code Day 5: Stacking Crates",
    "section": "Introduction",
    "text": "Introduction\nThis post explains my solution to the Advent of Code problem from Day 5. Supplies for the elves’ expedition are loaded in crates which are contained in nine stacks. Unfortunately, the order of the crates in each stack is not correct and a crane operator needs to move the crates between the stacks until all the crates are in the correct order for unloading."
  },
  {
    "objectID": "posts/2023-04-14_aoc_Day05_Stacks/2023-04-14_aoc_Day05_Stacks.html#loading-the-input-file",
    "href": "posts/2023-04-14_aoc_Day05_Stacks/2023-04-14_aoc_Day05_Stacks.html#loading-the-input-file",
    "title": "Advent of Code Day 5: Stacking Crates",
    "section": "Loading the input file",
    "text": "Loading the input file\nThe input file consists of two sections. The first section contains a visual representation of the positioning of the crates in each of the nine stacks. The second section contains the instructions for the crane operator to move crates from one stack to another. The text for the first section is shown below.\n[V]     [B]                     [F]\n[N] [Q] [W]                 [R] [B]\n[F] [D] [S]     [B]         [L] [P]\n[S] [J] [C]     [F] [C]     [D] [G]\n[M] [M] [H] [L] [P] [N]     [P] [V]\n[P] [L] [D] [C] [T] [Q] [R] [S] [J]\n[H] [R] [Q] [S] [V] [R] [V] [Z] [S]\n[J] [S] [N] [R] [M] [T] [G] [C] [D]\n 1   2   3   4   5   6   7   8   9 \nThe first step is to read the first 8 lines containing the crate locations into character strings. In this case, the length of the 8 strings are the same which makes it easier to handle. We also define the position of the crate labels (i.e. letter) as the brackets do not add much other than helping with the visual representation.\n\nfilepath <- here::here(\"./posts/data/aoc/day05_input.txt\")\n\nboxlines <- readLines(filepath, n=8L)\n\ncpositions <- c(2, 6, 10, 14, 18, 22, 26, 30, 34)\n\nNext, I defined two functions. The first function, extract_chars extracts the letters from one of the strings at the correct positions. The second function, extract_lines uses extract_chars to extract all of the lines and merge into one list containing all nine stack labels.\n\nextract_chars <- function(stringToExtract, charPositions) {\n  char_list <- list()\n  for (n in 1:length(charPositions)) {\n    char_list <- c(char_list, substring(stringToExtract, charPositions[n], charPositions[n]))\n  }\n  return(char_list)\n}\n\nextract_lines <- function(stringsToExtract, charPositions) {\n  list1 <- extract_chars(stringsToExtract[1], charPositions)\n  for (i in 2:length(stringsToExtract)) {\n    list2 <- extract_chars(stringsToExtract[i], charPositions)\n    list1 <- mapply(c, list1, list2, SIMPLIFY = FALSE)\n  }\n  return(list1)\n}\n\nThe lines read from the input file and the positions of the crate labels are used as the arguments for extract_lines to generate the desired list object.\n\nbox_lists <- extract_lines(boxlines, cpositions)\n\nstr(box_lists)\n\nList of 9\n $ : chr [1:8] \"V\" \"N\" \"F\" \"S\" ...\n $ : chr [1:8] \" \" \"Q\" \"D\" \"J\" ...\n $ : chr [1:8] \"B\" \"W\" \"S\" \"C\" ...\n $ : chr [1:8] \" \" \" \" \" \" \" \" ...\n $ : chr [1:8] \" \" \" \" \"B\" \"F\" ...\n $ : chr [1:8] \" \" \" \" \" \" \"C\" ...\n $ : chr [1:8] \" \" \" \" \" \" \" \" ...\n $ : chr [1:8] \" \" \"R\" \"L\" \"D\" ...\n $ : chr [1:8] \"F\" \"B\" \"P\" \"G\" ...\n\n\nThe blank spaces need to removed from the character vectors as they are not needed and would only interfere with subsequent manipulations. A simple for loop is used for this purpose.\n\nfor (i in 1:length(box_lists)) {\n  box_lists[[i]] <- box_lists[[i]][box_lists[[i]] != \" \"]\n}\n\nstr(box_lists)\n\nList of 9\n $ : chr [1:8] \"V\" \"N\" \"F\" \"S\" ...\n $ : chr [1:7] \"Q\" \"D\" \"J\" \"M\" ...\n $ : chr [1:8] \"B\" \"W\" \"S\" \"C\" ...\n $ : chr [1:4] \"L\" \"C\" \"S\" \"R\"\n $ : chr [1:6] \"B\" \"F\" \"P\" \"T\" ...\n $ : chr [1:5] \"C\" \"N\" \"Q\" \"R\" ...\n $ : chr [1:3] \"R\" \"V\" \"G\"\n $ : chr [1:7] \"R\" \"L\" \"D\" \"P\" ...\n $ : chr [1:8] \"F\" \"B\" \"P\" \"G\" ...\n\n\nThe box_lists object now has the crates labels for each stack in order from top to bottom. Now, we need to read the crane operator instructions which is beneath the first section and separated by a blank line. The script for reading the lines containing the instructions is listed below. There is a flag, start_collecting to indicate where the second section begins (after the blank line).\n\nstart_collecting <- 0\nbox_moves <- list()\nline_number <- 0\n\ncon = file(filepath, \"r\")\nwhile (TRUE) {\n  # line_number <- line_number + 1\n  oneLine = readLines(con, n = 1)\n  # print(oneLine)\n  if (length(oneLine) == 0) {\n    break\n  }\n  if (start_collecting == 0 & nchar(oneLine) == 0) {\n    start_collecting <- 1\n    # print(\"Started collecting\")\n  }\n  if (start_collecting == 1) {\n    if (nchar(oneLine) > 0)  \n    box_moves <- c(box_moves, oneLine)\n  }\n}\nclose(con)\n\nhead(box_moves, 5)\n\n[[1]]\n[1] \"move 1 from 8 to 4\"\n\n[[2]]\n[1] \"move 1 from 7 to 8\"\n\n[[3]]\n[1] \"move 1 from 6 to 3\"\n\n[[4]]\n[1] \"move 2 from 6 to 5\"\n\n[[5]]\n[1] \"move 8 from 5 to 1\"\n\n\nThe instruction explain how many crates to move and then from which stack and to which stack. For example, the first instruction listed above indicates to move 1 crate from the top of stack 8 to the top of stack 4. The instructions are parsed so that the numbers can accessed directly.\n\nbox_moves_parsed <- sapply(box_moves, function(x) strsplit(x, split = \" \"))\n\nhead(box_moves_parsed, 5)\n\n[[1]]\n[1] \"move\" \"1\"    \"from\" \"8\"    \"to\"   \"4\"   \n\n[[2]]\n[1] \"move\" \"1\"    \"from\" \"7\"    \"to\"   \"8\"   \n\n[[3]]\n[1] \"move\" \"1\"    \"from\" \"6\"    \"to\"   \"3\"   \n\n[[4]]\n[1] \"move\" \"2\"    \"from\" \"6\"    \"to\"   \"5\"   \n\n[[5]]\n[1] \"move\" \"8\"    \"from\" \"5\"    \"to\"   \"1\""
  },
  {
    "objectID": "posts/2023-04-14_aoc_Day05_Stacks/2023-04-14_aoc_Day05_Stacks.html#moving-the-crates",
    "href": "posts/2023-04-14_aoc_Day05_Stacks/2023-04-14_aoc_Day05_Stacks.html#moving-the-crates",
    "title": "Advent of Code Day 5: Stacking Crates",
    "section": "Moving the Crates",
    "text": "Moving the Crates\nNow that both sections of the input file have been loaded into R objects, the crate operator instructions can be applied. The input file contained 504 instruction steps! A new function is created to adjust the stack lists contained in box_lists based on the instruction step. An important part, that I initially missed, is that for the first “9000 model” crane the crates are moved one at a time even when more than one crate is listed in the step. The top crate is moved and then the subsequent crates one-by-one. This results in the crates being moved ending up in reverse order on top of the stack they are moved to.\n\napply_instruction_step <- function(current_box_lists, move_step, model = \"9000\") {\n  num_boxes <- as.numeric(move_step[2])\n  #print(num_boxes)\n  from_loc <- as.numeric(move_step[4])\n  #print(from_loc)\n  to_loc <- as.numeric(move_step[6])\n  #print(to_loc)\n  if (model == \"9000\") {\n    current_box_lists[[to_loc]] <- c(current_box_lists[[from_loc]][(num_boxes:1)], current_box_lists[[to_loc]])\n  } else {\n    current_box_lists[[to_loc]] <- c(current_box_lists[[from_loc]][(1:num_boxes)], current_box_lists[[to_loc]])\n  }\n  #print(current_box_lists[[to_loc]])\n  current_box_lists[[from_loc]] <- current_box_lists[[from_loc]][-(1:num_boxes)]\n  #print(current_box_lists[[from_loc]])\n  return(current_box_lists)\n}\n\nNow, I run the function for all of the instructions. Once all steps are completed, the top crate for each stack is identified and the puzzle answer.\n\ntemp <- box_lists\nfor (i in 1:length(box_moves_parsed)) {\n  temp <- apply_instruction_step(temp, box_moves_parsed[[i]], model = \"9000\")\n}\n\n# Show the label for the top crate for each stack\nsapply(temp, '[[', 1)\n\n[1] \"S\" \"B\" \"P\" \"Q\" \"R\" \"S\" \"C\" \"D\" \"F\"\n\n\nPart two of the puzzle involves an upgrade of the crane to “model 9001”. The new crane can now move multiple boxes instead of one at a time. So, now the crates are moved in order rather than the reverse order for the “model 9000” crane. We already have built this argument into our apply_instruction_step function.\n\ntemp <- box_lists\nfor (i in 1:length(box_moves_parsed)) {\n  temp <- apply_instruction_step(temp, box_moves_parsed[[i]], model = \"9001\")\n}\n\n# Show the label for the top crate for each stack\nsapply(temp, '[[', 1)\n\n[1] \"R\" \"G\" \"L\" \"V\" \"R\" \"C\" \"Q\" \"S\" \"B\""
  },
  {
    "objectID": "posts/2023-04-14_aoc_Day05_Stacks/2023-04-14_aoc_Day05_Stacks.html#summary",
    "href": "posts/2023-04-14_aoc_Day05_Stacks/2023-04-14_aoc_Day05_Stacks.html#summary",
    "title": "Advent of Code Day 5: Stacking Crates",
    "section": "Summary",
    "text": "Summary\nThe Day 5 puzzle required quite a bit of thinking about how to load the input file in order to solve the puzzle. I chose to load the data into strings for manipulation using base R commands. Initially, I missed the difference between the model 9000 and model 9001 cranes in my first read which led to some head-scratching on why my part one solution wasn’t right. Always read the instructions thoroughly!\n\n\n\n\n\n\nExpand for Session Info\n\n\n\n\n\n\n\n─ Session info ───────────────────────────────────────────────────────────────\n setting  value\n version  R version 4.2.2 (2022-10-31 ucrt)\n os       Windows 10 x64 (build 19045)\n system   x86_64, mingw32\n ui       RTerm\n language (EN)\n collate  English_United States.utf8\n ctype    English_United States.utf8\n tz       America/Chicago\n date     2023-04-14\n pandoc   2.19.2 @ C:/Program Files/RStudio/resources/app/bin/quarto/bin/tools/ (via rmarkdown)\n quarto   1.2.335 @ C:\\\\PROGRA~1\\\\RStudio\\\\RESOUR~1\\\\app\\\\bin\\\\quarto\\\\bin\\\\quarto.exe\n\n─ Packages ───────────────────────────────────────────────────────────────────\n ! package     * version date (UTC) lib source\n P sessioninfo * 1.2.2   2021-12-06 [?] CRAN (R 4.2.1)\n\n [1] C:/Users/David Zoller/AppData/Local/Temp/RtmpET91Kg/renv-library-9d037ae2570\n [2] C:/Users/David Zoller/Documents/datadavidz.github.io/renv/library/R-4.2/x86_64-w64-mingw32\n [3] C:/Users/David Zoller/AppData/Local/Temp/RtmpET91Kg/renv-system-library\n\n P ── Loaded and on-disk path mismatch.\n\n──────────────────────────────────────────────────────────────────────────────"
  },
  {
    "objectID": "posts/2023-04-25_aoc_Day06_Decode/2023-04-25_aoc_Day06_Decode.html",
    "href": "posts/2023-04-25_aoc_Day06_Decode/2023-04-25_aoc_Day06_Decode.html",
    "title": "Advent of Code Day 6: Decoding Signals",
    "section": "",
    "text": "Find a start-of-packet marker in a string of characters"
  },
  {
    "objectID": "posts/2023-04-25_aoc_Day06_Decode/2023-04-25_aoc_Day06_Decode.html#introduction",
    "href": "posts/2023-04-25_aoc_Day06_Decode/2023-04-25_aoc_Day06_Decode.html#introduction",
    "title": "Advent of Code Day 6: Decoding Signals",
    "section": "Introduction",
    "text": "Introduction\nThis post explains my solution to the Advent of Code problem from Day 6. You have a defective communication device that you need to fix in order to communicate with the other elves. You must write a subroutine to identify a start-of-packet marker in the incoming datastream."
  },
  {
    "objectID": "posts/2023-04-25_aoc_Day06_Decode/2023-04-25_aoc_Day06_Decode.html#loading-the-input-file",
    "href": "posts/2023-04-25_aoc_Day06_Decode/2023-04-25_aoc_Day06_Decode.html#loading-the-input-file",
    "title": "Advent of Code Day 6: Decoding Signals",
    "section": "Loading the input file",
    "text": "Loading the input file\nThe input file consists of a long, string of characters (4096 characters long). I used the file_read function from the readr package in order to read the whole file directly into a string object. I then parsed the string by character using the str_split from the stringr package as shown below.\n\nlibrary(readr)\nlibrary(stringr)\n\n\nfilepath <- here::here(\"./posts/data/aoc/day06_input.txt\")\nfile_str <- read_file(filepath)\n\nfile_split <- str_split(file_str, boundary(\"character\"))[[1]]"
  },
  {
    "objectID": "posts/2023-04-25_aoc_Day06_Decode/2023-04-25_aoc_Day06_Decode.html#finding-the-start-of-packet-marker",
    "href": "posts/2023-04-25_aoc_Day06_Decode/2023-04-25_aoc_Day06_Decode.html#finding-the-start-of-packet-marker",
    "title": "Advent of Code Day 6: Decoding Signals",
    "section": "Finding the start-of-packet marker",
    "text": "Finding the start-of-packet marker\nThe goal of the first part of the puzzle is to identify the first occurrence of the start-of-packet marker. This marker is denoted by four characters which are all different. For example, in the string below:\nmjqjpqmgbljsphdztnvjfqwrcgsmlb\nThe first time four different characters are detected in the sequence is after the 7th character is received and you have the sequence “jpqm”. The goal is to report the number of characters processed before this start-of-packet marker is found in the input data. The subroutine can be written quite easily by determining the number of unique characters in the 4 character buffer as it traverses the input data string. There are different ways to handle the first three characters. The way it is handled below is the buffer is initiated by replicating the first character 3 times. It could be handled in other ways such as not analyzing for uniqueness until the first four characters are loaded or initialize the buffer with the first four characters and begin the loop at the fifth character.\n\nmarker_length <- 4\nbuffer <- rep(file_split[1], marker_length-1)\ncposition <- 0\n\nfor (i in 1:length(file_split)) {\n  cposition <- cposition + 1\n  if (length(unique(c(buffer, file_split[i]))) == marker_length) {\n    break\n  } else {\n    buffer <- c(buffer[2:(marker_length-1)], file_split[i])\n  }\n}\n\ncposition\n\n[1] 1300\n\n\nIn this case, cposition gives the number of characters processed before the start-of-packet marker sequence is detected. The buffer is updated by adding the new character and checking to see if the unique characters is equal to 4. If equal to 4, the for loop is stopped and cposition is reported. If not equal to 4, the first (oldest) character in the buffer is removed and the loop is continued. For my input data file, 1300 characters are processed before the start-of-packet marker is detected."
  },
  {
    "objectID": "posts/2023-04-25_aoc_Day06_Decode/2023-04-25_aoc_Day06_Decode.html#finding-the-start-of-message-marker",
    "href": "posts/2023-04-25_aoc_Day06_Decode/2023-04-25_aoc_Day06_Decode.html#finding-the-start-of-message-marker",
    "title": "Advent of Code Day 6: Decoding Signals",
    "section": "Finding the start-of-message marker",
    "text": "Finding the start-of-message marker\nThe goal of the second part of the puzzle is to find the start-of-message marker which is represented by 14 distinct characters instead of the 4 distinct characters from the first part. Detecting this marker just requires updating the value of the marker_length to 14 in the code used in part one.\n\nmarker_length <- 14\nbuffer <- rep(file_split[1], marker_length-1)\ncposition <- 0\n\nfor (i in 1:length(file_split)) {\n  cposition <- cposition + 1\n  if (length(unique(c(buffer, file_split[i]))) == marker_length) {\n    break\n  } else {\n    buffer <- c(buffer[2:(marker_length-1)], file_split[i])\n  }\n}\n\ncposition\n\n[1] 3986\n\n\nFor part two, 3986 characters are processed before the start-of-message marker is detected. Since the code is reused with only a change in the value of marker_length a function could be created with an argument to pass any marker length value. I did not do this step here as the puzzle answers had already been determined."
  },
  {
    "objectID": "posts/2023-04-25_aoc_Day06_Decode/2023-04-25_aoc_Day06_Decode.html#summary",
    "href": "posts/2023-04-25_aoc_Day06_Decode/2023-04-25_aoc_Day06_Decode.html#summary",
    "title": "Advent of Code Day 6: Decoding Signals",
    "section": "Summary",
    "text": "Summary\nThe Day 6 puzzle was quite straightforward especially with the use of the unique function in base R. Functions from readr and stringr made it easy to process the input file into the desired character vector.\n:::{.callout-tip collapse=“true”} ## Expand for Session Info\n\n\n─ Session info ───────────────────────────────────────────────────────────────\n setting  value\n version  R version 4.2.2 (2022-10-31 ucrt)\n os       Windows 10 x64 (build 19045)\n system   x86_64, mingw32\n ui       RTerm\n language (EN)\n collate  English_United States.utf8\n ctype    English_United States.utf8\n tz       America/Chicago\n date     2023-04-25\n pandoc   2.19.2 @ C:/Program Files/RStudio/resources/app/bin/quarto/bin/tools/ (via rmarkdown)\n quarto   1.2.335 @ C:\\\\PROGRA~1\\\\RStudio\\\\RESOUR~1\\\\app\\\\bin\\\\quarto\\\\bin\\\\quarto.exe\n\n─ Packages ───────────────────────────────────────────────────────────────────\n ! package     * version date (UTC) lib source\n   readr       * 2.1.3   2022-10-01 [2] CRAN (R 4.2.1)\n P sessioninfo * 1.2.2   2021-12-06 [?] CRAN (R 4.2.1)\n P stringr     * 1.5.0   2022-12-02 [?] CRAN (R 4.2.2)\n\n [1] C:/Users/David Zoller/AppData/Local/Temp/RtmpY9P3B9/renv-library-39b433b787d\n [2] C:/Users/David Zoller/Documents/datadavidz.github.io/renv/library/R-4.2/x86_64-w64-mingw32\n [3] C:/Users/David Zoller/AppData/Local/Temp/RtmpY9P3B9/renv-system-library\n\n P ── Loaded and on-disk path mismatch.\n\n──────────────────────────────────────────────────────────────────────────────"
  },
  {
    "objectID": "posts/2023-05-05_aoc_Day07_Filepaths/2023-05-05_aoc_Day07_Filepaths.html",
    "href": "posts/2023-05-05_aoc_Day07_Filepaths/2023-05-05_aoc_Day07_Filepaths.html",
    "title": "Advent of Code Day 7: Tracking file paths",
    "section": "",
    "text": "Track the directory paths and file sizes from a series of OS commands"
  },
  {
    "objectID": "posts/2023-05-05_aoc_Day07_Filepaths/2023-05-05_aoc_Day07_Filepaths.html#introduction",
    "href": "posts/2023-05-05_aoc_Day07_Filepaths/2023-05-05_aoc_Day07_Filepaths.html#introduction",
    "title": "Advent of Code Day 7: Tracking file paths",
    "section": "Introduction",
    "text": "Introduction\nThis post explains my solution to the Advent of Code problem from Day 7. The communication device that you need to communicate with the other elves has now run out of file space. You must determine the file size of each directory and then identify the directory to delete in order to meet the proper operating requirements."
  },
  {
    "objectID": "posts/2023-05-05_aoc_Day07_Filepaths/2023-05-05_aoc_Day07_Filepaths.html#loading-the-input-file",
    "href": "posts/2023-05-05_aoc_Day07_Filepaths/2023-05-05_aoc_Day07_Filepaths.html#loading-the-input-file",
    "title": "Advent of Code Day 7: Tracking file paths",
    "section": "Loading the input file",
    "text": "Loading the input file\nThe input file consists of 964 lines of operating system commands and output. Simply using readLines function from base R does a fine job of reading each command as a string in a string vector containing all of the commands.\n\nlibrary(stringr)\nlibrary(dplyr)\n\n\nAttaching package: 'dplyr'\n\n\nThe following objects are masked from 'package:stats':\n\n    filter, lag\n\n\nThe following objects are masked from 'package:base':\n\n    intersect, setdiff, setequal, union\n\nfilepath <- here::here(\"./posts/data/aoc/day07_input.txt\")\ncommands <- readLines(filepath)\n\nThe input file structure looks similar to what is shown below. The OS commands begin with a “$” with cd and ls commands for change directory and list files respectively. After the ls command, the sub-directories and files are listed for the current directory with directories starting with dir and files listing the file size followed by the file name.\n$ cd /\n$ ls\ndir a\n14848514 b.txt\n8504156 c.dat\ndir d\n$ cd a\n$ ls\ndir e\n29116 f\n2557 g\n62596 h.lst\n$ cd e\n$ ls\n584 i\n$ cd ..\n$ cd ..\n$ cd d\n$ ls\n4060174 j\n8033020 d.log\n5626152 d.ext\n7214296 k"
  },
  {
    "objectID": "posts/2023-05-05_aoc_Day07_Filepaths/2023-05-05_aoc_Day07_Filepaths.html#part-one-directory-sizes",
    "href": "posts/2023-05-05_aoc_Day07_Filepaths/2023-05-05_aoc_Day07_Filepaths.html#part-one-directory-sizes",
    "title": "Advent of Code Day 7: Tracking file paths",
    "section": "Part One: Directory sizes",
    "text": "Part One: Directory sizes\nThe first goal is to determine the size of each directory from the commands and output listed in the input file. The directory paths can be tracked from the commands containing cd. There are three types of cd commands: 1) $ cd \\ to go back to the root directory, 2) $ cd .. to go back (up) one directory and 3) $ cd[dir name]. The ls commands can be ignored as the subsequent output can be handled directly. The dir output can also be ignored since the directories are tracked with the cd commands. The file size and name output must be saved to their corresponding directory path.\n\npath <- \"root\"\n# Initialize tibble to store the file info\nfiledf <- tibble(dirpath = character(), filesize = character(), filename = character())\n\nfor (command in commands) {\n  # Split each command into a string vector\n  comm_spl <- str_split(command, pattern = \" \", simplify = TRUE)\n  \n  if (comm_spl[[1]] == \"$\") {\n    \n    if (comm_spl[[2]] == \"ls\") {\n      # do nothing\n    } else {\n      # Otherwise it is a cd command so update the path\n      if (comm_spl[[3]] == \"/\") {\n        path <- path[1]\n      } else if (comm_spl[[3]] == \"..\") {\n        path <- path[1:length(path)-1]\n      } else {\n        path <- c(path, comm_spl[[3]])\n      }\n    }\n  } else if (comm_spl[[1]] == \"dir\") {\n    # do nothing\n  } else  {\n    # Otherwise it is a number and a file name\n    # For loop to save the file size for current directory and all parent directories\n    for (i in 1:length(path)) {\n      filedf <- bind_rows(filedf, tibble(dirpath = paste(path[1:i], collapse = \"/\"), filesize = comm_spl[[1]], filename = comm_spl[[2]]))\n    }\n  }\n}\n\nThe filedf tibble now contains a row for each file in each directory (including files in the sub-directories of the directory). The total directory size can now be determined by grouping on the directory path and using the dplyr summarize function.\n\ndirsizes <- filedf |>\n  mutate(filesize = as.numeric(filesize)) |>\n  group_by(dirpath) |> \n  summarize(total = sum(filesize), .groups = \"drop\")\n\nhead(dirsizes)\n\n# A tibble: 6 × 2\n  dirpath                                   total\n  <chr>                                     <dbl>\n1 root                                   42805968\n2 root/cmwrq                             10449487\n3 root/cmwrq/dtbzzl                       2919892\n4 root/cmwrq/dtbzzl/wwpnn                 2877389\n5 root/cmwrq/dtbzzl/wwpnn/lwqgsbg         1927095\n6 root/cmwrq/dtbzzl/wwpnn/lwqgsbg/dtbzzl   252091\n\n\nNow, we need to find the total size for all directories with size less than or equal to 100000. This total is found rather easily by filtering and summarizing using the corresponding functions from the dplyr package as shown below.\n\ndirsizes |>\n  filter(total <= 100000) |>\n  summarize(sum(total))\n\n# A tibble: 1 × 1\n  `sum(total)`\n         <dbl>\n1       919137"
  },
  {
    "objectID": "posts/2023-05-05_aoc_Day07_Filepaths/2023-05-05_aoc_Day07_Filepaths.html#part-two-select-a-directory-to-delete",
    "href": "posts/2023-05-05_aoc_Day07_Filepaths/2023-05-05_aoc_Day07_Filepaths.html#part-two-select-a-directory-to-delete",
    "title": "Advent of Code Day 7: Tracking file paths",
    "section": "Part Two: Select a directory to delete",
    "text": "Part Two: Select a directory to delete\nThe communication device file system has a total capacity of 70000000. In order to run an update, we need at least 30000000 free space on the device. As shown from Part One above, the root directory size is 42805968. We need to delete a directory with a size of at least 2805968 to free up enough space.\n\nmax_size <- 70000000\nfree_size <- 30000000\nunused_size <- max_size - dirsizes[[1, \"total\"]]  #max_size - root dir size\ndelete_size <- free_size - unused_size\n\ndelete_size\n\n[1] 2805968\n\n\nThe directory closest to this size but not under was found from the dirsizes tibble. The difference between the dir size and the delete size is determined for each directory, the differences below 0 are filtered out and the tibble is arranged so the least difference is at the top.\n\ndirsizes |>\n  mutate(distance = total - delete_size) |>\n  filter(distance >= 0) |>\n  arrange(distance) |>\n  slice(1)\n\n# A tibble: 1 × 3\n  dirpath                   total distance\n  <chr>                     <dbl>    <dbl>\n1 root/cmwrq/dtbzzl/wwpnn 2877389    71421\n\n\nThe question for Part Two was to enter the total size for this directory."
  },
  {
    "objectID": "posts/2023-05-05_aoc_Day07_Filepaths/2023-05-05_aoc_Day07_Filepaths.html#summary",
    "href": "posts/2023-05-05_aoc_Day07_Filepaths/2023-05-05_aoc_Day07_Filepaths.html#summary",
    "title": "Advent of Code Day 7: Tracking file paths",
    "section": "Summary",
    "text": "Summary\nThe Day 7 puzzle was solved easily once the means for tracking the filepaths was found. Storing all of the files in a tibble made it straightforward to find the answers using dplyr functions to group and summarize the directories appropriately.\n\n\n\n\n\n\nExpand for Session Info\n\n\n\n\n\n\n\n─ Session info ───────────────────────────────────────────────────────────────\n setting  value\n version  R version 4.2.2 (2022-10-31 ucrt)\n os       Windows 10 x64 (build 19045)\n system   x86_64, mingw32\n ui       RTerm\n language (EN)\n collate  English_United States.utf8\n ctype    English_United States.utf8\n tz       America/Chicago\n date     2023-05-08\n pandoc   2.19.2 @ C:/Program Files/RStudio/resources/app/bin/quarto/bin/tools/ (via rmarkdown)\n quarto   1.2.335 @ C:\\\\PROGRA~1\\\\RStudio\\\\RESOUR~1\\\\app\\\\bin\\\\quarto\\\\bin\\\\quarto.exe\n\n─ Packages ───────────────────────────────────────────────────────────────────\n ! package     * version date (UTC) lib source\n P dplyr       * 1.0.10  2022-09-01 [?] CRAN (R 4.2.2)\n P sessioninfo * 1.2.2   2021-12-06 [?] CRAN (R 4.2.1)\n P stringr     * 1.5.0   2022-12-02 [?] CRAN (R 4.2.2)\n\n [1] C:/Users/David Zoller/AppData/Local/Temp/RtmpqwuFJX/renv-library-27cc5ad71235\n [2] C:/Users/David Zoller/Documents/datadavidz.github.io/renv/library/R-4.2/x86_64-w64-mingw32\n [3] C:/Users/David Zoller/AppData/Local/Temp/RtmpqwuFJX/renv-system-library\n\n P ── Loaded and on-disk path mismatch.\n\n──────────────────────────────────────────────────────────────────────────────"
  }
]